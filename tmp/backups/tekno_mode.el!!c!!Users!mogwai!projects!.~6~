(require 'clomacs)
(require 'subr-x)

(clomacs-defun get-patterns techno.core/get-patterns :return-type :list)

(clomacs-defun get-patterns-from-string techno.core/get-patterns-from-string :return-type :list)


(message (symbol-name (car (get-patterns))))

(defun load-patterns-from-buffer (buf &optional sketch)
  (let* ((contents (with-current-buffer
                       (get-buffer buf)
                     (buffer-string)))
         (contents  (replace-regexp-in-string "" "" contents))
         (data (get-patterns-from-string contents sketch))
         (table (make-hash-table)))
    ;; (with-output-to-temp-buffer "*scratch*"
    ;;   (print data)
    ;;   )
    (dolist (el data)
      (message "%s" (car el) (cdr el) "test")
      (puthash (car el) (cdr el) table)
      )
    (setq pattern-data table))
  )

(message "%s" (gethash ":a" pattern-data "asd"))

(message (type-of pattern-data))

(load-patterns-from-buffer "*scratch*")

(defun build-pattern-model ()
  (let* ((column-model ; column model
        (list (make-ctbl:cmodel
              :title "A" :sorter 'ctbl:sort-number-lessp
              :min-width 5 :align 'centerc)
              (make-ctbl:cmodel
               :title "B" :align 'centerc
               :sorter 'ctbl:sort-number-lessp)
              (make-ctbl:cmodel
               :title "C" :align 'centerc)
              (make-ctbl:cmodel
               :title "D" :align 'centerc)
              (make-ctbl:cmodel
               :title "E" :align 'centerc)))
       (data
        '((1  "Bon Tanaka" "8 Year Curry." 'e)
          (2  "Bon Tanaka" "Nan-ban Curry." 'b)
          (3  "Bon Tanaka" "Half Curry." 'c)
          (4  "Bon Tanaka" "Katsu Curry." 'd)
          (5  "Bon Tanaka")))
       (model ; data model
          (make-ctbl:model
           :column-model column-model :data data))
       )
    model)
  )

(defun init-pattern-view ()
  (let* ((component (ctbl:create-table-component-buffer
                     :buffer (get-buffer-create "tekno") :model (build-pattern-model))))
    (setq techno-patterns component)
    (pop-to-buffer (ctbl:cp-get-buffer component))
    )
  )

(defun update-pattern-view ()
  (ctbl:cp-set-model techno-patterns (build-pattern-model))
  )
