(ns techno.motifs
  (:use [overtone.core]
        [techno.sequencer :as s])
  )

(defsynth sweet [note 60 dur 1 amp 1]
  (let [freq (midicps note)
        ratios [1 0.5 0.25]
        freqs (map * ratios (repeat (count ratios) freq))
        amps (map #(/ 1 %) (range 1 (count ratios)))
        sig (var-saw freq)
        attack (* 0.03 dur)
        sustain (* 0.5 dur)
        release (* 0.4 dur)
        env (env-gen (envelope [0 1 0.7 0] [attack sustain release]) :action 2)
        sig (* sig env amp)]
    (out:ar 0 sig)
    (out:ar 1 sig)
    )
  )

(def get-motif (atom (fn [_])))
(swap! get-motif (fn [_]
                   (fn [_]
                     (let [choices [[(note :Ab4)]
                                    [(note :G4)]
                                    [(note :C#4)]
                                    [(note :F5) (note :Ab5)]
                                    [(note :G5) (note :Bb5)]
                                    ]
                           oct 0
                           ;(* 12 (-> 2 rand int inc))
                           ]
                       (mapcat (fn [n] (vector sweet [(+ n oct) :amp 0.1]))
                               (choose choices))
                       ))))


(comment
  (@get-motif)
  (def note-player (s/gets 2))
  (s/addp note-player get-motif)
  (s/kill-sequencer note-player)
  )
