(require 'clomacs)
(require 'cl-lib)

(clomacs-defun get-patterns techno.core/get-patterns :return-type :list)

(clomacs-defun get-patterns-from-string techno.core/get-patterns-from-string :return-type :list)


(message (symbol-name (car (get-patterns))))

(defun load-patterns-from-buffer (buf &optional sketch)
  (let* ((contents (with-current-buffer
                       (get-buffer buf)
                     (buffer-string)))
         (contents  (replace-regexp-in-string "\"" "\\\\\"" contents))
         (data (get-patterns-from-string contents sketch))
         (table (make-hash-table :test 'equal)))
    ;; (with-output-to-temp-buffer "*scratch*"
    ;;   (print contents))
    (dolist (el data)
      (puthash (car el) (car (cdr el)) table)
      )
    (setq pattern-data table))
  )
(load-patterns-from-buffer "sketches.clj")
(update-pattern-view)

(defun build-pattern-model ()
  (let* ((column-model ; column model
          (list (make-ctbl:cmodel
                 :title "A" :sorter 'ctbl:sort-number-lessp
                 :min-width 5 :align 'centerc)
                (make-ctbl:cmodel
                 :title "B" :align 'centerc
                 :sorter 'ctbl:sort-number-lessp)
                (make-ctbl:cmodel
                 :title "C" :align 'centerc)
                (make-ctbl:cmodel
                 :title "D" :align 'centerc)
                (make-ctbl:cmodel
                 :title "E" :align 'centerc)
                (make-ctbl:cmodel
                 :title "F" :align 'centerc)
                (make-ctbl:cmodel
                 :title "G" :align 'centerc)
                (make-ctbl:cmodel
                 :title "H" :align 'centerc)))
         (data '(()))
         (data2
          (cl-loop for k being the hash-keys of pattern-data
                   do
                  (if (< (length (car (last data))) 8)
                      (setf data
                            (append (butlast data)
                                    (list (append (car (last data)) (list k)))
                                    ))
                    (setf data (append data (list (list k)) )))
                  ))
         (model ; data model
          (make-ctbl:model
           :column-model column-model :data data)))
    model)
  )

(defun show-pattern-view ()
  (interactive)
  (let* ((key (ctbl:cp-get-selected-data-cell techno-patterns))
         (buf (get-buffer-create "tekno-pattern")))
    (with-current-buffer buf
      (funcall 'clojure-mode)
      (erase-buffer)
      (insert (gethash key pattern-data))
      (insert (concat ";;" key))
      (pp-buffer)
      )
    (switch-to-buffer-other-window buf)
      )
  )

(defun add-pattern ()
  (interactive)
  (let* ((key (ctbl:cp-get-selected-data-cell techno-patterns))
         (pattern (gethash key pattern-data)))
    (nrepl-sync-request:eval
     (concat "(use '[overtone.core]
        '[overtone.inst.synth]
        '[techno.core :as core]
        '[techno.sequencer :as s]
        '[techno.synths]
        '[techno.drum-patterns]
        '[techno.drums]) (s/add-p core/player " pattern " " key ")")
     (cider-current-connection)
     (clomacs-get-session (cider-current-connection)))
      )
  )


(defun rm-pattern ()
  (interactive)
  (let* ((key (ctbl:cp-get-selected-data-cell techno-patterns)))
    (nrepl-sync-request:eval
     (concat "(use
        '[techno.core :as core]
        '[techno.sequencer :as s]
        ) (s/rm-p core/player " key ")")
     (cider-current-connection)
     (clomacs-get-session (cider-current-connection)))
      )
  )

(init-pattern-view)

(defun init-pattern-view ()
  (let* ((param (copy-ctbl:param ctbl:default-rendering-param))
         ;; (meh (setf (ctbl:param-bg-colors param)
         ;;            (lambda (model row-id col-id str)
         ;;              "Yellow")))
         (component (ctbl:create-table-component-buffer
                     :buffer (get-buffer-create "tekno") :model (build-pattern-model)
                     :custom-map (ctbl:define-keymap
                                  '(
                                    ("w" . ctbl:navi-move-up)
                                    ("s" . ctbl:navi-move-down)
                                    ("a" . ctbl:navi-move-left)
                                    ("d" . ctbl:navi-move-right)
                                    ("c" . ctbl:navi-jump-to-column)
                                    ("M-a" . add-pattern)
                                    ("M-r" . rm-pattern)

                                    ("C-e" . ctbl:navi-move-right-most)
                                    ("C-a" . ctbl:navi-move-left-most)
                                    ("<return>" . show-pattern-view)
                                    ("g" . ctbl:action-update-buffer)

                                    ([mouse-1] . ctbl:navi-on-click)
                                    ("C-m" . ctbl:navi-on-click)
                                    ))
                     :param param)))
    (setq techno-patterns component)
    (pop-to-buffer (ctbl:cp-get-buffer component))
    )
  )

(defun update-pattern-view ()
  (ctbl:cp-set-model techno-patterns (build-pattern-model))
  )
