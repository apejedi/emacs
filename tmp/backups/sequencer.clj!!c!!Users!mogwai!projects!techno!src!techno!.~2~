(ns techno.sequencer
  (:use [overtone.core]
        [overtone.inst.drum]
        )
  )



(def pattern
  {1 [dance-kick [:decay 2 :freq 100]]
   2 [closed-hat [] haziti-clap []]
   3 [dance-kick [200] dance-kick [300] ]
   4 [dance-kick [250] ]
   }
  )

(defn gen-pattern [size]
  (let [pattern {}
        instruments [dance-kick closed-hat tone-snare bing]]
    (reduce
     (fn [pattern beat]
       (let [instrument (choose instruments)
             scale (scale (choose [:Bb4 :C#5]) (choose [:major :minor]))
             ]
         (assoc pattern
                beat
                (vector
                 instrument
                 []
                 ;; (if (= instrument bing)
                 ;;   [:decay (- 2 (rand 1.5))
                 ;;    :freq (midicps (choose scale))
                 ;;    ]
                 ;;   [])
                 )
                )))
     {}
     (range 1 size)
     )
    )
  )

(defn player
  [cur-beat]
  (let [beat-actions (pattern (int cur-beat))]
    (dorun
     (for [[instrument args] (partition 2 beat-actions)]
       (do
         (apply instrument args)
         )
       ))
    )
  )

(def pattern (gen-pattern 20))
(def t (sequencer 10 10))
(ctl t :clock-speed 10)
(ctl t :beats-per-measure 20)
(kill t)



(defsynth trigger-synth [clock-speed 128 uid 0 beats-per-measure 4]
  (let [trigger (impulse:kr clock-speed)
        count (stepper:kr trigger :min 1 :max beats-per-measure)]
    (send-trig:kr trigger uid count)
    )
  )


(defn sequencer
  "Creates and starts a sequencer
  args: [clock-speed 1(per second) beats-per-measure 4]
  "
  ([] (sequencer 1 4))
  ([clock-speed] (sequencer clock-speed 4))
  ([clock-speed beats-per-measure]
   (let [
         uid (trig-id)
         s (trigger-synth clock-speed uid beats-per-measure)
         ]
     (on-trigger uid (fn [beat] (player beat)) ::sequencer)
     s
     )
   )
  )
