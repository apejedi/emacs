(ns techno.sequencer
  (:use [overtone.core]
        [overtone.inst.drum]
        )
  )


(defonce ^:private patterns (atom {}))
(defonce ^:private sequencer-handlers (atom {}))
(defonce ^:private pattern-watchers (atom {}))


(def test-pattern
  (atom {
         1 [dance-kick []]
         2 [bing []]
         3 [bing []]
         4 [noise-snare []]
         5 [bing []]
         6 [dance-kick []]
         7 [bing []]
         8 [bing []]
         9 [noise-snare []]
         10 [dance-kick []]
         })
  )
(def test-pattern2
  (atom {
         1 [tone-snare []]
         2 [noise-snare []]
         3 [tone-snare []]
         4 [noise-snare []]
         5 [dance-kick []]
         })
  )
;; (swap! pattern
;;        (fn [_]
;;           (gen-pattern 20)
;;          )
;;        )
;; (def t (start-sequencer test-pattern 10))


;; (ctl t :clock-speed 5)
;; (ctl t :pattern-size 20)
;; (def s (syncopate t))
;; (kill t)
;; (kill s)
;; (stop)

;; (def test-s (get-sequencer))
;; (add-pattern test-s test-pattern)
;; (add-pattern test-s test-pattern2)
;; (ctl test-s :clock-speed 5)
;; (kill-sequencer test-s)


(defn get-rand-int [min max]
  (+ (rand-int (- max min)) min)
  )

(defn get-val-if-ref [x]
  (if (instance? clojure.lang.Atom x)
    @x
    x
    )
  )
(defsynth syncopation-synth [freq 1 uid 0]
    "A synth to randomly modulate the clock speed of a trigger synth"
    (let [trigger (dust:kr freq)]
      (send-trig:kr trigger uid)
    )
    )


(defn syncopate
  "Creates a syncopation synth which randomly changes clock speed of a trigger synth"
  ([trig-synth] (syncopate trig-synth 1 5 10))
  ([trig-synth freq from to]
   (let [uid (trig-id)
         synth (syncopation-synth freq uid)
         ]
     (println "adding handler on " uid)
     (on-trigger uid
                 (fn [_]
                   (ctl trig-synth :clock-speed (get-rand-int from to)))
                 ::syncopate)
     synth
     ))
  )


(defn pp-pattern [pattern]
  (println "{")
  (doseq [i (sort (keys pattern))]
    (print i " ")
    (doseq [[instrument args] (partition 2 (pattern i))]
      (print "[" (.name instrument) args "]"))
    (println)
    )
  (println "}")
  )




(defn player
  [cur-beat pattern]
  (cond
    ((seq? pattern)

     )
    ((map? pattern)
     (let [beat-actions (pattern (int cur-beat))]
       (dorun
        (for [[instrument args] (partition 2 beat-actions)]
          (do
            (apply instrument args)
            )
          ))
       )))
  )


(defsynth trigger-synth [clock-speed 128 uid 0 pattern-size 4]
  (let [trigger (impulse:kr clock-speed)
        count (stepper:kr trigger :min 1 :max pattern-size)]
    (send-trig:kr trigger uid count)
    )
  )


(defn add-pattern [sequencer pattern]
  (let [id (to-sc-id sequencer)
        cur-val (get @patterns id [])
        watcher-key (keyword (gensym "pattern"))]
    (swap! patterns (fn [p]
                      (assoc p id (conj cur-val pattern))
                      ))
    (update-pattern-size sequencer)
    (if (instance? clojure.lang.Atom pattern)
      (do
        (add-watch pattern watcher-key (fn [& args] (update-pattern-size sequencer)))
        ;(swap! pattern-watchers (fn [w] (assoc w  watcher-key)))
        )
      )
    )
  )

(defn- update-pattern-size [sequencer]
  (if (node-active? sequencer)
    (ctl sequencer :pattern-size
         (reduce (fn [c p]
                   (let [val (get-val-if-ref p)]
                     (max c
                          (if (map? val) (apply max (keys val)) (count val)))
                     ))
                 1 (get @patterns (to-sc-id sequencer)))))
  )

(defn remove-pattern [sequencer pattern]
  (let [id (to-sc-id sequencer)
        cur-val (get @patterns id [])]
    (swap! patterns (fn [p]
                      (assoc p id
                             (remove #(= (get-val-if-ref pattern) (get-val-if-ref %)) cur-val))
                      ))
    (update-pattern-size sequencer)
    )
  )


(defn get-sequencer
  ([] (get-sequencer 2))
  ([clock-speed]
   (let [uid (trig-id)
         synth (trigger-synth clock-speed uid 10)
         key (keyword (gensym "sequencer"))]

     (on-trigger synth uid
                 (fn [beat]
                   (doseq [p (get @patterns (to-sc-id synth))]
                     (player beat (get-val-if-ref p))))
                 key)
     (swap! sequencer-handlers (fn [handlers]
                                 (assoc handlers (to-sc-id synth) key)))
     synth
     ))
  )

(defn kill-sequencer [sequencer]
  (swap! patterns (fn [p] (dissoc p (to-sc-id sequencer))))
  (remove-event-handler (get sequencer-handlers (to-sc-id sequencer)))
  (kill sequencer)
  )

(defn replace-patterns [sequencer replacement]
  (swap! patterns (fn [p]
                    (assoc p (to-sc-id sequencer) replacement)))
  )

(defn get-current-patterns
  ([] patterns)
  ([sequencer]
   (get patterns (to-sc-id sequencer) []))
  )


;; (defn start-sequencer
;;   "Creates and starts a sequencer
;;   args: [pattern (atom {1 [instrument1 [instrument1 args]...] 2 [instrument2 [instrument2 args]]})   clock-speed 1(per second)]
;;   "
;;   ([pattern] (start-sequencer pattern 1))
;;   ([pattern clock-speed]
;;    (let [
;;          uid (trig-id)
;;          synth (trigger-synth clock-speed uid (count (if (= (type pattern) clojure.lang.Atom)
;;                                                    @pattern
;;                                                    pattern)))]
;;      (add-watch pattern :sequencer
;;                 (fn [key pattern old new]
;;                   (ctl synth :pattern-size
;;                        (count  (if (= (type pattern) clojure.lang.Atom)
;;                                  @pattern
;;                                  pattern
;;                                  )))))
;;      (on-trigger uid
;;                  (fn [beat]
;;                    (player beat
;;                            (if (=  (type pattern) clojure.lang.Atom)
;;                              @pattern
;;                              pattern)))
;;                  (keyword (gensym "sequencer")))
;;      synth
;;      )
;;    )
;;   )
