* Agenda

** File upload
Add clamav parameters on test, qa, prod

UploadHelper -> Upload2Helper/Sa3UploadHelper
constructor (initializes MultipartRequest which saves web stream to disk, creates batchjob)
-> doWork (initializes batch job and submits it?)


1) Add logic to check restrictions in the UploadHelper constructor
- logic stays in one place
- However, throws an exception which will need to be caught and displayed as an error on page
- Might have unforseen consequences, however won't be an issue if it runs only for users with task

2) Add a check restrictions method in super class and have child classes call it and handle individually


WEB-INF/classes/com/medservelink/weblib/MultipartFormData.java
WEB-INF/classes/com/medservelink/apps/batch/batchjob/UploadHelper.java
WEB-INF/classes/com/medservelink/apps/batch/batchjob/Upload2Helper.java
apps/batch/batchjob/Sa3Upload.jsp
apps/batch/batchjob/upload2.jsp
apps/batch/batchjob/Sa3MultiUpload.jsp
WEB-INF/classes/com/medservelink/apps/batch/batchjob/Sa3UploadHelper.java
WEB-INF/classes/com/medservelink/weblib/ClamAVClient.java
WEB-INF/classes/com/medservelink/apps/batch/batchjob/Sa3MultiUpload2Helper.java


Make whitelist for file extensions and make sure only files on the whitelist are allowed
Use converter to test Input

Add file size limit of 25 mb for users with the task

Add frequency limit of 3 files per hour, should be a limit on batch job submission?

*** Add scanning code to MultiPartFormData and test using web interface.


*** Write logic to validate file type and size
Create new task for file uploader





Possible to validate with Converter?

Too many too test,


Need to get store from batch setting

Test magic numbers

Write logic to cross-check file type using extension and content

Figure out upload limit for files


*** Write logic to validate frequency of uploads


*** Rules

- If the application requires uploaded files to be of a specific type such as PDF, text, or
Word Document, the application should validate that the extension is '.pdf ', '.txt' or
'.doc'.
- The first four bytes of the file should be validated. These first few bytes are known as the
file's 'Magic Number' and will uniquely identify the file type. For example all PDF files
start with the byte-sequence '%PDF'.
- An upper limit on file size should be enforced, as determined on a case-by-case basis. For
instance, if a typical file upload is 10 MB, the application should reject files that are larger
than 25 MB.
- The final check should validate the frequency of file uploads. If the application detects a
high frequency of file uploads from a single user, the application should prohibit the user
from uploading files for a period of time.
In addition to the primary criteria above, all uploaded files should be scanned for known
malware/viruses.

Steps To Reproduce:
1. Login to the application as an Admin user.
2. Navigate to the Batch -> Submit New batch functionality.
3. Try to upload EICAR test virus text file containing malicious STRING data
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUSTEST-FILE!$H+H*
into the application from http://www.eicar.org/85-0-
Download.html
4. Notice the application successfully accepting the test EICAR virus file.



** RQA
Make class which calls the service

Go through each field and map it sa field and make list of questions for ecn contact

*** Alerts
" SSN Action Code - compares input SSN to result SSN. Possible values include:
o E - Result SSN EQUAL to the SSN provided.
o I - 7 or more digits are in common and the original Input SSN has typos for the person provided. Experian Health found and CORRECTED the SSN.
o N - 6 or fewer digits are in common and the original Input SSN is not associated with the person provided. Experian Health found correct person and CORRECTED the SSN.
o Q - Input SSN is not associated with the person provided. Experian Health could NOT CORRECT the SSN and returned information for the SSN provided.
o Blank - Experian Health received a response, but the result set did not include an SSN
o X - Experian Health received a response, but the result contained a response SSN that is considered invalid or fraudulent.
  Name Action Code - compares input Name to result Name. Possible values include:
o N - Result name NOT EQUAL to the one provided
o E - Result name EQUAL to the one provided (does take into account common abbreviated names such as Bob versus Robert)
o M - MAY be the same. Potentially a maiden name or a legal name change made the input and output different.
  Address Action Code - compares input Address to result Address. Possible values include:
o E - Address returned matches the input address exactly (ignores abbreviations such as Ave versus Avenue)
o N - Address returned is drastically different than the input address.
o I - Address returned is a fuzzy match to the input address. Essentially it's the same address, but there may be slight variations or improvements made, such as provided the correct city (which wouldn't have caused it to be undeliverable as the post office would have gone against zip).
o X - Address returned is incomplete or known undeliverable.
  Red Flag Action Code - identification, detection and response to patterns, practices or specific activities that could indicate identity theft or fraud. Possible values include:
o 1 = Name and SSN Discrepancy (or input SSN is invalid)
o 2 = Name and Address Discrepancy
o 3 = Address and SSN Discrepancy (or input SSN is invalid)
o 4, 6 = Deceased
o 5 = Credit Report Fraud Alert (initial fraud alert, extended fraud alert or active duty fraud alert)
o 7 = Inquiry SSN Not Issued
o 8 = Inquiry age < SSN Issue Date
o 9 = Date Credit Established < SSN Issue Date
o 10 = Non-Residential Inquiry Address


*** RqaAlert



** Reflected XSS
A Reflected Cross-Site Scripting (XSS) vulnerability occurs when a web application sends strings
that were provided by an attacker to a victim’s browser in such a way that the browser executes
part of the string as code. The string contains malicious data and is passed as to the application
through a parameter that an attacker can control (e.g. a URL parameter or an HTML form field).
The application immediately inserts it into its response. This results in the victim's browser
executing the attacker's code within a legitimate user's session. Attackers typically exploit
reflected XSS vulnerabilities by sending users malicious links containing JavaScript code (e.g. via
e-mail) or by posting malicious code to other sites that the vulnerable application’s users may
visit.
Reflected Cross-Site Scripting vulnerabilities give the attacker control of the user’s browser. The
attack can alter page content with malicious HTML or JavaScript code. The attacker can
arbitrarily alter page content displayed to the victim and can execute application functions using
the victim’s application identity if the victim is authenticated to the application. An often cited
example use of a Reflected Cross-Site is where the attacker sends himself/herself the victim’s
session identifier. With this session identifier, the attacker can then perform application functions
using that user’s identity for the duration of that session.

Instances:
1. https://beta.searchamerica.com/apps/cdat/EditCompanyAddress.jsp/apps/cda
t/EditCompanyAddress.jsp?n0nc3=92ecfab9-4970-45e1-8ab0-
1cd1afa3013f&focus=email-
300%2B%7BtoString%3Aalert%7D%2F%2F&type=street&uiFrameType=Sa3IFr
ame
2. https://beta.searchamerica.com/apps/cdat/EditUser.jsp
a. Parameter : passwordField=1"/><script>alert(893)</script>


Steps To Reproduce:
1. Setup a proxy tool such as Burp Suite for the web browser.
2. Login to the application.
3. Navigate to the URL
https://beta.searchamerica.com/apps/cdat/EditCompanyAddress.jsp/apps/cda
t/EditCompanyAddress.jsp?n0nc3=92ecfab9-4970-45e1-8ab0-
1cd1afa3013f&focus=email-
300%2B%7BtoString%3Aalert%7D%2F%2F&type=street&uiFrameType=Sa3IFr
ame
4. Notice the web browser executes the malicious script reflected back by the
application without output encoding.
5. Navigate to the “Add User” functionality.
6. Turn the Intercept On in Burp.
7. Enter all the details and hit “Submit”.
8. Change the value for the parameter passwordField to
1"/><script>alert(893)</script>
9. Turn the Intercept off in Burp.



** Billing subcodes
decide on which codes to add
Add billing entries to lawg xml
test and make sure events are logged

com.medservelink.apps.search.handler.co.LawgHandler
/www/docs/intranet/jumraiya/WEB-INF/classes/com/medservelink/apps/search/conf/search.Smart.Lawg.xml



** Investigate worklist issue


** Add logic for control indicator
Get set of records divided by control indicator





Unenroll noPFR accounts from triggers and scoring (check in SetCaToBeEa)
Edit cpoextract to allow record through,
Alter caToBeEa, ctToBeAd,ctTobeDe


Unenroll noScoring accounts from triggers
Alter ctToBeDe
Verify results of pfr load


Create Tests for each case



        controlIndicator ,
        controlIndicator | 1 AS '1 - noPFR' ,
        controlIndicator | 2 AS '2 - noCollectionTriggers' ,
        controlIndicator | 4 AS '4 - noScoring' ,
        controlIndicator | 8 AS '8 - noSegmentation'

*** Pfr
Load set of outcomes in cpos with a subset having control indicator set to 1
verify that subset with the control indicator does not get loaded
stp_loadCpoPfrStage


*** Scoring
Load set of visit change logs into VisitChangeLog with a subset control indicator set to 4
verify that subset with the control indicator does not get loaded

***** CO Suite
p_CpaStatus_setCaToBeEa

***** Collection Advantage


*** Segmentation
p_CpaStatus_updateSsStatus


*** Triggers





** WorkItem Update
Investigate which service is used to update workitem on SA
and how to percolate that information to workitempush logic




** Add fields for PfrRequest


** Add tool to track object creation


** Create wiki/template for bootstrap



* Conference
Chairperson passcode: 34401936 then #
Participant passcode: 27592648 then #

* Extract sql from Criteria
#+BEGIN_SRC java
            	  try {
            	      org.hibernate.internal.CriteriaImpl c =
            	          (org.hibernate.internal.CriteriaImpl)crit;
            	      org.hibernate.internal.SessionImpl s =
            	          (org.hibernate.internal.SessionImpl)c.getSession();
            	      org.hibernate.engine.spi.SessionFactoryImplementor factory =
            	          (org.hibernate.engine.spi.SessionFactoryImplementor)s.getSessionFactory();
            	      String[] implementors = factory.getImplementors( c.getEntityOrClassName() );
            	      org.hibernate.loader.criteria.CriteriaLoader loader = new
            	          org.hibernate.loader.criteria.CriteriaLoader(
            	                                                       (org.hibernate.persister.entity.OuterJoinLoadable) factory.getEntityPersister(implementors[0]),
            	                                                       factory,
            	                                                       c,
            	                                                       implementors[0], s.getLoadQueryInfluencers());

            	      java.lang.reflect.Field f = org.hibernate.loader.OuterJoinLoader.class.getDeclaredField("sql");
            	      f.setAccessible(true);
            	      String sql = (String)f.get(loader);
            	  } catch (Exception e) {
            	      //file.append("Didn't work: " + e.getMessage());
            	  }

            	////
            	org.hibernate.internal.CriteriaImpl criteriaImpl = (org.hibernate.internal.CriteriaImpl)crit;
            	org.hibernate.engine.spi.SessionImplementor session = criteriaImpl.getSession();
            	org.hibernate.engine.spi.SessionFactoryImplementor factory = session.getFactory();
            	org.hibernate.loader.criteria.CriteriaQueryTranslator translator=new org.hibernate.loader.criteria.CriteriaQueryTranslator(factory,criteriaImpl,criteriaImpl.getEntityOrClassName(),
            			org.hibernate.loader.criteria.CriteriaQueryTranslator.ROOT_SQL_ALIAS);
            	String[] implementors = factory.getImplementors( criteriaImpl.getEntityOrClassName() );

            	org.hibernate.loader.criteria.CriteriaJoinWalker walker = new org.hibernate.loader.criteria.CriteriaJoinWalker((org.hibernate.persister.entity.OuterJoinLoadable)factory.getEntityPersister(implementors[0]),
            	                        translator,
            	                        factory,
            	                        criteriaImpl,
            	                        criteriaImpl.getEntityOrClassName(),
            	                        session.getLoadQueryInfluencers()   );

            	String sql=walker.getSQLString();
#+END_SRC



* Monitoring
monitor /www/logs/realprod
monitor /www/logs/apiprod
monitor /www/logs/*access_log

* Search procs
SELECT OBJECT_NAME(object_id)
    FROM sys.sql_modules
    WHERE OBJECTPROPERTY(object_id, 'IsProcedure') = 1
    AND definition LIKE '%Foo%'
* DB auth
{securitylogin=58doguau
 searchamerica=yuua8qad
 uubappuser=sampvba1!
 family=iojoxeka
 docpost=autatubo
 tao=nuiajyda
 softlink=ry8cywa5
 intranetammtest=qoaemofi
 banking=safysa88
 softlink_test=na8gaqyx
 centralpt1=38ao5riy
 FastTrackUser=SAMPVEH2007
 master=oooiiysi
 igeneric=igeneric9
 mcgdps=xuaudefy
 datapathstatus=77eayive
 calendar=kazykiau
 medserve=aemeceru
 cpsload=aijuxysy
 mopndirtest=m0pnd1rt3st
 irsgtst=6waru6zi
 ReportingDBUser=5eNKDyLO
 tableau=q9Mr5SGnkA
 mango=yuvamoto
 model=jidima5d
 sybsystemprocs=gyfiiyco
 qmkiosk_prd=qml1v3
 webtrack=xynume8q
 intranetidexx=gu2pe86y
 vg=ha9pabau
 wrklstui=G1bb3R1sH
 pfr=bQqvse72
 busforum=xyma4tep
 bugtrack=bikecuqa
 panelmbrdev=hi4there
 jgross=high5cat
 extranet=xyyoreni
 misc=augydy9b
 aca=vusugego
 docpost2=wifu65ra
 mlong=blahblah
 sg2=892ye8ju
 mopndirprod=m0pnd1r
 fax=miueko77
 orm=Am1G1P42
 qmkiosk_train=qmtr41n
 user=bezuregu
 ucare=je2jefac
 jira=deadbeef
 toro=ju2sybek
 accesscash=vumuruha
 sales=4fimacem
 partnercnxtest=je5qa35d
 congo=8gubeooo
 intranetidexxtest=jabefy5q
 northstar=fiaybozo
 websqlconf=6uokiaik
 MSSQL=PfrAppUser
 intranetgeneric=quhueyue
 qmkiosk_test=nurseinbox
 searchtrack=8tnyTrk1
 predmodel=mkmwtla3
 omega=4qefijii
 idbanks=duwikiwa
 eligdev=fo75gy59
 wpc=nuaieaoy
 irsgprd=voiodocy
 eligprod=55xyaawy
 test=8cy6qoga
 starwars=leetd00d
 worklist2=kVadUxbx
 upa=upa~experian
 tempdb=se566nux
 qmkiosk_dev=nurseinbox
 subscription=bi998raf
 change=he875kat
 amm=mac1imm
 partnercnxprod=dodidubi
 procsetappuser=y3ll0ws5n
 billing=euziuysi
 elm=fenieuxi
 PfrAppUser=qwer1234
 intranetamm=vyeezaqu
 gebhardtcms=ze2vy7ue
 webconf=ciwo76qa
 idexxshoptest=feaepu6e
 torotest=oo7568qo
 batch=xecuqeqy
 pcs=iyaazubi
 brs=xocotoka
 sid=92putuja
 sa=One00th1rty!
 idexxshopdev=gixo679u
 WebFileTransfer=uibicyco
 centralpt=weuy8fyn
 confluence=zak0IJHG
 saapps=xesyaoia
 partnercnxdev=seguay8c
 wpcs=xodo4oyr
 mopndirdev=boii9hop
 jiradb=R8yY68o5
 pubs2=va9aueai
 eligdemo=8ieyiiu7
 sportsmansguide=8xapaxey
 irsgdev=kabunydu
 apitest=evian1
 panelmbr=burieizy
 webemail=7na4pibo
 idexxshopprod=6pygioa2}




* CO

** Batch Segmentation
AddCoAccounts

cpaController runs transitions on cpaStatus records using transitions.properties

What is the difference between the two? Analyze agency outcomes, QPO is supposed to be analagous

*** PFR
**** Tables
Bankruptcy
CompanyUiSetting
CompanyWorkflowDefinition
ConsumerStatement
CreditReport
DataSource
Dossier
DossierType
FieldDefinition
FilterLayout
FilterLayoutSet
FilterLayoutXml
FlaggedPerson
FormSnapshot
Guarantor
GuarantorChangeLog
Inference
InferenceType
Insurance
JobProgressSetting
Mod
Patient
PatientOutcomesPfr
Payer
PaymentHistory
PaymentPlanStat
Person
PersonHistory
PersonVisitLog
PfrLog
PfrMigrationProgress
Program
ProgramDefinition
ProgramForm
ProgramFormDefinition
ProgramFormFieldDefinition
ProgramFormLinkageDefinition
ProgramWorkflowDefinition
RulesClass
UiSetting
Visit
VisitGuarantorHistory
VisitChangeLog
VisitInsurance
WorkflowDefinition
WorkflowWorkStepDefinition
WorkItemPfr
WorkListLayoutXml
WorkStep
WorkStepDefinition
WorkTask


*** QPO structure
ID,
 healthSystemId,
 healthSystemAgencyId,
 companyid,
 snapshotDate,
 lastModDate,
accountNumber	                varchar	20	Unique number identifying each patient account. For Hospital Billing this is typically considered the HAR. For Physician Billing this is one of two items depending on how accounts are requested and/or provided to agency vendors:
                                                1.	PB HAR (Visit Level - Aggregated)
                                                2.	PB TX_ID (Charge Level or Encounter Level)

Mrn	                        varchar	20	MRN/MPI Number is the unique number identifying a patient across visits

guarantorNumber	                varchar	20	The number assigned to a specific guarantor across multiple accounts in order to tie accounts back to a single guarantor

recordAccountId	                varchar	20	Unique secondary Id specific to a visit within a guarantor account, also considered the HAR or the visit Number on the account. If accountNumber is provided as the HAR, then recordAccountId isn't necessary

patientType	                varchar	100	Code for IP, OP, ER

insurance1FinancialClass	varchar	40	Code indicating primary financial classification
                                                (Medicare, Medicaid, Self-Pay, Commercial).
                                                This field needs to be particularly utilized for Physician Billing when accounts are provided on the Aggregated Level

insurance2FinancialClass	varchar	40	Code indicating secondary financial classification
                                                This field needs to be particularly utilized for Physician Billing when accounts are provided on the Aggregated Level

insurance3FinancialClass	varchar	40	Code indicating tertiary financial classification
                                                This field needs to be particularly utilized for Physician Billing when accounts are provided on the Aggregated Level

currentFinancialClass	        varchar	40	Distinguish between TSP or BAI

Payer	                        varchar	50	Specific description identifying the initial insurance payer for this account. This is not likely to change on account over time

accountStatus	                varchar	20	Whether account is in an one of the following statuses
                                                (HAR level):
                                                UB(UNBILLED): Account with charges, but balances are yet to be assigned to insurance or patient responsibility
                                                O(OPEN): Active account, account has charges and a balance (regardless of insurance or patient responsibility)
                                                CL(CLOSED): Account is no longer active or being collected upon, the accountBalance is equal/less than $0 (not in bad debt)
                                                BD(BAD DEBT): Account is in bad debt and/or a bad debt vendor for collections

facilityId	                varchar	80	Identifier or Facility Code that the patient visited. Also called Facility, Entity Code, or Location of the visit. This field is essential for sorting accounts for reporting purposes

serviceType	                varchar	20	The type of service rendered to patient on the account, simply what service was provided to the patient for this account

guarantorLastName

guarantorFirstName

guarantorMiddleInitial

guarantorAddress1

guarantorAddress2

guarantorCity

guarantorState

guarantorZip

guarantorHomePhone

guarantorSSN

guarantorDOB

guarantorGender

guarantorEmployer

outstandingPatientBalance

currentBadDebtAmount


*** Columns NOT in QPO
snapshotDept
fileType
searchid
diagnosticCode
procedureCode
drgCode
patientLastName
patientFirstName
patientMiddleInitial
patientAddress1
patientAddress2
patientCity
patientState
patientZip
patientHomePhone
patientSSN
patientDOB
admitDate
dischargeDate
arPostingDate
lastBillingDate
lastPaymentDate
closingDate
returnMailFlag
totalCharges
initialPatientResponsibility
patientPayments
insurance1Payments
insurance2Payments
insurance3Payments
totalPayments
patientAdjustments
insuranceAdjustments
totalAdjustments
insurance1OutstandingBalance
insurance2OutstandingBalance
insurance3OutstandingBalance
accountBalance
householdIncome
householdSize
hisUserID
charityAmount
arStatus
arDays
searchMatch
searchMatchNew
visitId
collectorCode
insurancePayments
insuranceOutstandingBalance
registrationUserName
guarantorAddressMatching
lastModDate
saCloseDate
previousSnapshotDate
selfPayDate
agencyCode
accountHoldStatus
placementDate
lastModUser
patientEmployer
earlyOutPlcmtDate
badDebtPlcmtDate
posPayments
collectorId
billingType
paymentPlan
bankruptcy
deceased
adminHold
balanceVisible
firstStatementDate
lastStatementDate
patientGender
billingIndicator
ins1PlanCode
ins2PlanCode
ins3PlanCode
dateBegin
clientAgencyCode
agencyCodeChangeDate
guarantorStatus
stopBillFlag
providerName


** Populate guarantor code
After a PFR migration you can watch in pfr..Visit for the values to be populated.

Select guarantorCode, visitId, lastModDate from Visit where healthSystemId = 'STARDATA(2)' and lastModDate > 'after code is changed'

Update the CPO extract proc (2 procs) and the cow procs to copy this field through to PFR.  This requires adding the column to several tables.
This includes cow..CpoPfrStaging (seems done)
cow..Visit (done)
work_space..Visit (done)
pfr..Visit, (done)
searchAmericaDW..Visit (done)

It also involves update the bulk move from cow to pfr proc stp_FastTrackOutVisit.

Also update the cursor proc p_cursorLoadVisit

We'll need to start adding some currentGuarantorCode data to CPO for stardata.



Update v_AgencyPfrStaging add guarantorCode
Update stp_loadAgencyToCpoPfrStaging
Update PopulateCpoExtract

mssql..cow (CpoPfrStaging populated by CpoExtractor)
stp_FastTrackOut ->           msi..work_space (done)
p_LoadPfr, p_cursorLoad... ->      msi..pfr


stp_PFR_DeleteAndPopulateVisitCpoQueue (done)
stp_PFR_UpdateVisitFinancials (done)
cow..currentPatientOutcomes -> cow..Visit



The idea is to use Guarantor code for clustering in BulkPfrClusterer

** Batch Job Processing
BatchLoader -> BatchManager -> BtachProcessor::runJob()
-> inputStore::processJob() || processSubmitted()

Iterates over job.getSearchIds
and calls BatchManager.getVendorManager().doSearch() on each search

Files get processed by AbstractStore::processInput

BatchJob::processStores -> Store::processOutput -> Converter::processOutput

** Collection Triggers
*** CtClientFileBuilder
ctAuditCount = select count(*) from CtAudit join CpaStatus on cpaStatusId where healthSystemId= and startDate,stopDate

trueCount = p_CpaStatus_getCtAuditCount (on msi)
#+BEGIN_SRC sql
SELECT @row_cnt = count(*)
   FROM
      dbo.CtAudit  AS cta
         WITH ( NOLOCK )
         JOIN dbo.CpaStatus  AS cpa
         WITH ( NOLOCK )
         ON cta.cpaStatusId = cpa.cpaStatusId
   WHERE
      cpa.healthSystemId = @healthSystemId AND
      cta.lastModDate >= @startDate AND
      cta.lastModDate < @stopDate
#+END_SRC

Updates the totalPatientResponsibility in pfr using #totalPatientBalance and sets snapshotDate=max(currentSnapshotDate) from CpoPfrStaging where currentHealthSystem=....


Loads Collecction Trigger Report Table
stp_CPA_CollectionTriggerReport_Insert
#+BEGIN_SRC sql
BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from
 -- interfering with SELECT statements.
  SET NOCOUNT ON;
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

      INSERT INTO dbo.CollectionTriggerReport
      ( ctAuditId ,
        patientOutcomesId ,
        healthSystemId ,
        visitId ,
        agencyOutcomeId
      )

      SELECT a.ctAuditId ,
        cpo.ID AS patientOutcomesId ,
        s.healthSystemId ,
        s.visitId  ,
        NULL AS agencyOutcomeId
      FROM dbo.CtAudit a
        INNER JOIN dbo.CpaStatus s ON a.cpaStatusId = s.cpaStatusId
		INNER JOIN dbo.company comp ON s.companyId=comp.companyid
        LEFT OUTER JOIN dbo.currentPatientOutcomes cpo ON ( s.accountNumber = cpo.currentAccountNumber
                 AND s.companyId = cpo.currentCompanyid
                 )
      WHERE s.healthSystemId = @healthSystemId
	    AND (comp.companyType IS NULL OR comp.companyType = 'H')
        AND (a.lastModDate < @stopDate AND a.lastModDate >= @lastModDate)
        AND a.ctAuditId NOT IN (SELECT ctr.ctAuditId FROM dbo.CollectionTriggerReport as ctr INNER JOIN dbo.CtAudit a ON ctr.ctAuditId = a.ctAuditId
        INNER JOIN dbo.CpaStatus s ON a.cpaStatusId = s.cpaStatusId WHERE s.healthSystemId = @healthSystemId
        )
UNION

      SELECT a.ctAuditId ,
        NULL AS patientOutcomesId ,
        s.healthSystemId ,
        s.visitId  ,
        curAgencyOutcomeId AS agencyOutcomeId
      FROM dbo.CtAudit a
        INNER JOIN dbo.CpaStatus s ON a.cpaStatusId = s.cpaStatusId
		INNER JOIN dbo.company comp ON s.companyId=comp.companyid
        INNER JOIN AgencyAccount aa ON s.accountNumber = aa.agencyAccountNumber
              INNER JOIN dbo.HealthSystemAgency hsa ON aa.healthSystemAgencyId = hsa.healthSystemAgencyId
                 AND s.companyId = hsa.agencyCompanyId
      WHERE s.healthSystemId = @healthSystemId
	    AND comp.companyType = 'A'
        AND (a.lastModDate < @stopDate AND a.lastModDate >= @lastModDate)
        AND a.ctAuditId NOT IN (SELECT ctr.ctAuditId FROM dbo.CollectionTriggerReport as ctr INNER JOIN dbo.CtAudit a ON ctr.ctAuditId = a.ctAuditId
        INNER JOIN dbo.CpaStatus s ON a.cpaStatusId = s.cpaStatusId WHERE s.healthSystemId = @healthSystemId
        )

 END
#+END_SRC

totalTriggerCounter = select count(*) as 'ct' from CtAudit cta with (nolock) JOIN CpaStatus cpa with (nolock) on cta.cpaStatusId = cpa.cpaStatusId where healthSystemId = ? and cta.lastModDate >= ? and cta.lastModDate < ?
(same as trueCount except gotten from mssql)

Iterates over agencies for health system
if

select count(*) as 'ct' from CtAudit cta with (nolock) JOIN CpaStatus cpa with (nolock) on cta.cpaStatusId = cpa.cpaStatusId where healthSystemId = ? and cta.lastModDate >= ? and cta.lastModDate < ?

** Segmentation
Mark secords sent to segmentation vendor
#+BEGIN_SRC sql
CREATE PROCEDURE dbo.p_CpaStatus_updateSsStatus
   @healthSystemId varchar(64) = NULL,
   @oldStatus varchar(8) = NULL,
   @newStatus varchar(8) = NULL,
   @modId varchar(40) = NULL,
   @lastModUser varchar(16) = NULL
AS

   /*
   *   Generated by SQL Server Migration Assistant for Sybase version 6.0.0.
   *   *****************************************************************
   *   **
   *   **     PROCEDURE p_CpaStatus_updateSsStatus
   *   **         created 05/30/2012    slw
   *   **         Transition CpaStatus records - set caStatus = @newCaStatus
   *   **                      where caStatus= @oldCaStatus
   *   **
   *   **  USAGE: p_CpaStatus_updateSsStatus '<oldStatus>', '<newStatus>', '<modId>', '<lastModUser>'
   *   **
   *   **  where
   *   **  @oldStatus = the old status to be changed (for the where clause)
   *   **  @newStatus = the new status to change the oldStatus (for the set clause)
   *   **  @modId = the modId from the Mod table associated with this change
   *   **  @lastmoduser = the lastModUser - defaults to database suser_name() if not supplied
   *   **
   *   **
   *   *****************************************************************
   */
   IF @healthSystemId = NULL OR @healthSystemId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateSsStatus expects @healthSystemId'

         SELECT ' USAGE  p_CpaStatus_updateSsStatus <healthSystemId> <oldStatus> <newStatus> <modId> <lastModUser>'

         RETURN 0

      END
   IF @oldStatus = NULL OR @oldStatus = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateSsStatus expects @oldStatus'

         SELECT ' USAGE  p_CpaStatus_updateSsStatus <healthSystemId> <oldStatus> <newStatus> <modId> <lastModUser>'

         RETURN 0

      END
   IF @newStatus = NULL OR @newStatus = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateSsStatus expects @newStatus'

         SELECT ' USAGE  p_CpaStatus_updateSsStatus <healthSystemId> <oldStatus> <newStatus> <modId> <lastModUser>'

         RETURN 0

      END
   IF @modId = NULL OR @modId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateSsStatus expects @modId'

         SELECT ' USAGE  p_CpaStatus_updateSsStatus <healthSystemId> <oldStatus> <newStatus> <modId> <lastModUser>'

         RETURN 0

      END
   /*      IF THE LASTMODUSER WASN'T PROVIDED, DEFAULT IT TO SUSER_NAME()*/
   IF @lastModUser = NULL OR @lastModUser = ' '
      BEGIN
         SELECT @lastModUser = suser_name()
      END
   /*set rowcount 100000*/
   SELECT cs.cpaStatusId, cs.lastModDate
      INTO #CpaStatusSs
   FROM dbo.CpaStatus  AS cs
   WHERE cs.ssStatus = @oldStatus AND cs.healthSystemId = @healthSystemId
   /*
   *   SSMA warning messages:
   *   S2SS0030: The database object was not found while resolving k.cpaStatusId.
   *   S2SS0030: The database object was not found while resolving k.lastModDate.
   */

   UPDATE cs
      SET
         ssStatus = @newStatus,
         ssStatusLastModDate = getdate(),
         modId = @modId,
         lastModUser = @lastModUser,
         lastModDate = getdate()
   FROM #CpaStatusSs  AS k, dbo.CpaStatus  AS cs
   WHERE k.cpaStatusId = cs.cpaStatusId AND k.lastModDate = cs.lastModDate/*set rowcount 0*/
#+END_SRC

Run Segmentation Procedure for Health System
Lima

Populates #LimaMemorialAccountsNeedingSegment with information from patientOutcomes, guarantor and visit
using records from CpaStatus that have ssStatus = 'SsSentVe'

Populates #LimaMemorialPullHistoricalByGuarantor
with information from patientOutcomes, #LimaMemorialAccountsNeedingSegment and visit
where outcome account status is either open or bad debt and patient balance is positive

Populates #LimaMemorialGuarantors from #LimaMemorialAccountsNeedingSegment
and aggregates by guarantorId, outcomeId, visitId, companyId and visitDate summing up balance, number of open/bad debt accounts



#+BEGIN_SRC sql
USE [searchAmericaDW]
GO

/****** Object:  StoredProcedure [dbo].[stp_Segmentation_LimaMemorial]    Script Date: 11/23/2015 8:49:47 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[stp_Segmentation_LimaMemorial]
    @healthSystemId VARCHAR(64)
   ,@modId VARCHAR(40)
   ,@lastModUser VARCHAR(16)
AS /*
***************************************************************************************************
Name:	dbo.stp_Segmentation_LimaMemorial
Author:	Zack Dixon
Date:	2015-09-25
---------------------------------------------------------------------------------------------------
Synopsis: Populates the Segmentation Table for LimaMemorial

---------------------------------------------------------------------------------------------------
Example:
exec dbo.stp_Segmentation_LimaMemorial '001A00000053dK4','XXXX','natl'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
09/25/2015	Zack Dixon			DA-1694		Create Lima segmentation
***************************************************************************************************
*/

    BEGIN
		-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
		-- SET TO READ UNCOMITTED to prevent blocking issue. No need to do "WITH (NOLOCK)" at the table level
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

		--1. Replace all "LimaMemorial" with Health System Name - such as LimaMemorial or BonSecours
		--2. Replace all "001A00000053dK4" with the actual healthSystemId
		--3. Replace all "LimaMemorial" with the Health System Name (match Step 1)
		--4. Replace all "FileTypeActual" with the fileType you are using (typically EPIC for guarantor based)


		--DECLARE @healthSystemId VARCHAR(64) = '001A00000053dK4' DECLARE @modId VARCHAR(40) = 'xxxx' DECLARE @lastModUser VARCHAR(16) = 'zdixon' DROP TABLE #LimaMemorialAccountsNeedingSegment
		--Step to pull all records qualifying for Segmetnation and the needed fields for later.

		DECLARE @today DATE = GETDATE()

        SELECT  cs.caStatus
               ,COALESCE(g.creditScore,t.creditScore) AS creditScore
               ,CASE when DATEDIFF(day,g.priorityScoreDate, @today) < 100 then g.priorityScore
				ELSE NULL
				end AS priorityScore
               ,g.guarantorId
               ,v.visitId AS vvisitId
               ,cs.cpaStatusId
               ,cs.ssStatus
               ,poc.insurance1FinancialClass AS visitFinancialClass
               ,poc.totalCharges - insuranceAdjustments - poc.insurancePayments - insuranceOutstandingBalance AS visitIPR
               ,poc.totalCharges AS visitCharges
               ,poc.insuranceAdjustments AS visitIA
               ,poc.insurancePayments AS visitIP
               ,poc.insuranceOutstandingBalance AS visitOIB
               ,poc.outstandingPatientBalance AS visitOPB
               ,poc.patientPayments AS visitPP
               ,poc.patientAdjustments AS visitPA
               ,v.guarantorId AS visitguarantorId
			   ,poc.patientType AS visitpatientType
               ,poc.admitDate AS visitadmitDate
               ,poc.ID AS visitpoID
               ,poc.companyid AS visitcompanyid
               ,v.dateBegin AS visitdateBegin
        INTO    #LimaMemorialAccountsNeedingSegment
        FROM    searchAmericaDW.dbo.CpaStatus cs WITH ( NOLOCK )
                JOIN dbo.Visit v WITH ( NOLOCK )
                                      ON cs.visitId = v.visitId
                JOIN dbo.Guarantor g WITH ( NOLOCK )
                                          ON g.guarantorId = v.guarantorId
                JOIN dbo.HospitalAccount hac WITH ( NOLOCK )
                                                  ON v.companyId = hac.companyId
                                                     AND v.patientAccountNumber = hac.accountNumber
                                                     AND v.healthSystemId = hac.healthSystemId
                JOIN dbo.patientOutcomes poc WITH ( NOLOCK )
                                                  ON hac.curPatientOutcomeId = poc.ID
                                                     AND hac.healthSystemId = poc.healthSystemId
				LEFT JOIN (SELECT x.healthSystemId, x.guarantorId, MAX(x.creditScore) AS creditScore
						FROM (
						SELECT t.healthSystemId, t.guarantorId, MAX(t.searchDate) AS searchDate
						FROM TRS.dbo.Analytics_MissingFPLAndScore t
						WHERE creditScore IS NOT NULL
						GROUP BY t.healthSystemId, t.guarantorId) AS y
							   JOIN TRS.dbo.Analytics_MissingFPLAndScore x ON y.healthSystemId = x.healthSystemId AND y.guarantorId = x.guarantorId AND y.searchDate = x.searchDate
						GROUP BY x.healthSystemId, x.guarantorId
				) t ON t.healthSystemId = cs.healthSystemId AND t.guarantorId = v.guarantorId
        WHERE   cs.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
                AND hac.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
                AND poc.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
                AND cs.ssStatus = 'SsSentVe'
                --AND poc.fileType = 'FileTypeActual'

		--Pulls all O/BD accounts for each guarantor to do guarantor balance.
        SELECT  po.*
               ,ha.firstSnapshotDate
               ,t.*
        INTO    #LimaMemorialPullHistoricalByGuarantor
        FROM    dbo.Visit v WITH (NOLOCK)
				JOIN dbo.HospitalAccount ha WITH ( NOLOCK )
					ON v.companyId = ha.companyId AND v.patientAccountNumber = ha.accountNumber AND v.healthSystemId = ha.healthSystemId
                JOIN dbo.patientOutcomes po WITH ( NOLOCK )
                                                 ON ha.curPatientOutcomeId = po.ID
                                                    AND ha.healthSystemId = po.healthSystemId
                JOIN #LimaMemorialAccountsNeedingSegment t
                    ON t.visitguarantorId = v.guarantorId
        WHERE   v.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
				AND ha.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
                --AND po.fileType = 'FileTypeActual'
                AND po.accountStatus IN ( 'O', 'BD' )
                AND ( po.outstandingPatientBalance > 0 )

		--Aggregates the accounts for the gaurantor
        SELECT  t.visitguarantorId AS guarantorId
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               --,MIN(CASE WHEN visitFinancialClass IN ( '5', '15', 'TSP' ) THEN -1
               --          ELSE visitFinancialClass
               --     END)
               ,'-1' AS visitFinancialClass
               ,SUM(CASE WHEN accountStatus = 'O' THEN outstandingPatientBalance
                         ELSE 0
                    END) AS 'Open Balance'
               ,SUM(CASE WHEN accountStatus = 'BD' THEN outstandingPatientBalance
                         ELSE 0
                    END) AS 'BD Balance'
               ,SUM(CASE WHEN accountStatus = 'O' THEN 1
                         ELSE 0
                    END) AS 'Open Accounts'
               ,SUM(CASE WHEN accountStatus = 'BD' THEN 1
                         ELSE 0
                    END) AS 'BD Accounts'
               ,COUNT(*) AS Records
               ,MAX(CASE WHEN t.creditScore IS NOT NULL THEN t.creditScore
                         WHEN t.priorityScore IS NOT NULL THEN t.priorityScore
                         ELSE -1
                    END) AS Score
               ,CASE WHEN MAX(CASE WHEN dateBegin < '01/01/2079' THEN dateBegin
                                   ELSE NULL
                              END) IS NULL THEN MAX(admitDate)
                     ELSE MAX(CASE WHEN dateBegin < '01/01/2079' THEN dateBegin
                                   ELSE NULL
                              END)
                END AS maxdate
        INTO    #LimaMemorialGuarantors
        FROM    #LimaMemorialAccountsNeedingSegment t
                LEFT JOIN #LimaMemorialPullHistoricalByGuarantor s
                    ON s.vvisitId = t.vvisitId
        GROUP BY t.visitguarantorId
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin

		--Final Prep step for Segmentation. This step is used to initially create the segments in Tableau
        SELECT  t.guarantorId
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               ,Score
               ,[BD Balance]
               ,[Open Balance]
               ,[BD Balance] + [Open Balance] AS [Total Balance]
               ,[Open Accounts]
               ,[BD Accounts]
               ,maxdate
               --,MIN(CASE WHEN r.currentFinancialClass IS NULL THEN t.visitFinancialClass
               --          ELSE IIF( r.currentFinancialClass IN ('5','15','TSP'),-1,r.currentFinancialClass)
               --     END)
               ,MIN(t.visitFinancialClass) AS FinancialClass
               ,COUNT(*) AS Records
               ,SUM(s.visitIPR) AS visitIPR
               ,SUM(s.visitOPB) AS visitOPB
               ,SUM(s.visitPP) AS visitPP
               ,SUM(s.visitPA) AS visitPA
        INTO    #LimaMemorialSegmentationAnalysis
        FROM    #LimaMemorialGuarantors t
                LEFT JOIN #LimaMemorialPullHistoricalByGuarantor s
                    ON t.guarantorId = s.guarantorId
                       AND t.visitpoID = s.visitpoID
                LEFT JOIN #LimaMemorialPullHistoricalByGuarantor r
                    ON t.guarantorId = r.guarantorId
                       AND t.visitpoID = r.visitpoID
                       AND t.maxdate = r.dateBegin
        GROUP BY t.guarantorId
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               ,Score
               ,[BD Balance]
               ,[Open Balance]
               ,[Open Accounts]
               ,[BD Accounts]
               ,maxdate

        DROP TABLE #LimaMemorialPullHistoricalByGuarantor
        DROP TABLE #LimaMemorialGuarantors

		--Step to create the actual segment by guarantor and assign a random number for control groups
        SELECT  t.guarantorId
               ,MIN(CASE	WHEN [Score] >= 825 and [Total Balance] < 200 then 'Segment 1'
							WHEN Score >= 800 AND [Total Balance] < 200 AND [BD Balance] = 0 THEN 'Segment 1'

							WHEN [Score] >= 775 and [Total Balance] < 2500 and [BD Balance] < 200 then 'Segment 2'
							WHEN [Score] >= 800 and [BD Balance] < 200 and [Total Balance] >= 200 then 'Segment 2'
							WHEN Score >= 775 and [BD Balance] = 0 AND [Total Balance] < 10000 then 'Segment 2'
							WHEN Score >= 800 and [BD Balance] = 0 and [Total Balance] >= 200 then 'Segment 2'

							WHEN Score >= 725 and [BD Balance] < 200 then 'Segment 3'
							WHEN Score >= 750 and [BD Balance] < 2500 then 'Segment 3'
							WHEN (Score >= 675 OR Score = -1) AND [BD Balance] = 0 THEN 'Segment 3'
							WHEN Score >= 775 THEN 'Segment 3'

							WHEN (Score >= 650 or Score = -1) then 'Segment 4'
							WHEN (Score >= 600 or Score = -1) and [Total Balance] < 10000 and [BD Balance] < 200 then 'Segment 4'
							WHEN Score >= 525 AND [BD Balance] = 0 THEN 'Segment 4'
							WHEN Score >= 550 AND [Total Balance] < 2500 AND [BD Balance] < 200 THEN 'Segment 4'
							else 'Segment 5'
				END) AS segmentCode
               ,CASE WHEN MAX(Score) = -1 THEN NULL
                     ELSE MAX(Score)
                END AS score
               ,RAND(BINARY_CHECKSUM(NEWID())) AS Random
               ,MAX(visitdateBegin) AS dateBegin
        INTO    #LimaMemorialSegmentCodeCreation
        FROM    #LimaMemorialSegmentationAnalysis t
        GROUP BY t.guarantorId

        DROP TABLE #LimaMemorialSegmentationAnalysis

		--Determines if the guarantor has ever been in a control group
        SELECT  s.guarantorId
               ,SUM(CASE WHEN s.segmentCode <> s.groupType THEN 1
                         ELSE 0
                    END) AS InControlGroup
        INTO    #PreviousGuarantorControlGroups
        FROM    dbo.Segmentation s WITH ( NOLOCK )
        WHERE   s.healthSystemId = '001A00000053dK4' -- '001A00000053dK4' -- LimaMemorial
        GROUP BY s.guarantorId

		--If they have been in a control group leave them there. If they have had a segment before and were not in a control group they are not eligible.  Otherwise they are eligible (IE only new guarantors).
        SELECT  t.guarantorId
               ,t.segmentCode AS groupType
               ,t.score
               ,t.Random
               ,CASE WHEN s.InControlGroup > 0 THEN 'Segment 2'
                     WHEN s.guarantorId IS NOT NULL OR dateBegin < '09/01/2015' THEN t.segmentCode
                     WHEN RIGHT(LEFT(t.Random, 4), 2) >= '05' THEN t.segmentCode
                     ELSE 'Segment 2'
                END AS segmentCode
        INTO    #LimaMemorialFinalControlGroups
        FROM    #LimaMemorialSegmentCodeCreation t
                LEFT JOIN #PreviousGuarantorControlGroups s
                    ON t.guarantorId = s.guarantorId

        DROP TABLE #LimaMemorialSegmentCodeCreation
        DROP TABLE #PreviousGuarantorControlGroups

		--Pulls all old segmented accounts that are still open per guarantor.
  --      SELECT  t.guarantorCode
  --             ,MAX(IIF(v.visitId IS NULL,NULL,s.lastModDate)) AS lastModDate
  --             ,t.segmentCode
  --             ,t.groupType
  --             ,t.score
  --      INTO    #LimaMemorialPreviousOpenAccount
  --      FROM    #LimaMemorialFinalControlGroups t
  --              LEFT JOIN dbo.Segmentation s WITH ( NOLOCK )
  --                                                ON s.guarantorCode = t.guarantorCode
  --                                                   AND s.healthSystemId = '001A00000053dK4' -- LimaMemorial
  --              LEFT JOIN dbo.Visit v WITH ( NOLOCK )
  --                                         ON s.visitId = v.visitId
  --                                            AND v.accountStatus = 'O'
  --                                            AND v.outstandingPatientBalance > 0
  --      GROUP BY t.guarantorCode
  --             ,t.segmentCode
  --             ,t.groupType
  --             ,t.score

		----If old open account is present it is used for those wanting "oldest open segment"
  --      SELECT  MIN(s.guarantorSegmentCode) AS guarantorSegmentCode
  --             ,t.guarantorCode
  --             ,t.segmentCode
  --             ,t.groupType
  --             ,t.score
  --      INTO    #LimaMemorialSegmentationGuarantor
  --      FROM    #LimaMemorialPreviousOpenAccount t
  --              LEFT JOIN dbo.Segmentation s WITH ( NOLOCK )
  --                                                ON s.guarantorCode = t.guarantorCode
  --                                                   AND t.lastModDate = s.lastModDate
  --                                                   AND s.healthSystemId = '001A00000053dK4' -- LimaMemorial
  --      GROUP BY t.guarantorCode
  --             ,t.segmentCode
  --             ,t.groupType
  --             ,t.score

		--DECLARE @healthSystemId VARCHAR(64) = '001A00000053dK4' DECLARE @modId VARCHAR(40) = 'xxxx' DECLARE @lastModUser VARCHAR(16) = 'zdixon'
		--Final step to insert into the segmentation table.
        INSERT  dbo.Segmentation
                (segmentationId
                ,healthSystemId
                ,visitId
                ,guarantorCode
                ,segmentCode
                ,groupType
                ,modId
                ,creditReportId
                ,lastModUser
                ,lastModDate
                ,creditScore
                ,guarantorSegmentCode
                ,segmentDate
                ,guarantorId
                )
                SELECT  NEWID()
                       ,v.healthSystemId
                       ,v.visitId
                       ,NULL
                       ,ISNULL(t.segmentCode, 'Segment 3') AS segmentCode
                       ,ISNULL(t.groupType, 'Segment 3') AS groupType
                       ,@modId AS modId
                       ,'' AS creditReportId
                       ,@lastModUser AS lastModUser
                       ,GETDATE() AS lastModDate
                       ,score AS creditScore
					   ,'' AS guarantorSegmentCode -- Use this if most recent segment is being used for output
                       --,IIF(t.guarantorSegmentCode IS NULL, t.segmentCode, t.guarantorSegmentCode) AS guarantorSegmentCode
                       ,GETDATE() AS segmentDate
                       ,v.guarantorId AS guarantorId
                FROM    #LimaMemorialAccountsNeedingSegment s
                        JOIN dbo.Visit v WITH ( NOLOCK )
                                              ON v.visitId = s.vvisitId
                        LEFT JOIN dbo.Segmentation seg WITH ( NOLOCK )
                                                            ON seg.healthSystemId = @healthSystemId-- '001A00000053dK4' -- LimaMemorial
                                                               AND s.vvisitId = seg.visitId
                        LEFT JOIN #LimaMemorialFinalControlGroups t
                            ON s.visitguarantorId = t.guarantorId
                WHERE   v.healthSystemId = @healthSystemId -- '001A00000053dK4' -- LimaMemorial
                        AND seg.visitId IS NULL
                        AND seg.healthSystemId IS NULL

        DROP TABLE #LimaMemorialFinalControlGroups

	--If a workaround is needed (need fast segmentation) may need to replace all "dbo.Segmentation" above with "work_space.dbo.LimaMemorialSegmentation" and uncomment the below insert statement. However once the STP is in production it can be ran by hand (Ask Nat the needed steps to do so)
    --    INSERT  dbo.Segmentation
    --            ( segmentationId
    --            ,healthSystemId
    --            ,visitId
    --            ,guarantorCode
    --            ,segmentCode
    --            ,groupType
    --            ,modId
    --            ,creditReportId
    --            ,lastModUser
    --            ,lastModDate
    --            ,creditScore
    --            ,guarantorSegmentCode
    --            ,segmentDate
    --            ,guarantorId
    --            )
				----Declare @healthSystemId VARCHAR(64) = '001A00000053dK4'
    --            SELECT  NEWID()
    --                   ,s.healthSystemId
    --                   ,s.visitId
    --                   ,s.guarantorCode
    --                   ,s.segmentCode
    --                   ,s.groupType
    --                   ,@modId AS modId
    --                   ,s.creditReportId
    --                   ,@lastModUser AS lastModUser
    --                   ,s.lastModDate
    --                   ,s.creditScore
    --                   ,s.guarantorSegmentCode
    --                   ,s.segmentDate
    --                   ,s.guarantorId
    --            FROM    work_space.dbo.LimaMemorialSegmentation s
    --                    LEFT JOIN dbo.Segmentation seg WITH ( NOLOCK )
    --                                                        ON s.healthSystemId = seg.healthSystemId
    --                                                           AND s.visitId = seg.visitId
    --            WHERE   seg.visitId IS NULL
    --                    AND seg.healthSystemId IS NULL

        --DROP TABLE #LimaMemorialPreviousOpenAccount
        --DROP TABLE #LimaMemorialSegmentationGuarantor
    END





GO
#+END_SRC

Carle
#+BEGIN_SRC sql
USE [searchAmericaDW]
GO

/****** Object:  StoredProcedure [dbo].[stp_Segmentation_Carle]    Script Date: 11/23/2015 12:03:51 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[stp_Segmentation_Carle]
   @healthSystemId VARCHAR(64)
   ,@modId VARCHAR(40)
   ,@lastModUser VARCHAR(16)
AS /*
***************************************************************************************************
Name:	dbo.stp_Segmentation_Carle
Author:	Zack Dixon
Date:	2014-09-23
---------------------------------------------------------------------------------------------------
Synopsis: Populates the Segmentation Table for Carle

---------------------------------------------------------------------------------------------------
Example:
exec dbo.stp_Segmentation_Carle '001A00000173Xdw','XXXX','natl'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
09/23/2014	Zack Dixon			DA-943		Stored Proc Creation
12/1/2014	Zack Dixon			--			Remove work_space bypass
05/05/2015	Nat Lutz			DA-1487		Update guarantor segment bug
08/19/2015	Zack Dixon			DA-1558		Update to pull score from only last 100 days
***************************************************************************************************
*/

    BEGIN
		-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
		-- SET TO READ UNCOMITTED to prevent blocking issue. No need to do "WITH (NOLOCK)" at the table level
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

		DECLARE @today DATE = GETDATE()

		--DECLARE @healthSystemId VARCHAR(64) = '001A00000173Xdw' DECLARE @modId VARCHAR(40) = 'xxxx' DECLARE @lastModUser VARCHAR(16) = 'zdixon' DROP TABLE #CarleHBPB1
        SELECT  cs.caStatus
               ,CASE when DATEDIFF(day,g.creditScoreDate, @today) < 100 then g.creditScore
				ELSE NULL
				end AS creditScore
               ,CASE when DATEDIFF(day,g.priorityScoreDate, @today) < 100 then g.priorityScore
				ELSE NULL
				end AS priorityScore
               ,g.guarantorId
               ,v.visitId AS vvisitId
               ,cs.cpaStatusId
               ,cs.ssStatus
               ,poc.currentFinancialClass AS visitFinancialClass
               ,poc.totalCharges - insuranceAdjustments - poc.insurancePayments - insuranceOutstandingBalance AS visitIPR
               ,poc.totalCharges AS visitCharges
               ,poc.insuranceAdjustments AS visitIA
               ,poc.insurancePayments AS visitIP
               ,poc.insuranceOutstandingBalance AS visitOIB
               ,poc.outstandingPatientBalance AS visitOPB
               ,poc.patientPayments AS visitPP
               ,poc.patientAdjustments AS visitPA
               ,poc.guarantorCode AS visitguarantorCode
               ,poc.admitDate AS visitadmitDate
               ,poc.ID AS visitpoID
               ,poc.companyid AS visitcompanyid
               ,v.dateBegin AS visitdateBegin
        INTO    #CarleHBPB1
        FROM    searchAmericaDW.dbo.CpaStatus cs WITH ( NOLOCK )
                JOIN dbo.Visit v WITH ( NOLOCK )
                                      ON cs.visitId = v.visitId
                JOIN dbo.Guarantor g WITH ( NOLOCK )
                                          ON g.guarantorId = v.guarantorId
                JOIN dbo.HospitalAccount hac WITH ( NOLOCK )
                                                  ON v.companyId = hac.companyId
                                                     AND v.patientAccountNumber = hac.accountNumber
                                                     AND v.healthSystemId = hac.healthSystemId
                JOIN dbo.patientOutcomes poc WITH ( NOLOCK )
                                                  ON hac.curPatientOutcomeId = poc.ID
                                                     AND hac.healthSystemId = poc.healthSystemId
        WHERE   cs.healthSystemId = @healthSystemId -- '001A00000173Xdw' -- Carle
                AND hac.healthSystemId = @healthSystemId -- '001A00000173Xdw' -- Carle
                AND poc.healthSystemId = @healthSystemId -- '001A00000173Xdw' -- Carle
                AND cs.ssStatus = 'SsSentVe'
                AND poc.fileType = 'EPIC'
				AND poc.accountStatus <> 'BD'

        SELECT  po.*
               ,ha.firstSnapshotDate
               ,t.*
        INTO    #CarleHBPB
        FROM    dbo.HospitalAccount ha WITH ( NOLOCK )
                JOIN dbo.patientOutcomes po WITH ( NOLOCK )
                                                 ON ha.curPatientOutcomeId = po.ID
                                                    AND ha.healthSystemId = po.healthSystemId
                JOIN #CarleHBPB1 t
                    ON t.visitguarantorCode = po.guarantorCode
        WHERE   ha.healthSystemId = @healthSystemId -- '001A00000173Xdw' -- Carle
                AND po.fileType = 'EPIC'
                AND po.accountStatus IN ( 'O', 'BD' )
                AND ( po.outstandingPatientBalance > 0 )

       SELECT  t.visitguarantorCode as guarantorCode
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               --,MIN(CASE WHEN visitFinancialClass IN ( '5', '15', 'TSP' ) THEN -1
               --          ELSE visitFinancialClass
               --     END)
               ,'-1' AS visitFinancialClass
               ,SUM(CASE WHEN accountStatus = 'O' THEN outstandingPatientBalance
                         ELSE 0
                    END) AS 'Open Balance'
               ,SUM(CASE WHEN accountStatus = 'BD' THEN outstandingPatientBalance
                         ELSE 0
                    END) AS 'BD Balance'
               ,SUM(CASE WHEN accountStatus = 'O' THEN 1
                         ELSE 0
                    END) AS 'Open Accounts'
               ,SUM(CASE WHEN accountStatus = 'BD' THEN 1
                         ELSE 0
                    END) AS 'BD Accounts'
               ,COUNT(*) AS Records
               ,MAX(CASE WHEN t.creditScore IS NOT NULL THEN t.creditScore
                         WHEN t.priorityScore IS NOT NULL THEN t.priorityScore
                         ELSE -1
                    END) AS Score
               ,CASE WHEN MAX(CASE WHEN dateBegin < '01/01/2079' THEN dateBegin
                                   ELSE NULL
                              END) IS NULL THEN MAX(admitDate)
                     ELSE MAX(CASE WHEN dateBegin < '01/01/2079' THEN dateBegin
                                   ELSE NULL
                              END)
                END AS maxdate
        INTO    #CarleGuarantors
        FROM    #CarleHBPB1 t LEFT JOIN #CarleHBPB s ON s.vvisitId = t.vvisitId
        GROUP BY t.visitguarantorCode
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin

        SELECT  t.guarantorCode
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               ,Score
               ,[BD Balance]
               ,[Open Balance]
               ,[BD Balance] + [Open Balance] AS [Total Balance]
               ,[Open Accounts]
               ,[BD Accounts]
               ,maxdate
               --,MIN(CASE WHEN r.currentFinancialClass IS NULL THEN t.visitFinancialClass
               --          ELSE IIF( r.currentFinancialClass IN ('5','15','TSP'),-1,r.currentFinancialClass)
               --     END)
               ,'-1' AS FinancialClass
               ,COUNT(*) AS Records
               ,SUM(s.visitIPR) AS visitIPR
               ,SUM(s.visitOPB) AS visitOPB
               ,SUM(s.visitPP) AS visitPP
               ,SUM(s.visitPA) AS visitPA
        INTO    #CarleSegmentationAnalysis
        FROM    #CarleGuarantors t
                LEFT JOIN #CarleHBPB s
                    ON t.guarantorCode = s.guarantorCode
                       AND t.visitpoID = s.visitpoID
                LEFT JOIN #CarleHBPB r
                    ON t.guarantorCode = r.guarantorCode
                       AND t.visitpoID = r.visitpoID
                       AND t.maxdate = r.dateBegin
        GROUP BY t.guarantorCode
               ,t.visitpoID
               ,t.vvisitId
               ,t.visitcompanyid
               ,t.visitdateBegin
               ,Score
               ,[BD Balance]
               ,[Open Balance]
               ,[Open Accounts]
               ,[BD Accounts]
               ,maxdate

        DROP TABLE #CarleHBPB
        DROP TABLE #CarleGuarantors

        SELECT  t.guarantorCode
               ,MIN(CASE WHEN [Score] >= 700
                              AND [Total Balance] < 200 THEN 'Segment 1'
                         WHEN Score >= 700
                              AND [Total Balance] < 300
                              AND [BD Balance] = 0 THEN 'Segment 1'
                         WHEN [Score] >= 750
                              AND [Total Balance] < 2500
                              AND [BD Balance] < 200 THEN 'Segment 2'
                         WHEN [Score] >= 800
                              AND [BD Balance] < 2500
                              AND [Total Balance] >= 200 THEN 'Segment 2'
                         WHEN Score >= 750
                              AND [BD Balance] = 0
                              AND [Total Balance] < 10000 THEN 'Segment 2'
                         WHEN Score >= 800
                              AND [BD Balance] = 0
                              AND [Total Balance] >= 200 THEN 'Segment 2'
                         WHEN (Score >= 650 OR score = -1)
                              AND [BD Balance] < 200 THEN 'Segment 3'
                         WHEN Score >= 700
                              AND [BD Balance] < 2500 THEN 'Segment 3'
                         WHEN Score = -1
                              AND [BD Balance] = 0 THEN 'Segment 3'
						 WHEN Score >= 750 THEN 'Segment 3'
                         WHEN ( Score >= 600
                                OR Score = -1
                              ) THEN 'Segment 4'
                         WHEN ( Score >= 500
                                OR Score = -1
                              )
                              AND [Total Balance] < 10000
                              AND [BD Balance] < 200 THEN 'Segment 4'
						 WHEN Score >=400
							  AND [BD Balance] = 0 THEN 'Segment 4'
						 WHEN Score >= 450
							  AND [Total Balance] < 2750
							  AND [BD Balance] < 250 THEN 'Segment 4'
                         ELSE 'Segment 5'
                    END) AS segmentCode
               ,CASE WHEN MAX(Score) = -1 THEN NULL
                     ELSE MAX(Score)
                END AS score
               ,RAND(BINARY_CHECKSUM(NEWID())) AS Random
			   ,MAX(visitdateBegin) AS dateBegin
        INTO    #CarleSegmentCodeCreation
        FROM    #CarleSegmentationAnalysis t
        GROUP BY t.guarantorCode

        DROP TABLE #CarleSegmentationAnalysis

        SELECT  s.guarantorCode
               ,SUM(CASE WHEN s.segmentCode <> s.groupType THEN 1
                         ELSE 0
                    END) AS InControlGroup
        INTO    #PreviousGuarantorControlGroups
        FROM    dbo.Segmentation s WITH ( NOLOCK )
        WHERE   s.healthSystemId = '001A00000173Xdw' -- '001A00000173Xdw' -- Carle
        GROUP BY s.guarantorCode

        SELECT  t.guarantorCode
               ,t.segmentCode AS groupType
               ,t.score
               ,t.Random
               ,CASE WHEN s.InControlGroup > 0 THEN 'Segment 2'
                     WHEN s.guarantorCode IS NOT NULL OR dateBegin < '01/01/2014' THEN t.segmentCode
                     WHEN RIGHT(LEFT(t.Random, 4), 2) >= '03' THEN t.segmentCode
                     ELSE 'Segment 2'
                END AS segmentCode
        INTO    #CarleFinalControlGroups
        FROM    #CarleSegmentCodeCreation t
                LEFT JOIN #PreviousGuarantorControlGroups s
                    ON t.guarantorCode = s.guarantorCode

        DROP TABLE #CarleSegmentCodeCreation
        DROP TABLE #PreviousGuarantorControlGroups

		SELECT  t.guarantorCode
               ,MAX(IIF(v.visitId IS NULL,NULL,s.lastModDate)) AS lastModDate
               ,t.segmentCode
               ,t.groupType
               ,t.score
        INTO    #PreviousOpenAccount
        FROM    #CarleFinalControlGroups t
                LEFT JOIN dbo.Segmentation s
                    ON s.guarantorCode = t.guarantorCode
                       AND s.healthSystemId = '001A00000173Xdw' -- Carle
                LEFT JOIN dbo.Visit v WITH ( NOLOCK )
                                           ON s.visitId = v.visitId
                                              AND v.accountStatus = 'O'
                                              AND v.outstandingPatientBalance > 0
        GROUP BY t.guarantorCode
               ,t.segmentCode
               ,t.groupType
               ,t.score
--14687

        SELECT  MIN(s.guarantorSegmentCode) AS guarantorSegmentCode
               ,t.guarantorCode
               ,t.segmentCode
               ,t.groupType
               ,t.score
        INTO    #SegmentationGuarantor
        FROM    #PreviousOpenAccount t
                LEFT JOIN dbo.Segmentation s
                    ON s.guarantorCode = t.guarantorCode
                       AND t.lastModDate = s.lastModDate
                       AND s.healthSystemId = '001A00000173Xdw' -- Carle
        GROUP BY t.guarantorCode
               ,t.segmentCode
               ,t.groupType
               ,t.score

		--DECLARE @healthSystemId VARCHAR(64) = '001A00000173Xdw' DECLARE @modId VARCHAR(40) = 'xxxx' DECLARE @lastModUser VARCHAR(16) = 'zdixon'

        INSERT  dbo.Segmentation
                ( segmentationId ,
                  healthSystemId ,
                  visitId ,
                  guarantorCode ,
                  segmentCode ,
                  groupType ,
                  modId ,
                  creditReportId ,
                  lastModUser ,
                  lastModDate ,
                  creditScore ,
                  guarantorSegmentCode ,
                  segmentDate ,
                  guarantorId
                )
                SELECT  NEWID()
                       ,v.healthSystemId
                       ,v.visitId
                       ,s.visitguarantorCode
                       ,ISNULL(t.segmentCode, 'Segment 3') AS segmentCode
                       ,ISNULL(t.groupType, 'Segment 3') AS groupType
                       ,@modId AS modId
                       ,'' AS creditReportId
                       ,@lastModUser AS lastModUser
                       ,GETDATE() AS lastModDate
                       ,score AS creditScore
                       ,IIF(t.guarantorSegmentCode IS NULL, t.segmentCode, t.guarantorSegmentCode) AS guarantorSegmentCode
                       ,GETDATE() AS segmentDate
                       ,v.guarantorId AS guarantorId
                FROM    #CarleHBPB1 s
                        JOIN dbo.Visit v
                            ON v.visitId = s.vvisitId
                        LEFT JOIN dbo.Segmentation seg
                            ON v.healthSystemId = seg.healthSystemId
                               AND v.visitId = seg.visitId
                        LEFT JOIN #SegmentationGuarantor t
                            ON s.visitguarantorCode = t.guarantorCode
                WHERE   v.healthSystemId = @healthSystemId -- '001A00000173Xdw' -- Carle
                        AND seg.visitId IS NULL
                        AND seg.healthSystemId IS NULL

        DROP TABLE #CarleFinalControlGroups
		DROP TABLE #PreviousOpenAccount
		DROP TABLE #SegmentationGuarantor
    END





GO
#+END_SRC

** CpaController
** Scoring
CpaStatus gets populated AddCoAccounts using the pfr..Visit table
CpaVisitQ gets populated using the VisitChangeLog which in turn is populated by insert trigger on the pfr..Visit table
CpaVisitQ is used to then mark cpastatus for scoring


p_CpaStatus_setCaToBeEa marks cpa status records to be scored using the cpaVisitQ table

COSuite/CollectionAdvantage  scores them
FPCollectionsOptimizationStore

*** p_CpaStatus_setCaToBeEa
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[p_CpaStatus_setCaToBeEa]
   @healthSystemId VARCHAR(64) = NULL,
   @modId VARCHAR(40) = NULL,
   @lastModUser VARCHAR(16) = NULL
AS

   /*
   *   Generated by SQL Server Migration Assistant for Sybase version 6.0.0.
   *   *****************************************************************
   *   **
   *   **     PROCEDURE p_CpaStatus_setCaToBeEa
   *   **         created 09/21/2011    slw
   *   **         Transition CpaStatus records - set caStatus = 'CaToBeEa'
   *   **         Collection Advantage status is then CaToBeEarlyScored
   *   **         revised 11/20/2013    slw
   *   **         Include FASP2P statuses.  The caStatus is really a scoring status now.
   *   **         revised  4/24/2014    slw
   *   **         SA-8824 Make minBalance for scoring and triggers configurable
   *   **         revised  6/27/2014    slw
   *   **         SA-8926 Update db and the scoring stored procedures to allow agency accounts to be scored
   *   **         revised  7/10/2015    slw
   *   **         SA-8928 Update db and the scoring stored procedures to allow agency accounts to be scored
   *   **                 (scoreCOAccounts flag moved to HealthSystemAgency table)
   *   **
   *   **  USAGE: p_CpaStatus_setCaToBeEa '<healthSystemId>', '<modId>', '<lastModUser>'
   *   **
   *   **  where
   *   **  @healthSystemId = the healthSystemId of the healthSystem the changes are associated with
   *   **  @modId = the modId from the Mod table associated with this change
   *   **  @lastmoduser = the lastModUser defined by CPA Controller - defaults to database suser_name() if not supplied
   *   **
   *   **  Examples:
   *   **  exec p_CpaStatus_setCaToBeEa 'STARDATA', '8a8a90ad328bdb7601328bdb84000002', 'CPAController'
   *   **  exec p_CpaStatus_setCaToBeEa 'STARDATA', '8a8a90ad328bdb7601328bdb84000002', ' '
   *   **
   *   **
   *   **  Error Conditions Returned
   *   **
   *   **  Error Example 1 - missing healthSystemId
   *   **
   *   **  exec p_CpaStatus_setCaToBeEa '', '8a8a90ad328bdb7601328bdb84000002', 'CPAController'
   *   **  ERROR: procedure p_CpaStatus_setCaToBeEa expects @healthSystemId
   *   **  USAGE: p_CpaStatus_setCaToBeEa '<modId>', '<lastModUser>', '<healthSystemId>'
   *   **
   *   **  Error Example 2 - bad or missing modId
   *   **
   *   **  exec p_CpaStatus_setCaToBeEa 'STARDATA', '', 'CPAController'
   *   **  ERROR: procedure p_CpaStatus_setCaToBeEa expects @modId
   *   **  USAGE: p_CpaStatus_setCaToBeEa '<modId>', '<lastModUser>', '<healthSystemId>'
   *   **
   *   *****************************************************************
   */
   IF @healthSystemId IS NULL OR @healthSystemId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_setCaToBeEa expects @healthSystemId'

         SELECT ' USAGE  p_CpaStatus_setCaToBeEa <healthSystemId> <modId> <lastModUser>'

         RETURN

      END
   /* IF THE Health System is not caActive, do nothing and return*/
   IF
      (
         SELECT dbo.CpaHealthSystemSetting.caActive
         FROM dbo.CpaHealthSystemSetting
         WHERE dbo.CpaHealthSystemSetting.healthSystemId = @healthSystemId
      ) = 0
      BEGIN
         RETURN
      END
   IF
      (
         SELECT count(*)
         FROM dbo.CpaVisitQ
         WHERE dbo.CpaVisitQ.healthSystemId = @healthSystemId
      ) = 0
      BEGIN
         RETURN
      END
   IF @modId IS NULL OR @modId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_setCaToBeEa expects @modId'

         SELECT ' USAGE  p_CpaStatus_setCaToBeEa <healthSystemId> <modId> <lastModUser>'

         RETURN

      END
   /*      IF THE LASTMODUSER WASN'T PROVIDED, DEFAULT IT TO SUSER_NAME()*/
   IF @lastModUser IS NULL OR @lastModUser = ' '
      BEGIN
         SELECT @lastModUser = suser_name()
      END
   SELECT   cs.cpaStatusId ,
            cs.lastModDate ,
            ch.scoreType
   INTO     #setCaToBeEa
   FROM     dbo.CpaStatus AS cs WITH ( NOLOCK )
            JOIN dbo.CpaVisitQ AS c WITH ( NOLOCK ) ON c.visitId = cs.visitId
                                                       AND c.healthSystemId = cs.healthSystemId
            JOIN pfr.dbo.Visit AS v WITH ( NOLOCK ) ON v.visitId = c.visitId
            JOIN pfr.dbo.Guarantor AS g WITH ( NOLOCK ) ON g.guarantorId = v.guarantorId
            JOIN dbo.CpaHealthSystemSetting AS ch WITH ( NOLOCK ) ON ch.healthSystemId = cs.healthSystemId
            JOIN congo.dbo.company AS cmp WITH ( NOLOCK ) ON cmp.companyid = v.companyId
            LEFT JOIN SQLDW.searchAmericaDW.dbo.HealthSystemAgency AS dw WITH ( NOLOCK ) ON cmp.companyid = dw.agencyCompanyId
   WHERE    cs.visitId = c.visitId
            AND
      /*OPS-15158*/ cs.healthSystemId = c.healthSystemId
            AND c.visitId = v.visitId
            AND c.healthSystemId = @healthSystemId
            AND cmp.companyid = v.companyId
            AND v.guarantorId = g.guarantorId
            AND ch.healthSystemId = @healthSystemId
            AND (/* OPS-13616*/ g.creditScore IS NULL
                  OR ( ( g.creditScore IS NOT NULL
                         OR g.priorityScore IS NOT NULL
                       )
                       AND ( g.creditScoreDate < DATEADD(DAY, -90, GETDATE())
                             OR g.priorityScoreDate < DATEADD(DAY, -90,
                                                              GETDATE())
                           )
                     )
                )
            AND v.outstandingPatientBalance > ch.minBalance
            AND cs.caStatus IS NULL
            AND v.dateBegin <= DATEADD(DAY, -ch.caMinAgeDays, GETDATE())
            AND v.dateBegin > DATEADD(DAY, -ch.caMaxAgeDays, GETDATE())
            AND ( ( cmp.companyType = 'H'
                    AND v.accountStatus = 'O'
                  )
                  OR ( cmp.companyType = 'A'
                       AND dw.scoreCOAccounts = 1
					   AND dw.coActive = 1
                       AND v.accountStatus = 'BD'
                     )
                )
   GROUP BY cs.cpaStatusId ,
            cs.lastModDate ,
            ch.scoreType

   UPDATE cs
      SET
         caStatus =
            CASE
               WHEN k.scoreType = 'CA' THEN 'CaToBeEa'
               WHEN k.scoreType = 'FASP2P' THEN 'FpToBeEa'
            END,
         caStatusLastModDate = GETDATE(),
         modId = @modId,
         lastModUser = @lastModUser,
         lastModDate = GETDATE()
   FROM #setCaToBeEa  AS k, dbo.CpaStatus  AS cs
   WHERE
      k.cpaStatusId = cs.cpaStatusId AND
      k.lastModDate = cs.lastModDate AND
      k.scoreType IN ( 'CA', 'FASP2P' )
#+END_SRC


*** CpaStatus
**** Status Types
#+BEGIN_SRC java
//ledger gal (agency managment):
    AmActive("AmActive"), //if there is money associated with it and its scored by CA
    AmToBeInserted("AmToBeIn"),
    AmToBeUpdated("AmToBeUp"),
    AmToBeClosed("AmToBeCl"),
    AmWasClosed("AmWasClo"), //if there is no money
    //collection advantage:
    CaIdle("CaIdle"),
    CaToBeLateScored("CaToBeLa"),
    CaToBeLateScoredMarked("CaToBeLM"),
    CaToBeEarlyScored("CaToBeEa"),//if there is money associated with it and its not CaWasSco
    CaToBeEarlyScoredMarked("CaToBeEM"),
    CaSentToVendor("CaSentVe"),
    CaWasScored("CaWasSco"),
    CaReusedScore("CaReused"),
    CaMiss("CaMiss"),
    CaError("CaError"),
    //FAS:
    FpIdle("FpIdle"),
    FpToBeEarlyScored("FpToBeEa"),
    FpToBeEarlyScoredMarked("FpToBeEM"),
    FpSentToVendor("FpSentVe"),
    FpWasScored("FpWasSco"),
    FpReusedScore("FpReused"),
    FpMiss("FpMiss"),
    FpError("FpError"),
    //Non-credit based scoring:
    NcIdle("NcIdle"),
    NcToBeEarlyScored("NcToBeEa"),
    NcToBeEarlyScoredMarked("NcToBeEM"),
    NcSentToVendor("NcSentVe"),
    NcWasScored("NcWasSco"),
    NcReusedScore("NcReused"),
    NcMiss("NcMiss"),
    NcError("NcError"),

    //Cpa controller:
    CcActive("CcActive"),
    CcInactive("CcInacti"),
    //triggers
    CtToBeAdded("CtToBeAd"), //if there is money associated with it and its over 45 days old
    CtToBeAddedMarked("CtToBeAM"),
    CtToBeDeleted("CtToBeDe"), //if there is no money
    CtToBeDeletedMarked("CtToBeDM"),
    CtActive("CtActive"),
    CtSentToVendorAdd("CtSntVnA"),
    CtSentToVendorDelete("CtSntVnD"),
    CtActivityNotice("CtActNot"),
    CtError("CtError"),
    CtDeleted("CtDelete"),
    // Medicaid Eligibility Screening statuses
    MeToBeSc("MeToBeSc"),
    MeToBeSM("MeToBeSM"),
    MeSentToVendor("MeSentVe"),
    MeError("MeError"),
    MeEligib("MeEligib"),
    MeInelig("MeInelig"),
    MeReject("MeReject"),
    // is this used??
    PfrIdle("PfrIdle"),
    PfrWasUpdated("PfrWasUp"),
    // Segmentation statuses:
    SsToBeSegmented("SsToBeSe"),
    SsSentToVendor("SsSentVe"),
    SsWasSegmented("SsWasSeg"),
    SsError("SsError"),
    // Use these for testing purposes only!
    AmTestInactive("AmTestIn"),
    AmTestActive("AmTestAc"),
    AmTestNext("AmTestNe"),
    AmTestComplete("AmTestCo")
#+END_SRC

**** Table
cpaStatusId                               0000007f1ba1496db91fe01e6cba5f9b
companyId                                 hcrrmdcl1
accountNumber                             130885104
healthSystemId                            0014000000eh4J3
visitId                                   51DDBAF2-1A9F-40D5-9B27-EC1E557AA19A
pin                                       NULL
cpaStatus                                 NULL
cpaStatusLastModDate                      NULL
ccStatus                                  CcActive
ccStatusLastModDate                       2015-03-24 22:28:00
caStatus                                  CaIdle
caStatusLastModDate                       2015-03-27 12:08:00
caLastScoredDate                          2015-03-27 03:53:00
ctStatus                                  NULL
ctStatusLastModDate                       NULL
ctOpenDate                                NULL
ctLastTriggeredDate                       NULL
ctCloseDate                               NULL
pfrStatus                                 NULL
pfrStatusLastModDate                      NULL
amStatus                                  NULL
amStatusLastModDate                       NULL
amOpenDate                                NULL
amCloseDate                               NULL
modId                                     402881c54c630cd8014c635c512f0025
lastModDate                               2015-03-28 21:32:00
lastModUser                               ssProcess
caMissRetry                               NULL
meStatus                                  NULL
meStatusLastModDate                       NULL
meLastScreenedDate                        NULL
caGPersonVisitLogId                       E905A658-8E78-4AE2-A5AE-CF11B3C8BF53
ctGPersonVisitLogId                       NULL
mePPersonVisitLogId                       NULL
meGPersonVisitLogId                       NULL
ssStatus                                  SsWasSeg
ssStatusLastModDate                       2015-03-28 21:32:00
caBadDebtScored                           NULL
ctPortfolio                               NULL
ctPortfolioExpDate                        NULL
caStatusModId                             402881934c2b75d6014c54a2f5374047


*** COSuite
**** Marking records for scoring
Proc called with oldStatus=FpToBeEa , newStatus=FpToBeEM
#+BEGIN_SRC sql
CREATE PROCEDURE dbo.p_CpaStatus_updateCaStatus
   @oldCaStatus varchar(8) = NULL,
   @newCaStatus varchar(8) = NULL,
   @modId varchar(40) = NULL,
   @lastModUser varchar(16) = NULL,
   @recordCount int = 100000
AS

   /*
   *   Generated by SQL Server Migration Assistant for Sybase version 6.0.0.
   *   *****************************************************************
   *   **
   *   **     PROCEDURE p_CpaStatus_updateCaStatus
   *   **         created 03/8/2012    slw
   *   **         Transition CpaStatus records - set caStatus = @newCaStatus
   *   **         where caStatus= @oldCaStatus
   *   **         revised 12/3/2013    slw
   *   **         Added setting of the caStatusModId
   *   **         revised 1/31/2014    slw
   *   **         Included records with caStatusModId='retry'
   *   **         revised 4/28/2014    slw
   *   **         Included records with caStatus='FpToBeEM'
   *   **  USAGE: p_CpaStatus_updateCaStatus '<oldCaStatus>', '<newCaStatus>', '<modId>', '<lastModUser>'
   *   **
   *   **  where
   *   **  @oldCaStatus = theold status to be changed (for the where clause)
   *   **  @newCaStatus = the new status to change the oldStatus (for the set clause)
   *   **  @modId = the modId from the Mod table associated with this change
   *   **  @lastmoduser = the lastModUser - defaults to databasesuser_name() if not supplied
   *   **  @recordCount = the recordCount - defaults to 100000
   *   **
   *   **
   *   *****************************************************************
   */
   IF @oldCaStatus = NULL OR @oldCaStatus = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateCaStatus expects @oldCaStatus'

         SELECT ' USAGE  p_CpaStatus_updateCaStatus <oldCaStatus> <newCaStatus> <modId> <lastModUser>'

         RETURN 0

      END
   IF @newCaStatus = NULL OR @newCaStatus = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateCaStatus expects @newCaStatus'

         SELECT ' USAGE  p_CpaStatus_updateCaStatus <oldCaStatus> <newCaStatus> <modId> <lastModUser>'

         RETURN 0

      END
   IF @modId = NULL OR @modId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_updateCaStatus expects @modId'

         SELECT ' USAGE  p_CpaStatus_updateCaStatus <oldCaStatus> <newCaStatus> <modId> <lastModUser>'

         RETURN 0

      END
   /*      IF THE LASTMODUSER WASN'T PROVIDED, DEFAULT IT TO SUSER_NAME()*/
   IF @lastModUser = NULL OR @lastModUser = ' '
      BEGIN
         SELECT @lastModUser = suser_name()
      END
   IF @recordCount > 100000/*OPS-15259*/
      BEGIN
         SELECT @recordCount = 100000
      END
   SET ROWCOUNT @recordCount
   SELECT cs.cpaStatusId, cs.lastModDate
      INTO #updtCaStatus
   FROM dbo.CpaStatus  AS cs, dbo.CpaHealthSystemSetting  AS chs
   WHERE
      (cs.caStatus = @oldCaStatus OR (
      @newCaStatus IN ( 'CaToBeEM', 'CaToBeLM', 'FpToBeEM' ) AND
      cs.caStatus = @newCaStatus AND
      cs.caStatusModId = 'retry')) AND
      cs.healthSystemId = chs.healthSystemId/* added for OPS-14109 - drm 20130108*/ AND
      chs.caSend = 1/*  added for OPS-14109 - drm 20130108*/
   /*
   *   SSMA warning messages:
   *   S2SS0030: The database object was not found while resolving k.cpaStatusId.
   *   S2SS0030: The database object was not found while resolving k.lastModDate.
   */

   UPDATE cs
      SET
         caStatus = @newCaStatus,
         caStatusLastModDate = getdate(),
         modId = @modId,
         caStatusModId = @modId,
         lastModUser = @lastModUser,
         lastModDate = getdate()
   FROM #updtCaStatus  AS k, dbo.CpaStatus  AS cs
   WHERE k.cpaStatusId = cs.cpaStatusId AND k.lastModDate = cs.lastModDate
   SET ROWCOUNT 0
#+END_SRC

Get marked records
#+BEGIN_SRC sql
CREATE PROCEDURE dbo.p_CpaStatus_getFpToBeEM
   @modId varchar(40) = NULL,
   @useModId int = 1,
   @recordCount int = 50000
AS

   /*
   *   Generated by SQL Server Migration Assistant for Sybase version 6.0.0.
   *   *****************************************************************
   *   **
   *   **     PROCEDURE p_CpaStatus_getFpToBeEM
   *   **         created 10/07/2014    slw
   *   **         Get CpaStatus records with caStatus = 'FpToBeEM'
   *   **
   *   **  USAGE: p_CpaStatus_getFpToBeEM <modId> <useModId> <recordCount>
   *   **
   *   **  where
   *   **  @modId = the modId from the Mod table associated with this change
   *   **  @useModId = whether to use modId as criteria or not
   *   **  @recordCount = number of records to select
   *   **
   *   **  Examples:
   *   **  exec p_CpaStatus_getFpToBeEM '8a8a90ad328bdb7601328bdb84000002', 1, 50000
   *   **  exec p_CpaStatus_getFpToBeEM '8a8a90ad328bdb7601328bdb84000002', 0, 50000
   *   **
   *   **
   *   **  Error Conditions Returned
   *   **
   *   **  Error Example 1 - bad or missing modId
   *   **
   *   **  exec p_CpaStatus_getFpToBeEM NULL, 1, 50000
   *   **  ERROR: procedure p_CpaStatus_getFpToBeEM expects @modId
   *   **  USAGE: p_CpaStatus_getFpToBeEM '<modId>', '<useModId>', '<recordCount>'
   *   **
   *   *****************************************************************
   *    IF caSend is off for global do nothing and return
   */
   IF
      (
         SELECT dbo.CpaHealthSystemSetting.caSend
         FROM dbo.CpaHealthSystemSetting
         WHERE dbo.CpaHealthSystemSetting.healthSystemId = '1CPAGlobalHealthSystem'
      ) = 0
      BEGIN
         RETURN
      END
   IF @useModId > 0 AND @modId IS NULL OR @modId = ' '
      BEGIN

         SELECT ' ERROR: procedure p_CpaStatus_getFpToBeEM expects @modId'

         SELECT ' USAGE  p_CpaStatus_getFpToBeEM <modId> <useModId> <recordCount>'

         RETURN

      END
   SET ROWCOUNT @recordCount
   SELECT cs.cpaStatusId
   FROM
      dbo.CpaStatus  AS cs
         WITH ( NOLOCK )
         JOIN pfr.dbo.Visit  AS v
         WITH ( NOLOCK )
         ON cs.visitId = v.visitId
         JOIN dbo.CpaHealthSystemSetting  AS chss
         WITH ( NOLOCK )
         ON cs.healthSystemId = chss.healthSystemId
   WHERE
      chss.caSend = 1 AND
      cs.caStatus = 'FpToBeEM' AND
      (@useModId = 0 OR (@useModId = 1 AND (cs.caStatusModId = @modId OR cs.caStatusModId = 'retry'))) AND
      v.outstandingPatientBalance > chss.minBalance AND
      v.dateBegin <= dateadd(day, -chss.caMinAgeDays, getdate()) AND
      v.dateBegin > dateadd(day, -chss.caMaxAgeDays, getdate())
   ORDER BY cs.caStatusLastModDate ASC
#+END_SRC

**** Co Suite Batch
Uses FPCollectionsOptimizationStore

Uses ExpCreditReport service to retrieve scores

**** Credit Scoring
          <Field name="fname" />
            <Field name="lname" />
            <Field name="addr" />
            <Field name="city" />
            <Field name="state" />
            <Field name="zip" />
          <Field name="sappcode" />


*** Collection Advantage
CollectionAdvantageConverter
Place file - Send file to experian for Scoring (Uses process Output)
Retrieve file - Parses file from Experian into searches and saves them (Uses processInput)


** Collections Optimization Manager
CPO_EXTRACT -> LOAD_OLTP -> Add_CO_ACCTS -> LOAD_PH -> LOAD_OBD
CLUSTERING -> LOAD_COW -> LOAD_OLTP


*** PfrMigrationProgress


*** Add CO Accounts (ADD_CO_ACCTS)
If health system is not ODB only
then load Cpa status records from Visit table where outstandingPatientBalance > 0 and visitId is not in CpaStatus table
Loads visits that have lastModDate newer than visitStartDate in PfrRequest AND have dateBegin or dischargeDate in the past CpHsSetting.agencyCloseDays
#+BEGIN_SRC  sql
CREATE PROCEDURE dbo.p_CpaStatusInsert
   @healthSystemId varchar(64) = NULL,
   @visitAgeLowerBound smalldatetime = NULL,
   @visitModDateLowerBound smalldatetime = NULL,
   @modId varchar(64) = NULL
AS

   /*
   *   Generated by SQL Server Migration Assistant for Sybase version 6.0.0.
   *   *****************************************************************
   *   **
   *   **     PROCEDURE p_CpaStatusInsert
   *   **         created 12/05/2013    smp
   *   **         Insert new Visits into CpaStatus
   *   **
   *   **  USAGE: p_CpaStatusInsert  '<healthSystemId>', '<visitAgeLowerBound>', '<visitModDateLowerBound>', '<modId>'
   *   **
   *   **  where
   *   **  @healthSystemId = the healthSystemId of the healthSystem being processed
   *   **  @visitAgeLowerBound = The date that an account must be newer than in order to qualify for insert.
   *   **  @visitModDateLowerBound = The date param that limits which visits to grab based on when they were last edited
   *   **  @modId = A modId reference to the Mod table.  used to track which records were affected by this proc.
   *   **
   *   **  Examples:
   *   **  exec p_CpaStatusInsert  'STARDATA', '10/10/2013', '10/10/2013', 'cvasdfasdfqs12341234124'
   *   **
   *   *****************************************************************
   */
   DECLARE
      @currentDate datetime,
      @ErrorMessage varchar(255),
      @rowsaffected int
   SELECT
      replace(CONVERT(varchar(36), newid()), '-', '') AS cpaStatusId,
      v.patientAccountNumber,
      v.visitId,
      v.companyId,
      v.healthSystemId
      INTO #vIds
   FROM dbo.Visit  AS v
   WHERE
      v.healthSystemId = @healthSystemId AND
      v.outstandingPatientBalance > 0 AND
      isnull(v.dateBegin, v.dischargeDate) > @visitAgeLowerBound AND
      v.lastModDate >= @visitModDateLowerBound AND
      v.visitId NOT IN
      (
         SELECT cs.visitId
         FROM cpa.dbo.CpaStatus  AS cs
      )
   SELECT @rowsaffected = @@ROWCOUNT
   SET @currentDate = getdate()
   SET @ErrorMessage = 'Done selecting ' + CONVERT(varchar(10), @rowsaffected) + ' visits to temp table ' + @modId
   EXECUTE dbo.p_PfrLog_Insert
      'p_CpaStatusInsert',
      @healthSystemId,
      @ErrorMessage,
      @rowsaffected,
      0,
      0,
      @currentDate
   INSERT cpa.dbo.CpaStatus(
      cpaStatusId,
      accountNumber,
      visitId,
      companyId,
      healthSystemId,
      modId,
      lastModDate,
      lastModUser)
      /*
      *   SSMA warning messages:
      *   S2SS0030: The database object was not found while resolving t.cpaStatusId.
      *   S2SS0030: The database object was not found while resolving t.patientAccountNumber.
      *   S2SS0030: The database object was not found while resolving t.visitId.
      *   S2SS0030: The database object was not found while resolving t.companyId.
      *   S2SS0030: The database object was not found while resolving t.healthSystemId.
      */

      SELECT
         t.cpaStatusId,
         t.patientAccountNumber,
         t.visitId,
         t.companyId,
         t.healthSystemId,
         @modId,
         getdate() AS lastModDate,
         'bulk user' AS lastModUser
      FROM #vIds  AS t
   SELECT @rowsaffected = @@ROWCOUNT
   SET @currentDate = getdate()
   SET @ErrorMessage = 'Added ' + CONVERT(varchar(10), @rowsaffected) + ' accounts to CpaStatus ' + @modId
   EXECUTE dbo.p_PfrLog_Insert
      'p_CpaStatusInsert',
      @healthSystemId,
      @ErrorMessage,
      @rowsaffected,
      0,
      0,
      @currentDate
#+END_SRC

Sends out email with this could (select count(*) as 'ct' from cpa..CpaStatus where healthSystemId = ? and modId = ? and lastModDate >= ?) loaded
modId is returned by loadVisitsIntoCpa method


*** PaymentHistoryBuilder (LOAD_PH)
Loads data into PaymentHistory from currentPatientOutcomes
Runs stp_loadPaymentHistory
#+BEGIN_SRC sql
  CREATE PROCEDURE [dbo].[stp_loadPaymentHistory]
          @healthSystemId VARCHAR(64)
  WITH RECOMPILE
  AS /*
  ,***************************************************************************************************
  Name:   stp_loadPaymentHistory
  Author: Chris Busch
  Date:   Nov 2014
  ---------------------------------------------------------------------------------------------------
  Synopsis: Reloads the currentPatientOutcomes''s guarantorId table
  CVS: \opt\cvsbase\pid\DW\SourceCode\Cow\StoredProcedures

  Sample:
  exec [stp_loadPaymentHistory] 'NPASHS1'
  sp_helptext stp_loadPaymentHistory

  SELECT * FROM dbo.PaymentHistory where healthSystemId = 'STARDATAAG' ORDER by lastModDate desc
  SELECT top 1 v.visitId FROM searchAmericaDW..Visit v JOIN searchAmericaDW..Guarantor g ON g.guarantorId = v.guarantorId JOIN cow..PaymentHistory ph ON g.guarantorId = ph.guarantorId
  SELECT ph.* FROM searchAmericaDW..Visit v JOIN searchAmericaDW..Guarantor g ON g.guarantorId = v.guarantorId JOIN cow..PaymentHistory ph ON g.guarantorId = ph.guarantorId
  -- Monitor bulk process select * from cow.dbo.PfrRequest
  SELECT * FROM ETLAdmin.dbo.ErrorLog  --ErrorLogID,ErrorTime,ErrorDB,UserName,ErrorLevel,ErrorProcedure,ErrorMessage
  where (UserName = 'PfrAppUser' OR ErrorDB = 'cow') AND ErrorTime > DATEADD(dd, -5, GETDATE()) -- AND ErrorTime < DATEADD(dd, -35, GETDATE())
  and (ErrorMessage LIKE '%syntaxCheck%' )
  --AND (ErrorProcedure = 'stp_loadPaymentHistory')
  ORDER BY ErrorLogID DESC

  ---------------------------------------------------------------------------------------------------
  ,***************************************************************************************************
  Revision History:
  Date            Author                          Ref                     Description
  ---------------------------------------------------------------------------------------------------
  11/25/2014      Chris Busch             SA-8838                 Start populating prior PaymentHistory for a CO client
  02/05/2015  Sean Porter         SA-9286                 Updated with additional fields
  ,***************************************************************************************************
  ,*/
  BEGIN
          -- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
          SET NOCOUNT ON;
          -- SET TO READ UNCOMITTED to prevent blocking issue.
          SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

          DECLARE @name Varchar(50)
          DECLARE @total INT
          DECLARE @db VARCHAR(100)
          DECLARE @date DATETIME
          Declare @procName Varchar(100)
          DECLARE @ErrorMessage VARCHAR(100)
          SET @ErrorMessage = 'Start loadPaymentHistory HealthSystem: ' + @HealthSystemId
          set @procName = OBJECT_NAME(@@PROCID)
          SET @name = SUSER_NAME()
          SET @db = DB_NAME()
          SET @date = GETDATE()

          EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

          select
                  guarantorId,
                  po.healthSystemId,
                  min(ISNULL(dischargeDate,admitDate)) as firstTreatmentDate,
                  max(ISNULL(dischargeDate,admitDate)) as lastTreatmentDate,
                  COUNT(*) AS numTreatments,
                  isnull(sum(initialPatientResponsibility),0) as totalLifetimeAmountPlaced,
                  isnull(sum(patientPayments),0) as totalLifetimePatientPayments,
                  isnull(convert(int,avg(
                                                          case    when initialPatientResponsibility is null or initialPatientResponsibility=0 then null
                                                                          when patientPayments/initialPatientResponsibility < 0 then 0
                                                                          when patientPayments/initialPatientResponsibility > 1 then 1
                                                                          else patientPayments/initialPatientResponsibility end) * 100),0)
                                                          as avgPatientPaymentPercent,
                  isnull(sum(case when badDebtAmount > 0 then 1 else 0 end),0) as numChargeOff,
                  max(CASE WHEN isnull(accountStatus,'x') <> 'BD' THEN isnull(outstandingPatientBalance,initialPatientResponsibility) ELSE 0 END) AS maxNonBdBalance,
                  SUM(CASE WHEN accountStatus = 'O' THEN outstandingPatientBalance      ELSE 0               END) AS totalOpenBalance,
          SUM(CASE WHEN accountStatus = 'BD' THEN outstandingPatientBalance      ELSE 0            END) AS totalBdBalance,
                  case when count(*) != 0 then dateadd(day,-((isnull(avg(datediff(day,IIF(selfPayDate IS NULL OR selfPayDate>GETDATE(),NULL,selfPayDate),getdate())),0)) ),getdate())
                             else null end as avgAccountBeginDate,
                  avg(IIF(initialPatientResponsibility>0,initialPatientResponsibility,null)) as avgInitialPatientResponsibility ,
                  avg(IIF(outstandingPatientBalance>0,outstandingPatientBalance,null)) as avgOutstandingPatientBalance ,
                  COUNT(distinct IIF(pt.SAPatientTypeCode IN ('ER','E')  AND po.admitDate>DATEADD(YEAR,-1,GETDATE()),po.admitDate,null)) AS priorEVisits1Year,
                  SUM(IIF((fc.SAFinancialClassCode IS NULL OR fc.SAFinancialClassCode in ('SP','TSP')) AND po.admitDate>DATEADD(YEAR,-3,GETDATE()),1,0)) AS selfpays,
                  GETDATE() AS lastModDate,
                  SYSTEM_USER AS lastModUser
          into #paytemp
                          from searchAmericaDW.dbo.CurrentPatientOutcome po
                          LEFT outer JOIN searchAmericaDW..healthSystemPatientTypes pt WITH(NOLOCK) ON pt.healthSystemId = po.healthSystemId and pt.healthSystemPatientTypeCode=po.patientType
                          LEFT outer JOIN searchAmericaDW..healthSystemFinancialClasses fc WITH(NOLOCK) ON fc.healthSystemId = po.healthSystemId and fc.healthSystemFinancialClassCode=po.insurance1FinancialClass
                          where  guarantorId IS NOT NULL and COALESCE(selfPayDate,dischargeDate,admitDate) >= dateadd(year,-5, GETDATE())
                          and po.healthSystemId = @healthSystemId and po.initialPatientResponsibility >=0 AND po.patientPayments>=0  group by po.guarantorId, po.healthSystemId;

          SET @total = @@ROWCOUNT
          SET @date = GETDATE()
          SET @ErrorMessage = '#paytemp loaded: ' + CAST(@total AS VARCHAR(50)) + ' Records For HealthSystem ' + @HealthSystemId
          EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@proxcName, NULL, @ErrorMessage

          MERGE PaymentHistory AS T
                  USING #paytemp AS S
                  ON (T.guarantorId = S.guarantorId AND T.healthSystemId=S.healthSystemId)
                  WHEN NOT MATCHED BY TARGET
                          THEN INSERT( guarantorId ,          healthSystemId ,              firstTreatmentDate ,            lastTreatmentDate ,             numTreatments , totalLifetimeAmountPlaced ,
                    totalLifetimePatientPayments ,                  avgPatientPaymentPercent ,              numChargeOff ,                  avgAccountBeginDate ,           lastModDate ,
                    lastModUser, priorEVisits1Year, maxNonBdBalance, totalBdBalance, totalOpenBalance, selfpays, avgInitialPatientResponsibility, avgOutstandingPatientBalance)
                            VALUES( S.guarantorId ,          S.healthSystemId ,             S.firstTreatmentDate ,                  S.lastTreatmentDate ,           S.numTreatments , S.totalLifetimeAmountPlaced ,
                    S.totalLifetimePatientPayments ,                S.avgPatientPaymentPercent ,            S.numChargeOff ,                S.avgAccountBeginDate ,                 S.lastModDate ,
                    S.lastModUser, S.priorEVisits1Year, S.maxNonBdBalance, S.totalBdBalance, S.totalOpenBalance, S.selfpays, S.avgInitialPatientResponsibility, avgOutstandingPatientBalance)
                  WHEN MATCHED
                          THEN UPDATE SET
                                                          T.firstTreatmentDate=S.firstTreatmentDate ,
                                                          T.lastTreatmentDate=S.lastTreatmentDate,
                                                          T.numTreatments=S.numTreatments ,
                                                          T.totalLifetimeAmountPlaced=S.totalLifetimeAmountPlaced ,
                                                          T.totalLifetimePatientPayments=S.totalLifetimePatientPayments,
                                                  T.avgPatientPaymentPercent=S.avgPatientPaymentPercent ,
                                                          T.numChargeOff=S.numChargeOff ,
                                                          T.avgAccountBeginDate=S.avgAccountBeginDate ,
                                                          T.lastModDate=S.lastModDate ,
                                                          T.lastModUser=S.lastModUser,
                                                          T.maxNonBdBalance=S.maxNonBdBalance,
                                                          T.totalBdBalance=S.totalBdBalance,
                                                          T.totalOpenBalance=S.totalOpenBalance,
                                                          T.priorEVisits1Year=S.priorEVisits1Year,
                                                          T.selfpays=S.selfpays,
                                                          T.avgInitialPatientResponsibility=S.avgInitialPatientResponsibility,
                                                          T.avgOutstandingPatientBalance = S.avgOutstandingPatientBalance;
          SET @total = @@ROWCOUNT
          SET @date = GETDATE()
          SET @ErrorMessage = 'PaymentHistory loaded: ' + CAST(@total AS VARCHAR(50)) + ' Records For HealthSystem ' + @HealthSystemId
          EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

  END
#+END_SRC


*** Open Patient Balance Miner (LOAD_OBD)
Creates these temporary tables

#totalPatientBalance guarantorId, outstandingPatientBalance
#WorkItemObdQ workItemId , totalPatientResponsibility, snapshotDate
#WorkItemObdQFull workItemId , guarantorId,totalPatientResponsibility, snapshotDate
#WorkItemObdQRecent workItemId , totalPatientResponsibility, snapshotDate

Loads guarantorId, outstandingPatientBalance into #totalPatientBalance
#+BEGIN_SRC sql
(select g.guarantorId, sum(v.outstandingPatientBalance)
from pfr..Guarantor g, pfr..Visit v
where v.guarantorId=g.guarantorId and v.outstandingPatientBalance IS NOT NULL
and (v.balanceVisible IS NULL or v.balanceVisible != 0)
(if cpaHealthSystemSetting.includeBadDebt? accountStatus=O or accountStatus=BD : accountStatus=O
and g.guarantorId in (select v2.guarantorId from pfr..Visit v2 where v2.healthSystemId = ?
and v2.lastModDate >= (default -7 days 00:00:00) group by v2.guarantorId)
and g.healthSystemId = ? group by g.guarantorId)
#+END_SRC

maxSnapshotDate is max(currentSnapshotDate) from CpoPfrStaging
Updates pfr..Guarantor from #totalPatientBalance joining on guarantorId

Loads #WorkItemObdQFull from pfr..workItemPfr, pfr..guarantor and #totalPatientBalance
#+BEGIN_SRC sql
insert into tempdb..#WorkItemObdQFull "
            + " (workItemId, totalPatientResponsibility, snapshotDate) "
            + " (select wipfr.workItemId, g.totalPatientResponsibility, g.snapshotDate "
            + " from pfr..WorkItemPfr wipfr, pfr..Guarantor g, tempdb..#totalPatientBalance tpb  "
            + " where g.guarantorId = wipfr.guarantorId and tpb.guarantorId = wipfr.guarantorId "
            + " and g.totalPatientResponsibility IS NOT NULL and g.healthSystemId = ? and g.lastModDate >= ?)
#+END_SRC

Loads the most recent workitem for each guarantor into #WorkItemObdQRecent
#+BEGIN_SRC sql
insert into tempdb..#WorkItemObdQRecent "
            + " (workItemId, totalPatientResponsibility, snapshotDate)"
            + " (select max(q.workItemId), q.totalPatientResponsibility, q.snapshotDate "
            + " from #WorkItemObdQFull q, searchamerica..workitem wi where wi.workitemid = q.workItemId "
            + " group by guarantorId, totalPatientResponsibility, snapshotDate)
#+END_SRC

sets totalpatientresponsibility from #WorkItemObdQ searchamerica..workitem

#+BEGIN_SRC sql
                updatedWorkItems = sbhSA.doStatement(
                             " update searchamerica..workitem "
                            + " set totalpatientresponsibility = q.totalPatientResponsibility, snapshotdate = q.snapshotDate, "
                            + " lastmoddate=getdate(), lastmoduser='patBalMiner' "
                            + " from #WorkItemObdQ q, searchamerica..workitem wi "
                            + " where wi.workitemid = q.workItemId ");
                sbhSA.doStatement("delete from #WorkItemObdQRecent from #WorkItemObdQRecent o,#WorkItemObdQ t where t.workItemId = o.workItemId")
#+END_SRC

Cleans Work Item Balances
#+BEGIN_SRC sql
   IF @lastModUser = NULL OR @lastModUser = ' '
      BEGIN
         SELECT @lastModUser = suser_name()
      END
   /* new clean guarantor and work item from all visits being closed*/
   DECLARE
      @obdIncludeBadDebt tinyint
   SELECT @obdIncludeBadDebt = NULL
   SELECT @obdIncludeBadDebt = cpa.dbo.CpaHealthSystemSetting.obdIncludeBadDebt
   FROM cpa.dbo.CpaHealthSystemSetting
   WHERE cpa.dbo.CpaHealthSystemSetting.healthSystemId = @healthSystemId
   DECLARE
      @ErrorMessage varchar(100),
      @procName varchar(24),
      @currentDate datetime,
      @rowsaffected int
   SELECT @procName = 'p_CleanWorkItemBalances', @currentDate = getdate(), @rowsaffected = 0
   SET @ErrorMessage = 'Started ' + @procName
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      0,
      0,
      0,
      @currentDate
   CREATE TABLE #gIdsWithClosedVisitChanges
   (
      guarantorId varchar(40) NULL
   )

   /*
   *    get the recently changed visits that will not be processed by the regular process
   *    DROP TABLE #gIdsWithClosedVisitChanges
   */
   IF @obdIncludeBadDebt = 1
      BEGIN
         INSERT #gIdsWithClosedVisitChanges
            SELECT v.guarantorId
            FROM dbo.Visit  AS v
            WHERE
               v.healthSystemId = @healthSystemId AND
               v.lastModDate >= @obdStartDate AND
               (isnull(v.outstandingPatientBalance, 0) = 0 OR isnull(v.balanceVisible, 1) = 0 OR (v.accountStatus != 'O' AND v.accountStatus != 'BD'))
            GROUP BY v.guarantorId
      END
   ELSE
      BEGIN
         INSERT #gIdsWithClosedVisitChanges
            SELECT v.guarantorId
            FROM dbo.Visit  AS v
            WHERE
               v.healthSystemId = @healthSystemId AND
               v.lastModDate >= @obdStartDate AND
               (isnull(v.outstandingPatientBalance, 0) = 0 OR isnull(v.balanceVisible, 1) = 0 OR v.accountStatus != 'O')
            GROUP BY v.guarantorId
      END
   /* note the number of guarantors with a recenly updated invalid visits*/
   SELECT @rowsaffected = @@ROWCOUNT
   SET @ErrorMessage = @procName + ' found guarantors with newly updated invalid visit ' + CONVERT(varchar(10), @rowsaffected)
   SET @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      @rowsaffected,
      0,
      0,
      @currentDate
   /* eliminate guarantors with current valid OBD accts.*/
   IF @obdIncludeBadDebt = 1
      BEGIN
         DELETE tmp/* SELECT **/
         FROM
            #gIdsWithClosedVisitChanges  AS tmp
               JOIN dbo.Visit  AS v
               ON v.guarantorId = tmp.guarantorId
         WHERE
            isnull(v.outstandingPatientBalance, 0) != 0 AND
            isnull(v.balanceVisible, 1) = 1 AND
            (v.accountStatus = 'O' OR v.accountStatus = 'BD')
      END
   ELSE
      BEGIN
         DELETE tmp/*SELECT **/
         FROM
            #gIdsWithClosedVisitChanges  AS tmp
               JOIN dbo.Visit  AS v
               ON v.guarantorId = tmp.guarantorId
         WHERE
            isnull(v.outstandingPatientBalance, 0) != 0 AND
            isnull(v.balanceVisible, 1) = 1 AND
            (v.accountStatus = 'O')
      END
   SELECT @rowsaffected = @@ROWCOUNT
   /* note the number of guarantors that were removed because there were still valid visits*/
   SET @ErrorMessage = @procName + ' removed still valid guarantors ' + CONVERT(varchar(10), @rowsaffected)
   SET @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      0,
      0,
      @rowsaffected,
      @currentDate
   /* remaining G's need to be cleaned if they have a workitem*/
   UPDATE g
      SET
         totalPatientResponsibility = 0,
         lastModUser = @lastModUser,
         snapshotDate = @snapshotDate,
         lastModDate = @currentDate/* select **/
   FROM dbo.Guarantor  AS g, #gIdsWithClosedVisitChanges  AS tmp
   WHERE tmp.guarantorId = g.guarantorId AND isnull(g.totalPatientResponsibility, 0) != 0
   SELECT @rowsaffected = @@ROWCOUNT
   /* note the number of updated guarantors*/
   SET @ErrorMessage = @procName + ' cleaned guarantors ' + CONVERT(varchar(10), @rowsaffected)
   SET @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      0,
      @rowsaffected,
      0,
      @currentDate
   /* get work item ids to clean*/
   SELECT wipfr.workItemId
      INTO #wiToCheck
   FROM
      dbo.WorkItemPfr  AS wipfr
         JOIN #gIdsWithClosedVisitChanges  AS tmp
         ON tmp.guarantorId = wipfr.guarantorId
   SELECT @rowsaffected = @@ROWCOUNT
   /* note the number work items to update based on WIPFR*/
   SET @ErrorMessage = @procName + ' found work items to update based on WIPFR ' + CONVERT(varchar(10), @rowsaffected)
   SET @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      @rowsaffected,
      0,
      0,
      @currentDate
   /*
   *   SSMA warning messages:
   *   S2SS0030: The database object was not found while resolving tmp.workItemId.
   */

   SELECT wi.workitemid
      INTO #wiToClean
   FROM
      searchamerica.dbo.workitem  AS wi
         JOIN #wiToCheck  AS tmp
         ON wi.workitemid = tmp.workItemId
   WHERE wi.totalpatientresponsibility IS NOT NULL AND wi.totalpatientresponsibility <> 0
   SELECT @rowsaffected = @@ROWCOUNT
   /* note the number work items to update based on work item (should equal previous entry)*/
   SET @ErrorMessage = @procName + ' found work items to update based on workitem (should equal previous entry) ' + CONVERT(varchar(10), @rowsaffected)
   SET @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      @rowsaffected,
      0,
      0,
      @currentDate
   /* cursor through the workitemid list*/
   DECLARE
      @workitemid numeric(18, 0)
   SELECT @rowsaffected = 0/*intialize counter*/
   DECLARE
       cleanWI_cursor CURSOR LOCAL FORWARD_ONLY DYNAMIC FOR
         /*
         *   SSMA warning messages:
         *   S2SS0030: The database object was not found while resolving workitemid.
         */

         SELECT workitemid
         FROM #wiToClean
   OPEN cleanWI_cursor
   /***  priming fetch  ***********/
   FETCH cleanWI_cursor
       INTO @workitemid
   /*****  fetch rows   **************/
   WHILE @@FETCH_STATUS = 0

      BEGIN

         UPDATE wi
            SET
               totalpatientresponsibility = 0/*Changed from null to 0 per Jira OPS-12988*/,
               lastmoduser = @lastModUser,
               /*lastmoddate = @currentDate*/lastmoddate = getdate()
         FROM searchamerica.dbo.workitem  AS wi
         WHERE wi.workitemid = @workitemid

         /***  trailing fetch  ***********/
         FETCH cleanWI_cursor
             INTO @workitemid

         SELECT @rowsaffected = @rowsaffected + 1

      END
   CLOSE cleanWI_cursor
   DEALLOCATE cleanWI_cursor
   SET @ErrorMessage = @procName + ' updated work items ' + CONVERT(varchar(10), @rowsaffected)
   SELECT @currentDate = getdate()
   EXECUTE dbo.p_PfrLog_Insert
      @procName,
      @healthSystemId,
      @ErrorMessage,
      0,
      @rowsaffected,
      0,
      @currentDate
#+END_SRC
Deletes Temporary Tables and deletes all records from CpoPfrStaging

Marks Pfr Request as done
#+BEGIN_SRC sql
update PfrRequest set lastModDate=getdate(), lastModUser='Java', comment='PFR DONE @ ' + CONVERT(VARCHAR(30), GETDATE(), 20),
 prevSnapshotDate = CASE WHEN doneDate IS NOT NULL THEN ISNULL(@prevSnapshotDate,prevSnapshotDate) ELSE prevSnapshotDate END
 where healthSystemId= @healthSystemId and jobName= @jobName

If cpo contains agency data i.e. companyType='A'

select top 1 * from CpoPfrStaging cpo  with (nolock) "
                        + " JOIN searchAmericaDW.dbo.company c with (nolock) ON cpo.currentCompanyid = c.companyid where isnull(c.companyType,'H') = ? and currentHealthSystemId = ?",
then
update PfrRequest set agencyLastRunDate = @programStartDate, agencyDoneDate = GETDATE()
	where healthSystemId= @healthSystemId and jobName= @jobName
#+END_SRC


*** CpoExtractor
Validates records in currentPatientOutcomes
makes sure currentHealthSystemId, currentCompanyid, currentAccountNumber is unique for each record

**** Closes Visits which have no counterpart in currentPatientOutcomes
#+BEGIN_SRC sql
update cow.dbo.Visit set accountStatus = 'CL', lastModDate = getdate(), lastModUser = 'migrateme16'
 --DECLARE @healthSystemId VARCHAR(64)
 --SET @healthSystemId = 'STARDATA'
 --select v.lastModDate, v.accountStatus, v.companyId, v.healthSystemId
from cow.dbo.Visit v JOIN searchAmericaDW.dbo.company c ON v.companyId = c.companyid
LEFT OUTER JOIN searchAmericaDW.dbo.currentPatientOutcomes cpo --WITH ( TABLOCKX ) -- commented out by Thanh Nguyen 2/3/2014
ON v.patientAccountNumber = cpo.currentAccountNumber and v.companyId = cpo.currentCompanyid and v.healthSystemId = cpo.currentHealthSystemId
where v.healthSystemId = @healthSystemId AND c.companyType = 'H' AND v.accountStatus <> 'CL' AND cpo.ID IS NULL
END

#+END_SRC

Cleans Barcodes in Cpo
#+BEGIN_SRC sql
CREATE PROC [dbo].[stp_cleanCpoBarcode]
    @healthSystemId VARCHAR(64) = ''
AS
/*
***************************************************************************************************
Name:	dbo.stp_cleanCpoBarcode
Author:	Sean Porter
Date:	10/31/2014
CVS Location: /opt/cvsbase/pid/Collection Optimization/stp_cleanCpoBarcode.sql

---------------------------------------------------------------------------------------------------
Synopsis: This stored proc is supposed to clean up outdated CpoBarcode records

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_cleanCpoBarcode 'STARDATA'
sp_helptext stp_cleanCpoBarcode
--
begin tran;
 delete from dbo.stp_cleanCpoBarcode where currentHealthSystemId = '0014000000XoGhx'
 commit
***************************************************************************************************
Revision History:
Date		Author				Ref					Description
---------------------------------------------------------------------------------------------------
2012?		Sean Porter								Originally created
10/31/2014	Sean Porter			SA-9041				Updated to return null
***************************************************************************************************
*/
    BEGIN

-- clean cpo barcode stored proc

-- original: delete from CpoBarcode where ID not in (select distinct ID from searchAmericaDW.dbo.currentPatientOutcomes cpo)

-- new after changing to clustering and reducing load on CPO

  RETURN

-- select count(*) from dbo.CpoBarcode JOIN #cpoId tmp ON dbo.CpoBarcode.ID = tmp.ID
--SELECT COUNT(*) FROM  CpoBarcode
--SELECT COUNT(*) FROM  #cpoId

    END
#+END_SRC

Deletes all records in CpoPfrStaging for health system


**** Links cpo and guarantor i.e. updates guarantorId in searchAmericaDW..CurrentPatientOutcome by joining on cow..Visit
cow..Visit -> searchAmerica..currentPatientOutcomes
Runs stp_loadCurrentPatientOutcomesGuarantorId
#+BEGIN_SRC sql


CREATE PROCEDURE [dbo].[stp_loadCurrentPatientOutcomesGuarantorId]
	@healthSystemId VARCHAR(64)
WITH RECOMPILE
AS /*
***************************************************************************************************
Name:	[stp_loadCurrentPatientOutcomesGuarantorId]
Author:	Chris Busch
Date:	Nov 2014
---------------------------------------------------------------------------------------------------
Synopsis: Reloads the currentPatientOutcomes's guarantorId table
---------------------------------------------------------------------------------------------------
***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
11/25/2014	Chris Busch		SA-8838			Start populating prior PaymentHistory for a CO client
12/12/2014	Chris Busch		SA-8838			included more guarantorId is null checking
***************************************************************************************************
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	DECLARE @name Varchar(50)
	DECLARE @total INT
	DECLARE @db VARCHAR(100)
	DECLARE @date DATETIME
	Declare @procName Varchar(100)
	DECLARE @ErrorMessage VARCHAR(100)
	SET @ErrorMessage = 'Start loadCurrentPatientOutcomesGuarantorId HealthSystem: ' + @HealthSystemId
	set @procName = OBJECT_NAME(@@PROCID)
	SET @name = SUSER_NAME()
	SET @db = DB_NAME()
	SET @date = GETDATE()

	--Visits CPOs by way of Visit -- this is probably best since there are way fewer Visits
	UPDATE gm SET guarantorId=v.guarantorId
		FROM cow.dbo.Visit v
		JOIN searchAmericaDW.dbo.CurrentPatientOutcome gm  ON gm.healthSystemId=v.healthSystemId AND gm.companyId=v.companyId AND gm.accountNumber=v.patientAccountNumber
		WHERE gm.guarantorId IS NULL AND v.healthSystemId = @healthSystemId
	SET @total = @@ROWCOUNT
	SET @date = GETDATE()
	SET @ErrorMessage = 'Guarantors updated in CPO step 1: ' + CAST(@total AS VARCHAR(50)) + ' Records For HealthSystem ' + @HealthSystemId
	EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

	--Do this for guarantorCode matches
	UPDATE po2 SET guarantorId=v.guarantorId
		FROM cow.dbo.Visit v
		--get the guarantorCode
		JOIN searchAmericaDW.dbo.CurrentPatientOutcome po ON v.healthSystemId=po.healthSystemId AND v.companyId=po.companyId AND po.accountNumber=v.patientAccountNumber
			AND po.guarantorCode IS NOT NULL
		--find the matches
		JOIN searchAmericaDW.dbo.CurrentPatientOutcome po2 ON v.healthSystemId=po2.healthSystemId AND po.guarantorCode=po2.guarantorCode AND po2.guarantorId IS NULL
		WHERE v.healthSystemId = @healthSystemId
	SET @total = @@ROWCOUNT
	SET @date = GETDATE()
	SET @ErrorMessage = 'Guarantors updated in CPO step 2: ' + CAST(@total AS VARCHAR(50)) + ' Records For HealthSystem ' + @HealthSystemId
	EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


	--Do this for demographic matches
	UPDATE po2 SET guarantorId=v.guarantorId
		FROM cow.dbo.Visit v
		--get the guarantor demographics
		JOIN searchAmericaDW.dbo.CurrentPatientOutcome po ON v.healthSystemId=po.healthSystemId AND v.companyId=po.companyId AND po.accountNumber=v.patientAccountNumber
		--find the matches all demographics (nulls will be DQed)
		JOIN searchAmericaDW.dbo.CurrentPatientOutcome po2 ON v.healthSystemId=po2.healthSystemId
			AND po.guarantorLastName=po2.guarantorLastName AND po.guarantorFirstName=po2.guarantorFirstName
			AND po.guarantorZip=po2.guarantorZip AND po.guarantorDob=po2.guarantorDob AND po.guarantorSsn=po2.guarantorSsn
			AND po2.guarantorId IS NULL
	WHERE v.healthSystemId = @healthSystemId
	SET @total = @@ROWCOUNT
	SET @date = GETDATE()
	SET @ErrorMessage = 'Guarantors updated in CPO step 3: ' + CAST(@total AS VARCHAR(50)) + ' Records For HealthSystem ' + @HealthSystemId
	EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage
END;
#+END_SRC


**** Loads CpoPfrStaging For agency
AgencyOutcome -> CpoPfrStaging
v_AgencyPfrStaging
#+BEGIN_SRC sql
SELECT ao.agencyOutcomeId,
ao.agencyAccountNumber, -- as currentAccountNumber
aa.curSnapshotDate, -- as currentSnapshotDate
ao.previousSnapshotDate,
ao.lastModDate,
ao.lastModUser,
ao.healthSystemId,
hsa.agencyCompanyId AS 'companyId',
ao.accountStatus, -- as currentAccountStatus
ao.processingType,
ao.currentBalance, -- as currentOutstandingPatientBalance
ao.totalPayments, -- currentTotalPayments
ao.totalAdjustments, -- currentTotalAdjustment
ao.totalInsurancePayments, -- currentInsurancePayments
ao.placementDate, -- currentPlacementDate
ao.closeDate, -- currentSaClosedDate
ao.guarantorLastName,
ao.guarantorFirstName,
ao.guarantorMiddleName,
ao.guarantorDOB,
ao.guarantorSSN,
ao.guarantorAddressLine1,
ao.guarantorAddressLine2,
ao.guarantorCity,
ao.guarantorState,
ao.guarantorZip,
ao.phoneNumber1, --currentGuarantorHomePhone
ao.lastActivityDate,
ao.lastPaymentDate,
ao.lastPaymentAmount, -- currentPreviousSnapshotDate -- select *
0 AS 'balanceVisible',
ao.numPositiveContacts,
ao.initialAmountPlaced,
ao.guarantorCode
FROM searchAmericaDW.dbo.AgencyAccount aa  -- Jira OPS-14519 for TABLOCKX
JOIN searchAmericaDW.dbo.AgencyOutcome ao ON aa.curAgencyOutcomeId = ao.agencyOutcomeId
JOIN searchAmericaDW.dbo.HealthSystemAgency hsa ON ao.healthSystemAgencyId = hsa.healthSystemAgencyId
WHERE hsa.coActive = 1 AND hsa.agencyCompanyId IS NOT NULL;
#+END_SRC

Loads data into Cpo Pfr Staging
#+BEGIN_SRC sql
CREATE  PROCEDURE [dbo].[stp_loadAgencyToCpoPfrStaging]
    @healthSystemId VARCHAR(64)
AS /*
***************************************************************************************************
Name:	dbo.stp_loadAgencyToCpoPfrStaging
Author:	John Smith
Date:	05/06/2013
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc agency records from the view into CpoPfrStaging

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_loadAgencyToCpoPfrStaging

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
05/06/2013	Stephanie Wentland	SA-8445, OPS-14654	Originally created
08/18/2014  Sean Porter						Adding to CVS    /opt/cvsbase/pid/analytics/Collection Optimization/stp_loadCpoPfrStaging.sql,v


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
		--DECLARE @healthSystemId VARCHAR(64)
		--SET @healthSystemId = 'STARDATAAG'

        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(500)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        DECLARE @procName VARCHAR(100)
        DECLARE @lastRunDate DATETIME
        SET @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @lastRunDate = ( SELECT agencyLastRunDate
                             FROM   dbo.PfrRequest
                             WHERE  healthSystemId = @healthSystemId
                           )
        SET @ErrorMessage = 'Start Agency Extract: ' + @healthSystemId
            + ' after ' + CONVERT(VARCHAR, @lastRunDate, 101)
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL, @ErrorMessage

		DECLARE @testAoId VARCHAR(40)
		SET @testAoId = (SELECT TOP 1 agencyOutcomeId FROM v_AgencyPfrStaging aoV
                        JOIN cow.dbo.PfrRequest req ON aoV.healthSystemId = req.healthSystemId
						WHERE   aoV.healthSystemId = @healthSystemId
                        AND aoV.lastModDate > req.agencyLastRunDate)
		IF(@testAoId IS null)
			BEGIN
				SET @ErrorMessage = 'Agency Extract: ' + @healthSystemId
									 + ' had no new outcomes since ' + CONVERT(VARCHAR, @lastRunDate, 101)
				EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
									'INFO', NULL, @procName, NULL, @ErrorMessage
				RETURN;
			END

		IF ( SELECT COUNT(*) FROM   dbo.CpoPfrStagingExtract WHERE  healthSystemId = @healthSystemId AND context = 'A' AND enabled = 1) > 0
            BEGIN
                EXECUTE cow.dbo.stp_PopulateCpoExtract @healthSystemId,
                    0, 'A', @count = @total OUTPUT
            END
        ELSE
		BEGIN
        INSERT  INTO dbo.CpoPfrStaging
                ( ID ,
                  [currentAccountNumber] ,
                  [currentSnapshotDate] ,
                  currentLastModDate ,
                  currentHealthSystemId ,
                  currentCompanyid ,
				  currentAgencyCode ,
                  currentAccountStatus ,
                  currentOutstandingPatientBalance ,
                  currentPatientPayments ,
                  currentTotalAdjustments ,
                  currentInsurancePayments ,
                  [currentPlacementDate] ,
                  currentGuarantorLastName ,
                  currentGuarantorFirstName ,
                  currentGuarantorDOB ,
                  currentGuarantorSSN ,
                  [currentGuarantorAddress1] ,
                  [currentGuarantorAddress2] ,
                  [currentGuarantorCity] ,
                  [currentGuarantorState] ,
                  [currentGuarantorZip] ,
                  [currentGuarantorHomePhone] ,
                  [currentLastPaymentDate] ,
                  [currentPreviousSnapshotDate] ,
                  [currentDateBegin]
                )
                SELECT  agencyOutcomeId ,
                        agencyAccountNumber ,
                        curSnapshotDate ,
                        aoV.lastModDate ,
                        aoV.healthSystemId ,
                        aoV.companyId ,
						aoV.companyId , -- defaulting to companyId
                        aoV.accountStatus ,
                        aoV.currentBalance ,
                        aoV.totalPayments ,
                        aoV.totalAdjustments ,
                        aoV.totalInsurancePayments ,
                        aoV.placementDate ,
                        guarantorLastName ,
                        guarantorFirstName ,
                        guarantorDOB ,
                        guarantorSSN ,
                        guarantorAddressLine1 ,
                        guarantorAddressLine2 ,
                        guarantorCity ,
                        guarantorState ,
                        guarantorZip ,
                        phoneNumber1 ,
                        aoV.lastPaymentDate ,
                        previousSnapshotDate ,
                        aoV.placementDate
                FROM    v_AgencyPfrStaging aoV
                        JOIN cow.dbo.PfrRequest req ON aoV.healthSystemId = req.healthSystemId
                        LEFT OUTER JOIN searchAmericaDW.dbo.CpaStatus cpa ON cpa.accountNumber = aoV.agencyAccountNumber
                                                              AND cpa.companyId = aoV.companyId
                                                              AND cpa.healthSystemId = aoV.healthSystemId
                        LEFT OUTER JOIN cow.dbo.Visit pfrV ON pfrV.patientAccountNumber = aoV.agencyAccountNumber
                                                              AND pfrV.companyId = aoV.companyId
                                                              AND pfrV.healthSystemId = aoV.healthSystemId
                WHERE   aoV.healthSystemId = @healthSystemId
                        AND aoV.lastModDate > req.agencyLastRunDate
                        AND ( ( aoV.currentBalance > 0
                                AND aoV.accountStatus = 'BD'
                              )
                              OR ( ( aoV.currentBalance <= 0
                                     OR aoV.accountStatus = 'CL'
                                   )
                                   AND cpa.cpaStatusId IS NOT NULL
                                 )
                              OR ( ( aoV.currentBalance <= 0
                                     OR aoV.accountStatus = 'CL'
                                   )
                                   AND cpa.cpaStatusId IS NULL
                                   AND pfrV.visitId IS NOT NULL
                                   AND ( pfrV.accountStatus <> aoV.accountStatus
                                         OR pfrV.patientResponsibility <> aoV.currentBalance
                                       )
                                 )
                            )
		SET @total = @@ROWCOUNT
        END

		DECLARE @total2 INT
        SET @date = GETDATE()
        SET @total2 = ( SELECT  COUNT(*)
                        FROM    cow.dbo.CpoPfrStaging
                      )
        SET @ErrorMessage = 'Added ' + CAST(@total AS VARCHAR(50))
            + ' agency records to CpoPfrStaging, now has '
            + CAST(@total2 AS VARCHAR(50)) + ' @ ' + @healthSystemId
            + ' after ' + CONVERT(VARCHAR, @lastRunDate, 101)
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL, @ErrorMessage

	    -- Setup
		DECLARE @filter_id INT
		DECLARE @delete_prefix AS NCHAR(45)
		SET @delete_prefix = 'DELETE CpoPfrStaging FROM CpoPfrStaging cpo '
		DECLARE @filter AS NVARCHAR(MAX)
		SET ROWCOUNT 0
		SELECT * INTO #CpoFilter FROM CpoPfrStagingFilter WHERE healthSystemId = @healthSystemId AND enabled=1 AND context='A' AND whereClause IS NOT NULL
		--End Setup

		--Loop through filters
		SELECT TOP 1 @filter_id = filterId FROM #CpoFilter
		WHILE (SELECT COUNT(*) FROM #CpoFilter) > 0
		BEGIN
			SELECT @filter = (@delete_prefix + ISNULL(joinClause, '') + ' ' + whereClause) FROM #CpoFilter WHERE filterId = @filter_id
			EXEC sp_executesql @filter, N'@healthSystemId VARCHAR(64)', @healthSystemId--Apply filter
			SET @total = @@ROWCOUNT
            SET @ErrorMessage = 'Removed ' + CONVERT(VARCHAR(50), @total)
                    + ' records from extract for ' + @healthSystemId + ' for filter ' + CONVERT(VARCHAR(50), @filter_id)
            EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL,
                    NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage
			DELETE FROM #CpoFilter WHERE filterId = @filter_id
			SELECT TOP 1 @filter_id = filterId FROM #CpoFilter
		END
    END
#+END_SRC


**** Loads CpoPfrStaging For Hospital
currentPatientOutcomes -> cpoPfrStaging
#+BEGIN_SRC sql
CREATE PROCEDURE [dbo].[stp_loadCpoPfrStage]
    @healthSystemId VARCHAR(64) ,
    @daysBack INT = 0
AS /*
***************************************************************************************************
Name:	dbo.stp_loadCpoPfrStage
Author:	Stephanie Wentland
Date:	05/07/2013
CVS Location: /opt/cvsbase/pid/DW/ETL/STP/stp_CpoPfrStaging.sql

---------------------------------------------------------------------------------------------------
Synopsis: This stored proc loads AR Outcomes and Agency Outcomes records into CpoPfrStaging

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_loadCpoPfrStage '001A00000053fDF', -30
sp_helptext stp_loadCpoPfrStage
sp_helptext stp_deleteCpoPfrStage
select * FROM cow.dbo.CpoPfrStaging -- select count(*), currentHealthSystemId FROM cow.dbo.CpoPfrStaging group by currentHealthSystemId
select distinct currentBillingType FROM cow.dbo.CpoPfrStaging where currentHealthSystemId ='001A00000053fDF'
select count(*), currentHealthSystemId FROM cow.dbo.CpoPfrStaging with (nolock) group by currentHealthSystemId
select count(*), currentHealthSystemId from searchAmericaDW.dbo.currentPatientOutcomes group by currentHealthSystemId
-- delete from dbo.CpoPfrStaging where currentHealthSystemId = 'STARDATA'
***************************************************************************************************
Revision History:
Date		Author				Ref					Description
---------------------------------------------------------------------------------------------------
2012?		Sean Porter								Originally created
05/07/2013	Stephanie Wentland	SA-8445,OPS-14654	Updated for agency triggers
06/03/2013	Sean Porter			SA-8445,OPS-14654	Updated to not pull agency data as part of this
07/24/2013	Sean Porter			SA-8474				Updated to use cow for finding the existing visits
05/15/2014	Sean Porter			SA-8864				Updating with a special case to handle HCMC and Ochsner feeds that can't flow into pfr
06/25/2014  Sean Porter			SA-8919				The last change affected the logging to EtlAdmin so this will move that back to where it should be
08/11/2014	Sean Porter			SA-8979				Updated to stop filtering HCMC Epic PB
09/11/2014	Sean Porter			SA-8727				Removed distinct keyword for performance
09/19/2014	Sean Porter			SA-9040				Stop processing Stanfor BD records
09/20/2014	Sean Porter								Put back in distinct keyword
10/30/2014	Thanh Nguyen		OPS-16142			Changed WHERE clause from pr.healthSystemId = @healthSystemId to cpo.currentHealthSystemId = @healthSystemId. Also switched JOIN between pr and cpo
12/04/2015  Sean Porter								Changed * to column list to handle changes to CPO.
08/20/2015  Jaideep Umraiya     SA-9076             Adding logic to incorporate health system specific criteria when populating, deleting cpo records
***************************************************************************************************
*/


    BEGIN

        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(500)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        DECLARE @procName VARCHAR(100)
        DECLARE @snapshotDate DATETIME
        SET @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @ErrorMessage = 'Start CPO Extract: ' + @healthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL, @ErrorMessage
        IF ( SELECT COUNT(*)
             FROM   dbo.CpoPfrStagingExtract
             WHERE  healthSystemId = @healthSystemId
                    AND context = 'H'
                    AND enabled = 1
           ) > 0
            BEGIN
                EXECUTE cow.dbo.stp_PopulateCpoExtract @healthSystemId,
                    @daysBack, 'H', @count = @total OUTPUT
            END
        ELSE
            BEGIN
	-- NEWEST: SINGLE QUERY TEST
	-- Extracts a subset of data from CPO for use in the COW process.  This only extracts data from a specified snapshot date and newer.
	-- This also excludes new accounts that are closed or don't have a outstandingPatientBalance.
	-- This will include existing accounts that are closed or DON'T have a balance if they've previously been enrolled in CPA.  This indicates the account must have had a balance at some point.
                INSERT  INTO CpoPfrStaging
                        SELECT DISTINCT
                                cpo.ID ,
                                cpo.currentCompanyid ,
                                cpo.currentSnapshotDate ,
                                cpo.currentSnapshotId ,
                                cpo.currentSnapshotDept ,
                                cpo.currentFileType ,
                                cpo.currentSearchid ,
                                cpo.currentVisitNumber ,
                                cpo.currentAccountNumber ,
                                cpo.currentMrn ,
                                cpo.currentPatientType ,
                                cpo.currentInsurance1FinancialClass ,
                                cpo.currentInsurance2FinancialClass ,
                                cpo.currentInsurance3FinancialClass ,
                                cpo.currentPayer ,
                                cpo.currentAccountStatus ,
                                cpo.currentHospitalId ,
                                cpo.currentServiceType ,
                                cpo.currentDiagnosticCode ,
                                cpo.currentProcedureCode ,
                                cpo.currentDrgCode ,
                                cpo.currentGuarantorLastName ,
                                cpo.currentGuarantorFirstName ,
                                cpo.currentGuarantorMiddleInitial ,
                                cpo.currentGuarantorAddress1 ,
                                cpo.currentGuarantorAddress2 ,
                                cpo.currentGuarantorCity ,
                                cpo.currentGuarantorState ,
                                cpo.currentGuarantorZip ,
                                cpo.currentGuarantorHomePhone ,
                                cpo.currentGuarantorSSN ,
                                cpo.currentGuarantorDOB ,
                                cpo.currentPatientLastName ,
                                cpo.currentPatientFirstName ,
                                cpo.currentPatientMiddleInitial ,
                                cpo.currentPatientAddress1 ,
                                cpo.currentPatientAddress2 ,
                                cpo.currentPatientCity ,
                                cpo.currentPatientState ,
                                cpo.currentPatientZip ,
                                cpo.currentPatientHomePhone ,
                                cpo.currentPatientSSN ,
                                cpo.currentPatientDOB ,
                                cpo.currentAdmitDate ,
                                cpo.currentDischargeDate ,
                                cpo.currentArPostingDate ,
                                cpo.currentLastBillingDate ,
                                cpo.currentLastPaymentDate ,
                                cpo.currentClosingDate ,
                                cpo.currentReturnMailFlag ,
                                cpo.currentTotalCharges ,
                                cpo.currentInitialPatientResponsibility ,
                                cpo.currentOutstandingPatientBalance ,
                                cpo.currentPatientPayments ,
                                cpo.currentInsurance1Payments ,
                                cpo.currentInsurance2Payments ,
                                cpo.currentInsurance3Payments ,
                                cpo.currentTotalPayments ,
                                cpo.currentPatientAdjustments ,
                                cpo.currentInsuranceAdjustments ,
                                cpo.currentTotalAdjustments ,
                                cpo.currentInsurance1OutstandingBalance ,
                                cpo.currentInsurance2OutstandingBalance ,
                                cpo.currentInsurance3OutstandingBalance ,
                                cpo.currentAccountBalance ,
                                cpo.currentHouseholdIncome ,
                                cpo.currentHouseholdSize ,
                                cpo.currentHisUserID ,
                                cpo.currentCharityAmount ,
                                cpo.currentBadDebtAmount ,
                                cpo.currentArStatus ,
                                cpo.currentArDays ,
                                cpo.currentAccountID ,
                                cpo.currentSASearch ,
                                cpo.currentPaymentAdvisorCategory ,
                                cpo.currentFirstSnapshotDate ,
                                cpo.currentCharityCount ,
                                cpo.currentHealthSystemId ,
                                cpo.currentCurrentFinancialClass ,
                                cpo.currentCollectorCode ,
                                cpo.currentInsurancePayments ,
                                cpo.currentInsuranceOutstandingBalance ,
                                cpo.currentRegistrationName ,
                                cpo.currentLastModDate ,
                                cpo.currentSaCloseDate ,
                                cpo.currentTotalChargesCategoryId ,
                                cpo.currentAccountBalanceCategoryId ,
                                cpo.currentOutstandingPatientBalanceCategoryId ,
                                cpo.currentTotalPaymentsCategoryId ,
                                cpo.currentTotalAdjustmentsCategoryId ,
                                cpo.currentCharityAmountCategoryId ,
                                cpo.currentBadDebtAmountCategoryId ,
                                cpo.currentFplpercentageCategoryId ,
                                cpo.currentPreviousSnapshotDate ,
                                cpo.currentSelfPayDate ,
                                cpo.currentAgencyCode ,
                                cpo.currentHealthSystemAgencyId ,
                                cpo.currentAccountHoldStatus ,
                                cpo.currentPlacementDate ,
                                cpo.currentGuarantorEmployer ,
                                cpo.currentPatientEmployer ,
                                cpo.currentEarlyOutPlcmtDate ,
                                cpo.currentBadDebtPlcmtDate ,
                                cpo.currentPosPayments ,
                                cpo.currentCollectorId ,
                                cpo.currentBillingType ,
                                cpo.currentPaymentPlan ,
                                cpo.currentBankruptcy ,
                                cpo.currentDeceased ,
                                cpo.currentAdminHold ,
                                cpo.currentGuarantorCode ,
                                cpo.currentBalanceVisible ,
                                cpo.currentFirstStatementDate ,
                                cpo.currentLastStatementDate ,
                                cpo.currentGuarantorGender ,
                                cpo.currentPatientGender ,
                                cpo.currentBillingIndicator ,
                                cpo.currentIns1PlanCode ,
                                cpo.currentIns2PlanCode ,
                                cpo.currentIns3PlanCode ,
                                cpo.currentDateBegin ,
                                cpo.currentClientAgencyCode ,
                                cpo.currentAgencyCodeChangeDate
                        FROM    dbo.PfrRequest pr
                                INNER JOIN searchAmericaDW.dbo.currentPatientOutcomes cpo ON pr.healthSystemId = cpo.currentHealthSystemId
                                LEFT OUTER JOIN searchAmericaDW.dbo.CpaStatus cpa ON cpa.accountNumber = cpo.currentAccountNumber
                                                              AND cpa.companyId = cpo.currentCompanyid
                                                              AND cpa.healthSystemId = cpo.currentHealthSystemId
                                LEFT OUTER JOIN cow.dbo.Visit v ON v.patientAccountNumber = cpo.currentAccountNumber
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND v.healthSystemId = cpo.currentHealthSystemId
                        WHERE   cpo.currentHealthSystemId = @healthSystemId
                                AND currentSnapshotDate >= DATEADD(dd,
                                                              @daysBack,
                                                              ISNULL(pr.prevSnapshotDate,
                                                              DATEADD(dd, -30,
                                                              GETDATE())))
                                AND ( ( currentOutstandingPatientBalance > 0
                                        AND currentAccountStatus != 'CL'
                                      )
                                      OR ( ( currentOutstandingPatientBalance <= 0
                                             OR currentAccountStatus = 'CL'
                                           )
                                           AND cpa.cpaStatusId IS NOT NULL
                                         )
                                      OR ( ( currentOutstandingPatientBalance <= 0
                                             OR currentAccountStatus = 'CL'
                                           )
                                           AND cpa.cpaStatusId IS NULL
                                           AND v.visitId IS NOT NULL
                                           AND ( v.accountStatus <> cpo.currentAccountStatus
                                                 OR v.outstandingPatientBalance <> cpo.currentOutstandingPatientBalance
                                               )
                                         )
                                    )
                SET @total = @@ROWCOUNT
            END
        DECLARE @total2 INT
        SET @date = GETDATE()
        SET @snapshotDate = ( SELECT    prevSnapshotDate
                              FROM      dbo.PfrRequest
                              WHERE     healthSystemId = @healthSystemId
                            )
        SET @total2 = ( SELECT  COUNT(*)
                        FROM    searchAmericaDW.dbo.currentPatientOutcomes
                        WHERE   currentHealthSystemId = @healthSystemId
                                AND currentSnapshotDate >= @snapshotDate
                      )
        SET @ErrorMessage = 'Final Counts: ' + CAST(@total AS VARCHAR(50))
            + ' Records for Extract; ' + CAST(@total2 AS VARCHAR(50))
            + ' Records in CPO on SADW for SnapshotDate -  '
            + CONVERT(VARCHAR, @snapshotDate, 101) + ' ' + @healthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL, @ErrorMessage

		-- Setup
		DECLARE @filter_id INT
		DECLARE @delete_prefix AS NCHAR(45)
		SET @delete_prefix = 'DELETE CpoPfrStaging FROM CpoPfrStaging cpo '
		DECLARE @filter AS NVARCHAR(MAX)
		SET ROWCOUNT 0
		SELECT * INTO #CpoFilter FROM CpoPfrStagingFilter WHERE healthSystemId = @healthSystemId AND enabled=1 AND context='H' AND whereClause IS NOT NULL
		--End Setup

		--Loop through filters
		SELECT TOP 1 @filter_id = filterId FROM #CpoFilter
		WHILE (SELECT COUNT(*) FROM #CpoFilter) > 0
		BEGIN
			SELECT @filter = (@delete_prefix + ISNULL(joinClause, '') + ' ' + whereClause) FROM #CpoFilter WHERE filterId = @filter_id
			EXEC sp_executesql @filter, N'@healthSystemId VARCHAR(64), @daysBack INT', @healthSystemId, @daysBack --Apply filter
			SET @total = @@ROWCOUNT
            SET @ErrorMessage = 'Removed ' + CONVERT(VARCHAR(50), @total)
                    + ' records from extract for ' + @healthSystemId + ' for filter ' + CONVERT(VARCHAR(50), @filter_id)
            EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL,
                    NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage
			DELETE FROM #CpoFilter WHERE filterId = @filter_id
			SELECT TOP 1 @filter_id = filterId FROM #CpoFilter
		END

		IF @healthSystemId = '0014000000OPPMW'
		BEGIN
			DELETE FROM cow.dbo.CpoPfrStaging WHERE currentHealthSystemId = '0014000000OPPMW' AND (currentBillingType <> 'HB' OR currentFileType <> 'INVISION')
			SET @total = @@ROWCOUNT
			SET @ErrorMessage = 'Removed ' + CAST(@total AS VARCHAR(50)) + ' records from extract for ' + @healthSystemId
			EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage
		END

        IF @healthSystemId = '001300000024HEt'
		BEGIN
			DELETE  cow.dbo.CpoPfrStaging FROM  cow.dbo.CpoPfrStaging cpo
			LEFT OUTER JOIN searchAmericaDW.dbo.CpaStatus cpa ON cpa.accountNumber = cpo.currentAccountNumber
                                                              AND cpa.companyId = cpo.currentCompanyid
                                                              AND cpa.healthSystemId = cpo.currentHealthSystemId
            LEFT OUTER JOIN cow.dbo.Visit v ON v.patientAccountNumber = cpo.currentAccountNumber
                                                           AND v.companyId = cpo.currentCompanyid
                                                           AND v.healthSystemId = cpo.currentHealthSystemId
            WHERE   currentHealthSystemId = '001300000024HEt'
                        AND currentAccountStatus = 'BD'
                        AND cpa.cpaStatusId IS NULL
                        AND v.visitId IS NULL
            SET @total = @@ROWCOUNT
            SET @ErrorMessage = 'Removed ' + CAST(@total AS VARCHAR(50))
                    + ' records from extract for ' + @healthSystemId
            EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL,
                    NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage
        END
    END
#+END_SRC


*** PfrSourceToPfrMigration (LOAD_OLTP)
Processes person, guarantor, patient, visit, personVisitLog savers
Saver: Source, Destination, bcpLowerBoundDate

Foreach saver bcpOut, copies data to work_space.. tables from cow.. tables based on last mod date
stp_FastTrackOut
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].stp_FastTrackOut
    @sourceTable VARCHAR(60) , -- no longer used.
    @targetTable VARCHAR(60) ,
    @healthSystemId VARCHAR(64) ,
    @lastModDate VARCHAR(40), -- Must be varchar, not datetime nor smalldatetime (this was required for the older version that passd this information to a windows cmd script
	@hostName  VARCHAR(16)
AS /*
***************************************************************************************************
Name:	dbo.stp_FastTrackOut
Author:	Thanh Nguyen
Date:	08/30/2012
---------------------------------------------------------------------------------------------------
Synopsis: This proc utilize xp_cmdshell to trigger a windows batch program to BCP out data from MSSQL
and write the file to a network drive

---------------------------------------------------------------------------------------------------
Example:
sp_helptext stp_FastTrackOut

EXEC dbo.stp_FastTrackOut 'Person', 'Person', 'STARDATA', '2012-09-18 11:34:00.000', 'devws2'
EXEC dbo.stp_FastTrackOut 'Patient', 'Patient', 'STARDATA', '2012-09-18 11:34:00.000', 'devws2'
EXEC dbo.stp_FastTrackOut 'Guarantor', 'Guarantor', 'STARDATA', '2012-09-18 11:34:00.000', 'devws2'
EXEC dbo.stp_FastTrackOut 'Visit', 'Visit', 'STARDATA', '2012-09-18 11:34:00.000', 'devws2'
EXEC dbo.stp_FastTrackOut 'PersonVisitLogQ', 'PersonVisitLog', 'STARDATA', '2012-09-18 11:34:00.000', 'devws2'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/30/2012	Thanh Nguyen		OPS-13374	Originally created
09/19/2012	Thanh Nguyen					Wrap string @lastModDate with double quote to cover time portion
06/05/2013	Thanh Nguyen					Detect servername, then route to correct folder
12/07/2014	Thanh Nguyen					Add servername COPROSQLCLS01
12/18/2014  Sean Porter			SA-9168		Updating to leverage linked server technology instead of bcp
											Changing to use a proc for every table that way fields can be handled uniquely (topClusterId).
03/18/2015  Sean Porter			SA-9311		Added hostname param for use in deciding linked server
***************************************************************************************************
*/
    BEGIN

        SET NOCOUNT ON;

		/*----------TESTING------------------
		DECLARE	@sourceTable VARCHAR(60)
		, @targetTable VARCHAR(60)
		  , @healthSystemId VARCHAR(64)
		  , @lastModDate VARCHAR(40) -- Must be varchar, not datetime nor smalldatetime

		SELECT	@sourceTable = 'Visit' --e.g. Visit, PersonVisitLog, etc...
			  , @targetTable = 'Visit' --e.g. Visit, PersonVisitLog, etc...
			  , @healthSystemId = 'STARDATA'
			  , @lastModDate = '2012-09-18 11:34:00.000'

			insert into SQLMSIDEV.work_space.dbo.Visit select * from cow..Visit where healthSystemId ='junit' and lastModDate > '12/12/22'

			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Visit  group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Guarantor  group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Patient group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Person group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.PersonVisitLog group by healthSystemId

			select count(*), healthSystemId from SQLMSIDEV.pfr.dbo.Visit  group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.pfr.dbo.Guarantor  group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.pfr.dbo.Patient group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.pfr.dbo.Person group by healthSystemId
			select count(*), healthSystemId from SQLMSIDEV.pfr.dbo.PersonVisitLog group by healthSystemId
			begin tran;
			DELETE FROM SQLMSIDEV.work_space.dbo.Person WHERE healthSystemId = 'STARDATA'
			DELETE FROM SQLMSIDEV.work_space.dbo.Guarantor WHERE healthSystemId = 'STARDATA'
			DELETE FROM SQLMSIDEV.work_space.dbo.Patient WHERE healthSystemId = 'STARDATA'
			DELETE FROM SQLMSIDEV.work_space.dbo.Visit WHERE healthSystemId = 'STARDATA'
			DELETE FROM SQLMSIDEV.work_space.dbo.PersonVisitLog WHERE healthSystemId = 'STARDATA'
			rollback tran; -- commit tran;
		*/

        IF @targetTable = 'Person'
            BEGIN
                EXEC stp_FastTrackOutPerson @healthSystemId, @lastModDate, @hostName
            END
        ELSE
            IF @targetTable = 'Patient'
                BEGIN
                    EXEC dbo.stp_FastTrackOutPatient @healthSystemId, @lastModDate, @hostName
                END
            ELSE
                IF @targetTable = 'Guarantor'
                    BEGIN
                        EXEC dbo.stp_FastTrackOutGuarantor @healthSystemId, @lastModDate, @hostName
                    END
                ELSE
                    IF @targetTable = 'Visit'
                        BEGIN
                            EXEC dbo.stp_FastTrackOutVisit @healthSystemId, @lastModDate, @hostName
                        END
                    ELSE
                        IF @targetTable = 'PersonVisitLog'
                            BEGIN
                                EXEC dbo.stp_FastTrackOutPersonVisitLog @healthSystemId, @lastModDate, @hostName
                            END
    END
#+END_SRC

stp_FastTrackOutGuarantor
#+BEGIN_SRC sql


CREATE PROCEDURE [dbo].stp_FastTrackOutGuarantor
	@healthSystemId VARCHAR(64),
	@lastModDate VARCHAR(40), -- Must be varchar, not datetime nor smalldatetime (this was required for the older version that passd this information to a windows cmd script
	@hostName  VARCHAR(16)
AS
/*
***************************************************************************************************
Name:   dbo.stp_FastTrackOutGuarantor
Author:	Sean Porter
Date:	12/22/2014
---------------------------------------------------------------------------------------------------
Synopsis: This proc copies data from cow to work_space for loading into the OLTP area at that point

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_FastTrackOutGuarantor 'STARDATA', '2022-09-18 11:34:00.000', 'devws2'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
12/22/2014	Sean Porter			SA-9168		Originally created
03/18/2015  Sean Porter			SA-9311		Added hostname param for use in deciding linked server
***************************************************************************************************
*/
	BEGIN

		SET NOCOUNT ON;

		/*----------TESTING------------------
			insert into SQLMSIDEV.work_space.dbo.Guarantor select * from cow..Guarantor where healthSystemId ='junit' and lastModDate > '12/12/22'
		    EXEC dbo.stp_FastTrackOutGuarantor 'junit', '2015-09-18 11:34:00.000'
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Guarantor  group by healthSystemId
		    select count(*), healthSystemId from cow..Guarantor  group by healthSystemId
		*/
		declare @server VARCHAR(16)
		EXEC stp_getPfrLinkedServer @hostName, @server out
		print @server

		DECLARE @sql AS NVARCHAR(MAX)
		SET @sql = 'insert into ' + @server + '.work_space.dbo.Guarantor
		(guarantorId ,
               personId ,
               healthSystemId ,
               modId ,
               fplPercentage ,
               availableCreditLine ,
               creditLineSuggestion ,
               paymentAdvisorCategory ,
               householdIncomeActual ,
               householdSizeActual ,
               householdIncomeEstimate ,
               householdSizeEstimate ,
               creditScore ,
               xml ,
               active ,
               lastModDate ,
               lastModUser ,
               synchId ,
               totalPatientResponsibility ,
               snapshotDate ,
               creditScoreDate ,
               estimatedRecoveryAmt ,
               priorityScore ,
               vxml ,
               topClusterId )
		select guarantorId ,
               personId ,
               healthSystemId ,
               modId ,
               fplPercentage ,
               availableCreditLine ,
               creditLineSuggestion ,
               paymentAdvisorCategory ,
               householdIncomeActual ,
               householdSizeActual ,
               householdIncomeEstimate ,
               householdSizeEstimate ,
               creditScore ,
               xml ,
               active ,
               lastModDate ,
               lastModUser ,
               synchId ,
               totalPatientResponsibility ,
               snapshotDate ,
               creditScoreDate ,
               estimatedRecoveryAmt ,
               priorityScore ,
               vxml ,
        CONVERT(VARBINARY(16), topClusterId) from cow..Guarantor
		where healthSystemId = @hsId and lastModDate > @lmd '

--		PRINT @sql

		EXEC sp_executesql @sql , N'@hsId nvarchar(100), @lmd nvarchar(100)', @hsId=@healthSystemId, @lmd=@lastModDate

	END

#+END_SRC

stp_FastTrackOutVisit
#+BEGIN_SRC sql


CREATE PROCEDURE [dbo].[stp_FastTrackOutVisit]
	@healthSystemId VARCHAR(64),
	@lastModDate VARCHAR(40), -- Must be varchar, not datetime nor smalldatetime (this was required for the older version that passd this information to a windows cmd script
	@hostName  VARCHAR(16)
AS
/*
***************************************************************************************************
Name:	dbo.stp_FastTrackOutVisit
Author:	Sean Porter
Date:	12/22/2014
---------------------------------------------------------------------------------------------------
Synopsis: This proc copies data from cow to work_space for loading into the OLTP area at that point

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_FastTrackOutVisit 'STARDATAAG', '2015-03-20 08:54:00', 'testus1'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
12/22/2014	Sean Porter			SA-9168		Originally created
03/18/2015  Sean Porter			SA-9311		Added hostname param for use in deciding linked server
***************************************************************************************************
*/
	BEGIN

		SET NOCOUNT ON;

		/*----------TESTING------------------
			insert into SQLMSIDEV.work_space.dbo.Visit
			 select * from cow..Visit where healthSystemId ='STARDATAAG' and lastModDate > '2015-03-20 08:54:00'
		    EXEC dbo.stp_FastTrackOutVisit 'junit', '2015-09-18 11:34:00.000'
			select count(*), healthSystemId from SQLMSIDEV.work_space.dbo.Visit  group by healthSystemId
		    select count(*), healthSystemId from cow..Visit  group by healthSystemId
		*/
		PRINT 'hello'
		declare @server VARCHAR(16)
		EXEC stp_getPfrLinkedServer @hostName, @server out
		PRINT @server + ' from ' + @hostName
		DECLARE @sql AS NVARCHAR(MAX)
		SET @sql = 'insert into ' + @server + '.work_space.dbo.Visit
		(visitId ,
               companyId ,
               healthSystemId ,
               patientId ,
               guarantorId ,
               modId ,
               patientAccountNumber ,
               label ,
               description ,
               comment ,
               dateBegin ,
               dateEnd ,
               perpetual ,
               admissionType ,
               preadmitNumber ,
               hospitalService ,
               patientType ,
               financialClass ,
               creditRating ,
               transfertoBadDebtCode ,
               transfertoBadDebtDate ,
               badDebtAgencyCode ,
               badDebtTransferAmount ,
               badDebtRecoveryAmount ,
               deleteAccountIndicator ,
               deleteAccountDate ,
               dischargeDisposition ,
               accountStatus ,
               admitDate ,
               dischargeDate ,
               currentPatientBalance ,
               totalCharges ,
               totalAdjustments ,
               totalPayments ,
               clientFinancialClass ,
               clientPatientType ,
               posAmount ,
               patientResponsibility ,
               catastrophicPercentage ,
               voTreatment ,
               voSuggestion ,
               customField1 ,
               customField2 ,
               xml ,
               active ,
               lastModDate ,
               lastModUser ,
               synchId ,
               lastPaymentDate ,
               patientPayments ,
               vxml ,
               adminHold ,
               accountHoldStatus ,
               insurancePayments ,
               balanceVisible ,
               dbOp ,
               arPostingDate ,
               guarantorPersonVisitLogId ,
               patientPersonVisitLogId ,
               visitNumber ,
               accountBalance ,
               initialPatientResponsibility ,
               outstandingPatientBalance ,
               fileType ,
               billingType ,
               hospitalId ,
               serviceLocation ,
               hasPaymentPlan,
               guarantorCode)
		select visitId ,
               companyId ,
               healthSystemId ,
               patientId ,
               guarantorId ,
               modId ,
               patientAccountNumber ,
               label ,
               description ,
               comment ,
               dateBegin ,
               dateEnd ,
               perpetual ,
               admissionType ,
               preadmitNumber ,
               hospitalService ,
               patientType ,
               financialClass ,
               creditRating ,
               transfertoBadDebtCode ,
               transfertoBadDebtDate ,
               badDebtAgencyCode ,
               badDebtTransferAmount ,
               badDebtRecoveryAmount ,
               deleteAccountIndicator ,
               deleteAccountDate ,
               dischargeDisposition ,
               accountStatus ,
               admitDate ,
               dischargeDate ,
               currentPatientBalance ,
               totalCharges ,
               totalAdjustments ,
               totalPayments ,
               clientFinancialClass ,
               clientPatientType ,
               posAmount ,
               patientResponsibility ,
               catastrophicPercentage ,
               voTreatment ,
               voSuggestion ,
               customField1 ,
               customField2 ,
               xml ,
               active ,
               lastModDate ,
               lastModUser ,
               synchId ,
               lastPaymentDate ,
               patientPayments ,
               vxml ,
               adminHold ,
               accountHoldStatus ,
               insurancePayments ,
               balanceVisible ,
               dbOp ,
               arPostingDate ,
               guarantorPersonVisitLogId ,
               patientPersonVisitLogId ,
               visitNumber ,
               accountBalance ,
               initialPatientResponsibility ,
               outstandingPatientBalance ,
               fileType ,
               billingType ,
               hospitalId ,
               serviceLocation ,
               hasPaymentPlan,
               guarantorCode
			   FROM cow..Visit
		where healthSystemId = @hsId and lastModDate > @lmd '

		PRINT @sql

		EXEC sp_executesql @sql , N'@hsId nvarchar(100), @lmd nvarchar(100)', @hsId=@healthSystemId, @lmd=@lastModDate

	END


#+END_SRC

Loads Pfr, move data from the work_space tables to the pfr tables.
#+BEGIN_SRC sql

CREATE PROCEDURE dbo.p_LoadPfr
    @healthSysId VARCHAR(64) = NULL
AS /*
***************************************************************************************************
Name:	dbo.p_LoadPfr
Author:	David Mitchell
Date:	08/30/2012
---------------------------------------------------------------------------------------------------
Synopsis: This calls sub procs to move data from the work_space tables to the pfr tables.

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.p_LoadPfr 'STARDATA', 'Visit'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/30/2012	David Mitchell		OPS-13374	Originally created

***************************************************************************************************
*/

   /*Generated by SQL Server Migration Assistant for Sybase version 6.0.0.*/

    BEGIN
        EXEC p_cursorLoadPerson @healthSysId
        EXEC p_cursorLoadPatient @healthSysId
        EXEC p_cursorLoadGuarantor @healthSysId
        EXEC p_cursorLoadVisit @healthSysId
        EXEC p_cursorLoadPvl @healthSysId
    END
#+END_SRC

p_cursorLoadPerson
#+BEGIN_SRC sql
CREATE PROCEDURE dbo.p_cursorLoadPerson
   @healthSysId varchar(64) = NULL
AS
   /*Generated by SQL Server Migration Assistant for Sybase version 6.0.0.*/
   BEGIN

      DECLARE
          Person_cursor CURSOR LOCAL FORWARD_ONLY DYNAMIC FOR
            SELECT
               work_space.dbo.Person.personId,
               work_space.dbo.Person.healthSystemId,
               work_space.dbo.Person.lname,
               work_space.dbo.Person.mname,
               work_space.dbo.Person.fname,
               work_space.dbo.Person.addr,
               work_space.dbo.Person.city,
               work_space.dbo.Person.state,
               work_space.dbo.Person.zip,
               work_space.dbo.Person.ssn,
               work_space.dbo.Person.area,
               work_space.dbo.Person.phone,
               work_space.dbo.Person.areaPhoneBusiness,
               work_space.dbo.Person.areaPhoneHome,
               work_space.dbo.Person.citizenship,
               work_space.dbo.Person.countyCode,
               work_space.dbo.Person.deathDate,
               work_space.dbo.Person.deceased,
               work_space.dbo.Person.dob,
               work_space.dbo.Person.gender,
               work_space.dbo.Person.employerName,
               work_space.dbo.Person.employmentStatus,
               work_space.dbo.Person.employmentStopDate,
               work_space.dbo.Person.hireEffectiveDate,
               work_space.dbo.Person.lastUpdateDate,
               work_space.dbo.Person.lastUpdateCompanyId,
               work_space.dbo.Person.maritalStatus,
               work_space.dbo.Person.spouseName,
               work_space.dbo.Person.customField1,
               work_space.dbo.Person.customField2,
               /* xml                ,*/work_space.dbo.Person.active,
               work_space.dbo.Person.modId,
               work_space.dbo.Person.lastModDate,
               work_space.dbo.Person.lastModUser,
               work_space.dbo.Person.synchId,
               work_space.dbo.Person.zip4,
               work_space.dbo.Person.epin,
               work_space.dbo.Person.vxml,
               /*    demoHash            ,      birthDate           ,*/work_space.dbo.Person.topClusterId
            FROM /*,  dbOp*/work_space.dbo.Person

      DECLARE
         @inserted int

      DECLARE
         @updated int

      DECLARE
         @deleted int

      DECLARE
         @currentDate datetime

      DECLARE
         @rowsaffected int

      SELECT @inserted = 0

      SELECT @updated = 0

      SELECT @deleted = 0

      SELECT @currentDate = getdate()

      SELECT @rowsaffected = 0

      EXECUTE dbo.p_PfrLog_Insert
         @procName = 'p_cursorLoadPerson',
         @healthSystemId = @healthSysId,
         @inserted = @inserted,
         @updated = @updated,
         @deleted = @deleted,
         @entryDate = @currentDate,
         @infoMsg = 'Started Person Cursor'

      OPEN Person_cursor

      DECLARE
         @personId varchar(40),
         @healthSystemId varchar(64),
         @lname varchar(75),
         @mname varchar(64),
         @fname varchar(64),
         @addr varchar(128),
         @city varchar(64),
         @state varchar(2),
         @zip varchar(10),
         @ssn varchar(9),
         @area varchar(3),
         @phone varchar(7),
         @areaPhoneBusiness varchar(10),
         @areaPhoneHome varchar(10),
         @citizenship tinyint,
         @countyCode varchar(4),
         @deathDate smalldatetime,
         @deceased tinyint,
         @dob varchar(26),
         @gender varchar(1),
         @employerName varchar(64),
         @employmentStatus varchar(2),
         @employmentStopDate smalldatetime,
         @hireEffectiveDate smalldatetime,
         @lastUpdateDate smalldatetime,
         @lastUpdateCompanyId varchar(32),
         @maritalStatus varchar(250),
         @spouseName varchar(64),
         @customField1 varchar(64),
         @customField2 varchar(64),
         /* @xml                 text          ,*/@active char(1),
         @modId varchar(40),
         @lastModDate smalldatetime,
         @lastModUser varchar(16),
         /*    @synchId             numeric(18,0) ,*/@synchId varchar(40),
         @zip4 varchar(4),
         @epin varchar(17),
         @vxml varchar(255),
         /*@demoHash            varbinary(16) ,  @birthDate           datetime      ,*/@topClusterId varbinary(16)


      /*
      *   ,
      *   @dbOp                varchar(1)
      */
      FETCH Person_cursor
          INTO
            @personId,
            @healthSystemId,
            @lname,
            @mname,
            @fname,
            @addr,
            @city,
            @state,
            @zip,
            @ssn,
            @area,
            @phone,
            @areaPhoneBusiness,
            @areaPhoneHome,
            @citizenship,
            @countyCode,
            @deathDate,
            @deceased,
            @dob,
            @gender,
            @employerName,
            @employmentStatus,
            @employmentStopDate,
            @hireEffectiveDate,
            @lastUpdateDate,
            @lastUpdateCompanyId,
            @maritalStatus,
            @spouseName,
            @customField1,
            @customField2,
            /* xml                ,*/
            @active,
            @modId,
            @lastModDate,
            @lastModUser,
            @synchId,
            @zip4,
            @epin,
            @vxml,

            /*
            *      @demoHash            varbinary(16) ,
            *       @birthDate           datetime      ,
            */
            @topClusterId


      /*
      *   ,
      *       @dbOp                varchar(1)
      */
      WHILE @@FETCH_STATUS = 0

         BEGIN

            UPDATE dbo.Person
               SET
                  /*personId=@personId,*/healthSystemId = @healthSystemId,
                  lname = @lname,
                  mname = @mname,
                  fname = @fname,
                  addr = @addr,
                  city = @city,
                  state = @state,
                  zip = @zip,
                  ssn = @ssn,
                  area = @area,
                  phone = @phone,
                  areaPhoneBusiness = @areaPhoneBusiness,
                  areaPhoneHome = @areaPhoneHome,
                  citizenship = @citizenship,
                  countyCode = @countyCode,
                  deathDate = @deathDate,
                  deceased = @deceased,
                  dob = @dob,
                  gender = @gender,
                  employerName = @employerName,
                  employmentStatus = @employmentStatus,
                  employmentStopDate = @employmentStopDate,
                  hireEffectiveDate = @hireEffectiveDate,
                  lastUpdateDate = @lastUpdateDate,
                  lastUpdateCompanyId = @lastUpdateCompanyId,
                  maritalStatus = @maritalStatus,
                  spouseName = @spouseName,
                  customField1 = @customField1,
                  customField2 = @customField2,
                  /* xml               =@xml                ,*/active = @active,
                  modId = @modId,
                  /*lastModDate        =@lastModDate        ,*/lastModDate = getdate(),
                  /*lastModUser         =@lastModUser         ,*/lastModUser = 'pfrFTu',
                  synchId = @synchId,
                  zip4 = @zip4,
                  epin = @epin,
                  vxml = @vxml,
                  /*   demoHash       =@demoHash       ,      birthDate      =@birthDate      ,*/topClusterId = @topClusterId
            WHERE /*,      @dbOp                varchar(1)*/dbo.Person.personId = @personId

            SELECT @rowsaffected = @@ROWCOUNT

            IF @rowsaffected = 0
               BEGIN

                  INSERT dbo.Person(
                     personId,
                     healthSystemId,
                     lname,
                     mname,
                     fname,
                     addr,
                     city,
                     state,
                     zip,
                     ssn,
                     area,
                     phone,
                     areaPhoneBusiness,
                     areaPhoneHome,
                     citizenship,
                     countyCode,
                     deathDate,
                     deceased,
                     dob,
                     gender,
                     employerName,
                     employmentStatus,
                     employmentStopDate,
                     hireEffectiveDate,
                     lastUpdateDate,
                     lastUpdateCompanyId,
                     maritalStatus,
                     spouseName,
                     customField1,
                     customField2,
                     /* xml                ,*/
                     active,
                     modId,
                     lastModDate,
                     lastModUser,
                     synchId,
                     zip4,
                     epin,
                     vxml,

                     /*
                     *      demoHash       ,
                     *       birthDate      ,
                     */
                     topClusterId)
                     VALUES (
                        /*,      @dbOp                varchar(1)*/@personId,
                        @healthSystemId,
                        @lname,
                        @mname,
                        @fname,
                        @addr,
                        @city,
                        @state,
                        @zip,
                        @ssn,
                        @area,
                        @phone,
                        @areaPhoneBusiness,
                        @areaPhoneHome,
                        @citizenship,
                        @countyCode,
                        @deathDate,
                        @deceased,
                        @dob,
                        @gender,
                        @employerName,
                        @employmentStatus,
                        @employmentStopDate,
                        @hireEffectiveDate,
                        @lastUpdateDate,
                        @lastUpdateCompanyId,
                        @maritalStatus,
                        @spouseName,
                        @customField1,
                        @customField2,
                        /* xml                ,*/@active,
                        @modId,
                        /*@lastModDate        ,*/getdate(),
                        /*@lastModUser         ,*/'pfrFTi',
                        @synchId,
                        @zip4,
                        @epin,
                        @vxml,
                        /*   @demoHash            ,      @birthDate           ,*/@topClusterId/*,      @dbOp*/)

                  SELECT @inserted = @inserted + 1

               END
               /****  END IF ****/
            ELSE
               BEGIN
                  SELECT @updated = @updated + 1
               END
               /**********  END ELSE  ****/

            FETCH Person_cursor
                INTO
                  @personId,
                  @healthSystemId,
                  @lname,
                  @mname,
                  @fname,
                  @addr,
                  @city,
                  @state,
                  @zip,
                  @ssn,
                  @area,
                  @phone,
                  @areaPhoneBusiness,
                  @areaPhoneHome,
                  @citizenship,
                  @countyCode,
                  @deathDate,
                  @deceased,
                  @dob,
                  @gender,
                  @employerName,
                  @employmentStatus,
                  @employmentStopDate,
                  @hireEffectiveDate,
                  @lastUpdateDate,
                  @lastUpdateCompanyId,
                  @maritalStatus,
                  @spouseName,
                  @customField1,
                  @customField2,
                  /* xml                ,*/
                  @active,
                  @modId,
                  @lastModDate,
                  @lastModUser,
                  @synchId,
                  @zip4,
                  @epin,
                  @vxml,

                  /*
                  *      @demoHash            varbinary(16) ,
                  *       @birthDate           datetime      ,
                  */
                  @topClusterId/*,      @dbOp                varchar(1)*/

         END
         /*************  END WHILE LOOP  *************/

      CLOSE Person_cursor

      DEALLOCATE Person_cursor

      SELECT @currentDate = getdate()

      EXECUTE dbo.p_PfrLog_Insert
         @procName = 'p_cursorLoadPerson',
         @healthSystemId = @healthSysId,
         @inserted = @inserted,
         @updated = @updated,
         @deleted = @deleted,
         @entryDate = @currentDate,
         @infoMsg = 'Finished Person Cursor'

   END
   /**********  END PROC  *****************/
#+END_SRC

Empties workspace
#+BEGIN_SRC sql
CREATE PROCEDURE dbo.p_clearPfrWorkSpace
AS
   /*Generated by SQL Server Migration Assistant for Sybase version 6.0.0.*/
   BEGIN

      TRUNCATE TABLE work_space.dbo.PersonVisitLog

      TRUNCATE TABLE work_space.dbo.Visit

      TRUNCATE TABLE work_space.dbo.Guarantor

      TRUNCATE TABLE work_space.dbo.Patient

      TRUNCATE TABLE work_space.dbo.Person

   END
#+END_SRC


*** BulkPfrClusterer (CLUSTERER)
**** CassBarcodeLoader
creates missing cpo barcode records in CpoBarcode
#+BEGIN_SRC sql
insert into cow.dbo.CpoBarcode (ID) "
        + "select ID from cow.dbo.CpoPfrStaging cpo  WITH (NOLOCK)"
        + "where currentHealthSystemId = ? and not exists (select ID from cow.dbo.CpoBarcode where ID=cpo.ID)"
#+END_SRC

updates checksum for cpo..Barcode records
#+BEGIN_SRC sql
update cow.dbo.Barcode set chksum=checksum(isnull(addr,''),isnull(city,''),isnull(state,''),isnull(zip,'')) where chksum is null
#+END_SRC

Fills in Cpo Barcode for Patients and Guarantors
#+BEGIN_SRC sql
update cow.dbo.CpoBarcode set guarantorBarcodeId=barcodeId  "
        + "from cow.dbo.CpoBarcode cbc,cow.dbo.CpoPfrStaging cpo WITH (NOLOCK),cow.dbo.Barcode bc  WITH (NOLOCK)"
        + "where cpo.currentHealthSystemId = ? and cbc.ID=cpo.ID and cbc.guarantorBarcodeId is null and "
        + " rtrim(ltrim(isnull(cpo.currentGuarantorAddress1,'')+' '+isnull(cpo.currentGuarantorAddress2,''))) "
        + " = isnull(bc.addr,'') "
        + " and isnull(cpo.currentGuarantorCity,'')=isnull(bc.city,'') "
        + " and isnull(cpo.currentGuarantorState,'')=isnull(bc.state,'') "
        + " and isnull(cpo.currentGuarantorZip,'')=isnull(bc.zip,'') "
        + " and bc.chksum=checksum(rtrim(ltrim(isnull(cpo.currentGuarantorAddress1,'')+' '+isnull(cpo.currentGuarantorAddress2,''))), "
        + "    isnull(cpo.currentGuarantorCity,''),isnull(cpo.currentGuarantorState,''),isnull(cpo.currentGuarantorZip,''))

update cow.dbo.CpoBarcode set patientBarcodeId=barcodeId  "
        + "from cow.dbo.CpoBarcode cbc,cow.dbo.CpoPfrStaging cpo  WITH (NOLOCK),cow.dbo.Barcode bc  WITH (NOLOCK)"
        + "where cpo.currentHealthSystemId = ? and cbc.ID=cpo.ID and cbc.patientBarcodeId is null and " // may want to add some cpo.addr IS NOT NULL checks here to prevent useless process of certain data (agency)
        + " rtrim(ltrim(isnull(cpo.currentPatientAddress1,'')+' '+isnull(cpo.currentPatientAddress2,''))) "
        + " = isnull(bc.addr,'') "
        + " and isnull(cpo.currentPatientCity,'')=isnull(bc.city,'') "
        + " and isnull(cpo.currentPatientState,'')=isnull(bc.state,'') "
        + " and isnull(cpo.currentPatientZip,'')=isnull(bc.zip,'') "
        + " and bc.chksum=checksum(rtrim(ltrim(isnull(cpo.currentPatientAddress1,'')+' '+isnull(cpo.currentPatientAddress2,''))), "
        + "    isnull(cpo.currentPatientCity,''),isnull(cpo.currentPatientState,''),isnull(cpo.currentPatientZip,''))
#+END_SRC

Iterates over CpoBarcodeRecords which have null patient or guarantor barcode ids
and processes them with satori
#+BEGIN_SRC sql
select distinct  rtrim(ltrim(isnull(cpo.currentGuarantorAddress1,'')+' '+isnull(cpo.currentGuarantorAddress2,''))) as addr, "
        + "currentGuarantorCity as city,currentGuarantorState as state,currentGuarantorZip as zip "
        + "from cow.dbo.CpoBarcode cbc WITH (NOLOCK),cow.dbo.CpoPfrStaging cpo  WITH (NOLOCK) where currentHealthSystemId = ? "
        + "and cbc.ID=cpo.ID and cbc.guarantorBarcodeId is null";

"select distinct  rtrim(ltrim(isnull(cpo.currentPatientAddress1,'')+' '+isnull(cpo.currentPatientAddress2,''))) as addr, "
        + "currentPatientCity as city,currentPatientState as state,currentPatientZip as zip "
        + "from cow.dbo.CpoBarcode cbc WITH (NOLOCK),cow.dbo.CpoPfrStaging cpo  WITH (NOLOCK) where currentHealthSystemId = ? "
        + "and cbc.ID=cpo.ID and cbc.patientBarcodeId is null
#+END_SRC

If above step failes then fills in checksum and cpo barcodes again

**** Populates CpoQ from CpoPfrStaging and cow..Barcode
with records which don't have guarantorTopClusterId set in CpoBarcode (So that column should get populated further down the road)
#+BEGIN_SRC sql
  insert into CpoQ (ID,fname,lname,sbarcode,ssn,dobInt,healthSystemId)
                    select cpo.ID,currentGuarantorFirstName as fname, currentGuarantorLastName as lname,
                   case when
                     sbarcode is null or addrType='G' //
                     or (city is null and state is null and zip is null) //
                     or (addr is null)  //
                     or len(sbarcode)<5 //
                      then 'AC:'cpo.currentAccountNumber'@'cpo.currentCompanyid
                   else sbarcode   end as sbarcode
                   , currentGuarantorSSN as ssn,
                    datepart(yy,currentGuarantorDOB)*10000  datepart(mm,currentGuarantorDOB)*100  datepart(dd,currentGuarantorDOB) as dobInt,
                    currentHealthSystemId as healthSystemId
                    from cow.dbo.CpoPfrStaging cpo  WITH (NOLOCK), cow.dbo.CpoBarcode bc,
                    cow.dbo.Barcode b where currentHealthSystemId = ?
                    and cpo.ID = bc.ID and bc.guarantorBarcodeId=b.barcodeId and bc.guarantorTopClusterId is null

  insert into CpoQ (ID,fname,lname,sbarcode,ssn,dobInt,healthSystemId)
                    select cpo.ID,currentPatientFirstName as fname, currentPatientLastName as lname,
                   case when
                        sbarcode is null or addrType='G' //
                        or (city is null and state is null and zip is null) //
                        or (addr is null)  //
                        or len(sbarcode)<5 //
                         then 'AC:'cpo.currentAccountNumber'@'cpo.currentCompanyid
                   else sbarcode   end as sbarcode
                   , currentPatientSSN as ssn,
                    datepart(yy,currentPatientDOB)*10000  datepart(mm,currentPatientDOB)*100  datepart(dd,currentPatientDOB) as dobInt,
                    currentHealthSystemId as healthSystemId
                    from cow.dbo.CpoPfrStaging cpo WITH (NOLOCK)
                    join cow.dbo.CpoBarcode bc WITH (NOLOCK) on cpo.ID = bc.ID
                    join cow.dbo.Barcode b WITH (NOLOCK) on bc.patientBarcodeId=b.barcodeId
                    join searchAmericaDW.dbo.company c WITH (NOLOCK) on cpo.currentCompanyid = c.companyid
                    where bc.patientTopClusterId is null
                    and currentHealthSystemId = ?
                    and c.companyType = 'H'

#+END_SRC

***** Populates AddrCluster, SsnCluster from CpoQ
****** AddrCluster Inserts
fname, lname, sbarcode, ssn, dobInt
Source table: CpoQ

1. Creates records in AddrCluster where no field is null and no record exists matching the fields
Sets requiresBirthYear=1 for records with different dobInt and same fname,lname,sbarcode
code: iac1flasb

2. Creates records in AddrCluster where only dobInt is null
and no record exists matching the fields except dobInt and requiresBirthYear is NULL (no records with conflicting dobInts)
Sets requiresSsn=1 for records with different ssn and same fname,lname,sbarcode
code: iac2flas

3. Creates records in AddrCluster where only ssn is null
and no record exists matching the fields except ssn and requiresSsn is null
Sets requiresBirthYear=1 for records with different dobInt and same fname,lname,sbarcode
Sets requiresSsn=1 for records with different ssn and same fname,lname,sbarcode
Code: iac3flab

4. Creates records in AddrCluster where only ssn,dobInt is null
and no record exists matching the fields except ssn,dobInt
and requiresSsn is null and requiresBirthYear is null
Sets requiresBirthYear=1 for records with different dobInt and same fname,lname,sbarcode
Sets requiresSsn=1 for records with different ssn and same fname,lname,sbarcode
Code: iac4fla

5. Creates records in SsnCluster where no record exists with the given fname,ssn,dobInt,healthSystemId




****** Stored Proc
#+BEGIN_SRC sql
        update("insert into AddrCluster (addrClusterId,fname,lname,sbarcode,ssn,dobInt,"
            + " healthSystemId,lastModUser,lastModDate) "
            + " select newid(),fname,lname,sbarcode,ssn,dobInt,healthSystemId,"
            + " 'iac1flasb',getdate() from CpoQ c"
            + " where sbarcode is not null and fname is not null and lname is not null "
            + " and ssn is not null and dobInt is not null"
            + " and not exists ( select * from AddrCluster m where m.fname=c.fname and m.lname=c.lname"
            + " and m.sbarcode=c.sbarcode and isnull(m.ssn,'')=isnull(c.ssn,'')"
            + " and isnull(m.dobInt,0)=isnull(c.dobInt,0)" + " and m.healthSystemId=c.healthSystemId) "
            + "group by fname,lname,sbarcode,ssn,dobInt,healthSystemId ");
        //null birth years, this should match an existing birth year; but has ssn
        if(rowsUpdated > 0) {
            markAddrClustersRequireBirthYears(healthSystemId);
        }
        update("insert into AddrCluster (addrClusterId,fname,lname,sbarcode,ssn,dobInt,"
            + "  healthSystemId,lastModUser,lastModDate) "
            + " select newid(),fname,lname,sbarcode,ssn,dobInt,healthSystemId, 'iac2flas',getdate()"
            + " from CpoQ c where  sbarcode is not null and ssn is not null and fname is not null"
            + "  and lname is not null and dobInt is null and "
            + "  not exists ( select * from AddrCluster m where m.fname=c.fname and"
            + "  m.lname=c.lname and m.sbarcode=c.sbarcode and m.ssn=c.ssn and"
            + "  m.healthSystemId=c.healthSystemId and m.requiresBirthYear is null) "
            + " group by fname,lname,sbarcode,ssn,dobInt ,healthSystemId");
        //null ssns but has birth years
        if(rowsUpdated > 0) {
            markAddrClustersRequireSsn(healthSystemId);
        }
        update("insert into AddrCluster (addrClusterId,fname,lname,sbarcode,ssn,dobInt,"
            + "  healthSystemId,lastModUser,lastModDate) "
            + " select newid(),fname,lname,sbarcode,ssn,dobInt,healthSystemId,'iac3flab',getdate()"
            + " from CpoQ c where  sbarcode is not null and ssn is null  and fname is not null"
            + "  and lname is not null and dobInt is not null and "
            + "  not exists ( select * from AddrCluster m where m.fname=c.fname and m.lname=c.lname"
            + "  and m.sbarcode=c.sbarcode and m.dobInt=c.dobInt"
            + "  and m.healthSystemId=c.healthSystemId and m.requiresSsn is null)"
            + " group by fname,lname,sbarcode,ssn,dobInt,healthSystemId");
        //null birth years and null ssns
        if(rowsUpdated > 0) {
            markAddrClustersRequireBirthYears(healthSystemId);
            markAddrClustersRequireSsn(healthSystemId);
        }
        //both null ssns and null birth years
        update("insert into AddrCluster (addrClusterId,fname,lname,sbarcode,ssn,dobInt,"
            + " healthSystemId,lastModUser,lastModDate) "
            + " select newid(),fname,lname,sbarcode,ssn,dobInt,healthSystemId,'iac4fla',getdate()"
            + " from CpoQ c"
            + "  where sbarcode is not null and ssn is null  and fname is not null and lname is not null"
            + "  and dobInt is null and "
            + "  not exists ( select * from AddrCluster m where m.fname=c.fname and m.lname=c.lname and"
            + "  m.sbarcode=c.sbarcode  and m.healthSystemId=c.healthSystemId "
            + "  and m.requiresSsn is null and m.requiresBirthYear is null) "
            + "  group by fname,lname,sbarcode,ssn,dobInt,healthSystemId");
        if(rowsUpdated > 0) {
            markAddrClustersRequireBirthYears(healthSystemId);
            markAddrClustersRequireSsn(healthSystemId);
        }
        //if(true) return;
        //insert ssn clusters
        //--idea: its not necessary for the SsnLookup table to have all the SsnLookups in it, just the valid SSNs, call it SsnLookup
        update(
            "insert into SsnCluster (ssnClusterId,fname,ssn,dobInt,healthSystemId,lastModUser,lastModDate) "
                + "  select newid(),fname,ssn,dobInt,healthSystemId,'isc1fsb',getdate() from CpoQ c "
                + " where c.fname is not null and c.ssn is not null and c.dobInt is not null and c.healthSystemId=? and "
                + "  not exists ( select * from SsnCluster m where m.fname=c.fname "
                + " and m.ssn=c.ssn and m.dobInt=c.dobInt and m.healthSystemId=c.healthSystemId) "
                + " group by fname,ssn,dobInt,healthSystemId ", healthSystemId);
        if(rowsUpdated > 0) markSsnClustersRequireBirthYear(healthSystemId);
        //Link from address clusters to ssn clusters
        //--this can only match one since using all columns
        update("update AddrCluster set ssnClusterId=c.ssnClusterId,"
            + " lastModUser=substring('uac1fsb;'+m.lastModUser,1,16) " + " from AddrCluster m,SsnCluster c "
            + " where  m.healthSystemId=? and m.healthSystemId=c.healthSystemId and m.fname=c.fname "
            + "  and m.ssn=c.ssn and isnull(m.dobInt,0)=isnull(c.dobInt,0)"
            + "  and m.ssnClusterId is null", healthSystemId);
        //--we will make sure that we match 1 and only 1
        update("update AddrCluster set ssnClusterId=c.ssnClusterId,"
            + " lastModUser=substring('uac2fs;'+m.lastModUser,1,16) " + " from AddrCluster m,SsnCluster c "
            + " where m.healthSystemId=? and m.healthSystemId=c.healthSystemId " + " and m.fname=c.fname "
            + " and m.ssn=c.ssn and m.dobInt is null and c.dobInt is not null"
            + " and c.requiresBirthYear is null and m.ssnClusterId is null", healthSystemId);
        //build the clusters!
        update("insert into TopCluster (topClusterId,ssnClusterId,healthSystemId,lastModUser,lastModDate)"
            + " select newid(),ssnClusterId,healthSystemId,'itc1s',getdate() from SsnCluster a "
            + " where healthSystemId=? " //
            + " and not exists (select * from TopCluster s where s.ssnClusterId=a.ssnClusterId)",
            healthSystemId);
        update("insert into TopCluster (topClusterId,addrClusterId,healthSystemId,lastModUser,lastModDate)"
            + "  select newid(),addrClusterId,healthSystemId,'itc2a',getdate() from AddrCluster a " //
            + " where healthSystemId=? and a.ssnClusterId is null"
            + "  and not exists (select * from TopCluster s where s.addrClusterId=a.addrClusterId)",
            healthSystemId);
        //update the top cluster cache on the addr cluster records
        update("update AddrCluster set topClusterId=t.topClusterId from AddrCluster a,TopCluster t"
            + " where a.ssnClusterId = t.ssnClusterId and a.topClusterId is null"
            + " and a.healthSystemId=t.healthSystemId and a.healthSystemId="
            + Sybase.quoteValue(healthSystemId));
        update("update AddrCluster set topClusterId=t.topClusterId from AddrCluster a,TopCluster t"
            + " where a.addrClusterId=t.addrClusterId and a.topClusterId is null"
            + " and a.healthSystemId=t.healthSystemId and a.healthSystemId=?", healthSystemId);
        //the next step is to fill in the CpoBarcode table
        //--known birth years and has ssn.  Null birth years don't match anything
        updateViaCpoTopQ(
            "uQtc1fbs",
            " from CpoQ c with (nolock),SsnCluster s with (nolock),TopCluster sp with (nolock)"
                + " where c.fname=s.fname and c.dobInt = s.dobInt and c.dobInt is not null"
                + " and c.ssn=s.ssn"
                + " and s.ssnClusterId = sp.ssnClusterId and c.topClusterId is null "
                + " and c.healthSystemId=? and sp.healthSystemId=c.healthSystemId and s.healthSystemId=c.healthSystemId",
            healthSystemId);
        //--null years matching known years - once & only once
        updateViaCpoTopQ(
            "uQtc2fbs",
            " from CpoQ c with (nolock),SsnCluster s with (nolock),TopCluster sp with (nolock)"
                + " where c.fname=s.fname and c.dobInt is null and s.dobInt is not null and c.ssn=s.ssn"
                + "  and s.ssnClusterId = sp.ssnClusterId and c.topClusterId is null"
                + "  and s.requiresBirthYear is null "
                + " and c.healthSystemId=? and sp.healthSystemId=c.healthSystemId and s.healthSystemId=c.healthSystemId",
            healthSystemId);
        //--both empty birth years
        updateViaCpoTopQ(
            "uQtc1fNbs",
            " from CpoQ c with (nolock),SsnCluster s with (nolock),TopCluster sp with (nolock)"
                + " where c.fname=s.fname and c.dobInt is null and s.dobInt is null and c.ssn=s.ssn"
                + " and s.ssnClusterId = sp.ssnClusterId and c.topClusterId is null"
                + " and c.healthSystemId=? and sp.healthSystemId=c.healthSystemId and s.healthSystemId=c.healthSystemId",
            healthSystemId);
        //--AddrCluster everything matches but not nulls
        updateViaCpoTopQ(
            "uQtc3flasb",
            " from CpoQ c with (nolock),AddrCluster m with (nolock)"
                + " where m.fname=c.fname and m.lname=c.lname and m.sbarcode=c.sbarcode"
                + " and m.ssn=c.ssn and m.ssn is not null and m.dobInt=c.dobInt and m.dobInt is not null "
                + " and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId",
            healthSystemId);
        //--AddrCluster the ssn is known, the dob is not known and hence won't be used...
        //but the ssn + first and last and sbarcode is good enough
        updateViaCpoTopQ("uQtc4flas", " from CpoQ c with (nolock),AddrCluster m with (nolock)"
            + " where m.fname=c.fname and m.lname=c.lname and m.sbarcode=c.sbarcode"
            + " and c.dobInt is null and m.requiresBirthYear is null and m.dobInt is not null "
            + " and m.ssn=c.ssn and m.ssn is not null and c.topClusterId is null and c.healthSystemId=? "
            + " and c.healthSystemId=m.healthSystemId", healthSystemId);
        //--AddrCluster the ssn is null, then birthdate must match
        updateViaCpoTopQ("uQtc5flab", " from CpoQ c with (nolock),AddrCluster m with (nolock)"
            + " where m.fname=c.fname and m.lname=c.lname and m.sbarcode=c.sbarcode and c.ssn is null"
            + " and m.requiresSsn is null and m.ssn is not null "
            + " and m.dobInt=c.dobInt and m.dobInt is not null "
            + " and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId ",
            healthSystemId);
        //--the ssn is null but it is not required, the birthdate doesn't matter since it is not required
        updateViaCpoTopQ("utc6fla", " from CpoQ c with (nolock),AddrCluster m with (nolock)"
            + " where m.fname=c.fname and m.lname=c.lname and m.sbarcode=c.sbarcode"
            + " and c.dobInt is null and c.ssn is null "
            + " and m.requiresBirthYear is null and m.requiresSsn is null"
            + " and m.dobInt is not null and m.ssn is not null"
            + " and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId ",
            healthSystemId);
        // --AddrCluster everything matches including null stuff
        updateViaCpoTopQ("uQtc3flaNsNb", " from CpoQ c with (nolock),AddrCluster m with (nolock)"
            + " where m.fname=c.fname and m.lname=c.lname and m.sbarcode=c.sbarcode"
            + " and isnull(m.ssn,'')=isnull(c.ssn,'') and isnull(m.dobInt,0)=isnull(c.dobInt,0)"
            + " and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId",
            healthSystemId);

        //        //for the remaining CpoQ entries just give transientCodes
        //        update("update CpoQ set topClusterId=m.topClusterId,lastModUser='uQtc6tc1'"
        //            + " from CpoQ c,TopCluster m where c.companyId+c.accountNumber+c.fname+c.lname=m.transientCode "
        //            + "and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId", healthSystemId);
        //
        //        update("insert into TopCluster (topClusterId,lastModUser,lastModDate,healthSystemId,transientCode) "
        //            + " select newid(),'Incomplete',getdate(),healthSystemId,companyId+accountNumber+fname+lname from CpoQ"
        //            + " where topClusterId is null and healthSystemId=?", healthSystemId);
        //
        //        update("update CpoQ set topClusterId=m.topClusterId,lastModUser='uQtc6tc2'"
        //            + " from CpoQ c,TopCluster m where c.companyId+c.accountNumber+c.fname+c.lname=m.transientCode "
        //            + "and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=m.healthSystemId", healthSystemId);
        //
        ///for the remaining CpoQ entries just give bogus ids
        updateViaCpoTopQ("uQtc6ID",
            " from CpoQ c with (nolock),TopCluster sp with (nolock) where c.ID=sp.poId "
                + "and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=sp.healthSystemId",
            healthSystemId);
        update("insert into TopCluster (topClusterId,lastModUser,lastModDate,healthSystemId,poId) "
            + " select newid(),'Incomplete',getdate(),healthSystemId,ID from CpoQ"
            + " where topClusterId is null and healthSystemId=?", healthSystemId);
        updateViaCpoTopQ("uQtc6ID2",
            " from CpoQ c with (nolock),TopCluster sp with (nolock) where c.ID=sp.poId "
                + "and c.topClusterId is null and c.healthSystemId=? and c.healthSystemId=sp.healthSystemId",
            healthSystemId);
#+END_SRC

***** Updates guarantor top cluster Id from CpoQ
#+BEGIN_SRC sql
update CpoBarcode set guarantorTopClusterId=m.topClusterId,"
            + " guarantorTopClusterReason=m.lastModUser "
            + " from CpoQ m,CpoBarcode c where c.ID=m.ID and m.healthSystemId=?
#+END_SRC

Executes previous three steps for patients as well


*** LoadCowSource (LOAD_COW)

stp_PFR_PopulatePersonGur
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_PopulatePersonGur]

@HealthSystemId VARCHAR(100)


AS
/*
***************************************************************************************************
Name:	dbo.stp_PFR_PopulatePersonGur
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_PopulatePersonGur] 'STARDATA'
sp_helptext stp_PFR_PopulatePersonGur


ORIGINAL CODE
INSERT  INTO Person
        ( dbOp ,
          personId ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                guarantorTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIGP' AS lastModUser
        FROM    CpoBarcodeView cpo
        WHERE   NOT EXISTS ( SELECT *
                             FROM   Person
                             WHERE  topClusterId = cpo.guarantorTopClusterId )
                AND currentHealthSystemId = '0014000000FAiSb'
                AND guarantorTopClusterId IS NOT NULL
        GROUP BY guarantorTopClusterId ,
                currentHealthSystemId


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;


DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
set @procName = OBJECT_NAME(@@PROCID)

SET @ErrorMessage = 'Start SP Step 1 for HealthSystem: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

BEGIN
--IF NOT EXISTS ( SELECT *
--                           FROM   Person
--                         JOIN dbo.CpoBarcodeView cpo ON topClusterId = cpo.guarantorTopClusterId )


INSERT  INTO Person
        ( dbOp ,
          personId ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                guarantorTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIGP' AS lastModUser
        FROM    CpoBarcodeView cpo
        WHERE currentHealthSystemId = @HealthSystemId
				AND  NOT EXISTS ( SELECT *
                             FROM   Person
                             WHERE healthSystemId =@HealthSystemId AND topClusterId = cpo.guarantorTopClusterId )
                AND guarantorTopClusterId IS NOT NULL
        GROUP BY guarantorTopClusterId ,
                currentHealthSystemId

END


SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 1: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



END
#+END_SRC

stp_PFR_PopulatePersonPat
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_PopulatePersonPat]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	dbo.stp_PFR_PopulatePersonCOW
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_PopulatePersonPat] 'STARDATA'

ORIGINAL CODE

INSERT  INTO Person
        ( dbOp ,
          personId ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                patientTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIPP' AS lastModUser
        FROM    CpoBarcodeView cpo
        WHERE   NOT EXISTS ( SELECT *
                             FROM   Person
                             WHERE  topClusterId = cpo.patientTopClusterId )
                AND currentHealthSystemId = '0014000000FAiSb'
                AND patientTopClusterId IS NOT NULL
        GROUP BY patientTopClusterId ,
                currentHealthSystemId


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @ErrorMessage = 'Start SP Step 2 for Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

BEGIN
--        IF NOT EXISTS ( SELECT  *
--                        FROM    Person
--                                JOIN dbo.CpoBarcodeView cpo ON cpo.currentHealthSystemId = healthSystemId
--                                                              AND topClusterId = cpo.patientTopClusterId )
            INSERT  INTO Person
                    ( dbOp ,
                      personId ,
                      topClusterId ,
                      healthSystemId ,
                      lastModDate ,
                      lastModUser
                    )

                    SELECT  'I' ,
                            NEWID() ,
                            patientTopClusterId ,
                            currentHealthSystemId ,
                            GETDATE() AS lastModDate ,
                            'buIPP' AS lastModUser
                       FROM    CpoBarcodeView cpo
        WHERE currentHealthSystemId = @HealthSystemId
		AND  NOT EXISTS ( SELECT *
                             FROM   Person
                             WHERE healthSystemId  = @HealthSystemId AND topClusterId = cpo.patientTopClusterId )
                AND patientTopClusterId IS NOT NULL
        GROUP BY patientTopClusterId ,
                currentHealthSystemId
END


SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 2: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



    END
#+END_SRC

stp_PFR_UpdatePersonGur
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdatePersonGur]

@HealthSystemId VARCHAR(100)

AS
/*
***************************************************************************************************
Name:	dbo.stp_PFR_UpdatePersonGur
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_UpdatePersonGur] '0014000000FAiSb'



ORIGINAL CODE

UPDATE  Person
SET     lastUpdateDate = CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                         cpo.currentDischargeDate,
                                                         '01/01/1901')) ,
        synchId = cpo.ID ,
        dbOp = ISNULL(dbOp, 'U') ,
        lname = cpo.currentGuarantorLastName ,
        fname = cpo.currentGuarantorFirstName ,
        mname = cpo.currentGuarantorMiddleInitial ,
        addr = cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                         cpo.currentGuarantorAddress2) ,
        city = cpo.currentGuarantorCity ,
        state = cpo.currentGuarantorState ,
        zip = cpo.currentGuarantorZip ,
        areaPhoneHome = SUBSTRING(cpo.currentGuarantorHomePhone, 1, 10) ,
        ssn = cpo.currentGuarantorSSN ,
        dob = CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
        lastModDate = GETDATE() ,
        lastModUser = 'buUGP'
--select *
FROM    Person p ,
        CpoBarcodeView cpo
WHERE   p.topClusterId = guarantorTopClusterId
        AND p.healthSystemId = '0014000000FAiSb'
        AND healthSystemId = currentHealthSystemId
        AND ISNULL(lastUpdateDate, '01/01/1901') <= CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                              cpo.currentDischargeDate,
                                                              '01/01/1901'))
        AND ISNULL(synchId, 0) < cpo.ID
        AND ( ISNULL(ssn, '') <> ISNULL(currentGuarantorSSN, '')
              OR ISNULL(city, '') <> ISNULL(currentGuarantorCity, '')
              OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                              cpo.currentGuarantorAddress2),
                                            '')
              OR ISNULL(fname, '') <> ISNULL(currentGuarantorFirstName, '')
              OR ISNULL(mname, '') <> ISNULL(currentGuarantorMiddleInitial, '')
              OR ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentGuarantorHomePhone,
                                                              1, 10), '')
              OR ISNULL(zip, '') <> ISNULL(currentGuarantorZip, '')
              OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentGuarantorDOB, 101),
                                           '')
              OR ISNULL(state, '') <> ISNULL(currentGuarantorState, '')
              OR ISNULL(lname, '') <> ISNULL(currentGuarantorLastName, '')
            )


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		       OPS-12347	Originally ALTERd
11/05/2014 Sean Porter	       SA-9115		Changed where clause to leverage partition of the table being updated
03/23/2015 Jaideep Umraiya     SA-9278      Start recording zip 4 during the Load Cow Source
05/19/2015 Jaideep Umraiya     SA-9417     Alter procedure to record cass corrected zip5,zip4
***************************************************************************************************
*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;


DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 3 For HealthSystem: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


UPDATE  Person
SET     lastUpdateDate = CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                         cpo.currentDischargeDate,
                                                         '01/01/1901')) ,
        synchId = cpo.ID ,
        dbOp = ISNULL(dbOp, 'U') ,
        lname = cpo.currentGuarantorLastName ,
        fname = cpo.currentGuarantorFirstName ,
        mname = cpo.currentGuarantorMiddleInitial ,
        addr = cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                         cpo.currentGuarantorAddress2) ,
        city = cpo.currentGuarantorCity ,
        state = cpo.currentGuarantorState ,
        zip4 = Barcode.cassZip4,
        zip = COALESCE(Barcode.cassZip5, Barcode.cassZip, cpo.currentGuarantorZip),
        areaPhoneHome = SUBSTRING(cpo.currentGuarantorHomePhone, 1, 10) ,
        ssn = cpo.currentGuarantorSSN ,
        dob = CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
        lastModDate = GETDATE() ,
        lastModUser = 'buUGP'

--SELECT *
FROM    Person p
INNER JOIN CpoBarcodeView cpo ON healthSystemId = currentHealthSystemId
INNER JOIN Barcode ON Barcode.barcodeId=cpo.guarantorBarcodeId
        Where p.healthSystemId = @HealthSystemId
        AND p.topClusterId = guarantorTopClusterId
        AND ISNULL(lastUpdateDate, '01/01/1901') <= CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                              cpo.currentDischargeDate,
                                                              '01/01/1901'))
        AND ISNULL(synchId, 0) < cpo.ID
        AND ( ISNULL(ssn, '') <> ISNULL(currentGuarantorSSN, '')
              OR ISNULL(p.city, '') <> ISNULL(currentGuarantorCity, '')
              OR ISNULL(p.addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                              cpo.currentGuarantorAddress2),
                                            '')
              OR ISNULL(fname, '') <> ISNULL(currentGuarantorFirstName, '')
              OR ISNULL(mname, '') <> ISNULL(currentGuarantorMiddleInitial, '')
              OR ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentGuarantorHomePhone,
                                                              1, 10), '')
              OR ISNULL(p.zip, '') <> ISNULL(COALESCE(Barcode.cassZip5, Barcode.cassZip, cpo.currentGuarantorZip), '')
              OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentGuarantorDOB, 101),
                                           '')
              OR ISNULL(p.state, '') <> ISNULL(currentGuarantorState, '')
              OR ISNULL(lname, '') <> ISNULL(currentGuarantorLastName, '')
            )



SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 3: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP For HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



END
#+END_SRC

stp_PFR_UpdatePersonPat
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdatePersonPat]

@HealthSystemId VARCHAR(100)

AS
/*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdatePersonPat]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_UpdatePersonPat] '0014000000FAiSb'

UPDATE  Person
SET     lastUpdateDate = CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                         cpo.currentDischargeDate,
                                                         '01/01/1901')) ,
        synchId = cpo.ID ,
        dbOp = ISNULL(dbOp, 'U') ,
        lname = cpo.currentPatientLastName ,
        fname = cpo.currentPatientFirstName ,
        mname = cpo.currentPatientMiddleInitial ,
        addr = cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                         cpo.currentPatientAddress2) ,
        city = cpo.currentPatientCity ,
        state = cpo.currentPatientState ,
        zip = cpo.currentPatientZip ,
        areaPhoneHome = SUBSTRING(cpo.currentPatientHomePhone, 1, 10) ,
        ssn = cpo.currentPatientSSN ,
        dob = CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
        lastModDate = GETDATE() ,
        lastModUser = 'buUPP'
select *
FROM    Person p ,
        CpoBarcodeView cpo
WHERE   p.topClusterId = patientTopClusterId
        AND p.healthSystemId = '0014000000FAiSb'
        AND healthSystemId = currentHealthSystemId
        AND ISNULL(lastUpdateDate, '01/01/1901') <= CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                              cpo.currentDischargeDate,
                                                              '01/01/1901'))
        AND ISNULL(synchId, 0) < cpo.ID
        AND ( ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentPatientHomePhone,
                                                            1, 10), '')
              OR ISNULL(state, '') <> ISNULL(currentPatientState, '')
              OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentPatientDOB, 101),
                                           '')
              OR ISNULL(mname, '') <> ISNULL(currentPatientMiddleInitial, '')
              OR ISNULL(city, '') <> ISNULL(currentPatientCity, '')
              OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                                              cpo.currentPatientAddress2),
                                            '')
              OR ISNULL(fname, '') <> ISNULL(currentPatientFirstName, '')
              OR ISNULL(lname, '') <> ISNULL(currentPatientLastName, '')
              OR ISNULL(ssn, '') <> ISNULL(currentPatientSSN, '')
              OR ISNULL(zip, '') <> ISNULL(currentPatientZip, '')
            )


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T				OPS-12347	Originally ALTERd
11/05/2014 Sean Porter			SA-9115		Changed where clause to leverage partition of the table being updated
03/23/2015 Jaideep Umraiya      SA-9278     Start recording zip 4 during the Load Cow Source
05/19/2015 Jaideep Umraiya      SA-9417     Alter procedure to record cass corrected zip5,zip4

***************************************************************************************************
*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;


DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 4 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage




UPDATE  Person
SET     lastUpdateDate = CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                         cpo.currentDischargeDate,
                                                         '01/01/1901')) ,
        synchId = cpo.ID ,
        dbOp = ISNULL(dbOp, 'U') ,
        lname = cpo.currentPatientLastName ,
        fname = cpo.currentPatientFirstName ,
        mname = cpo.currentPatientMiddleInitial ,
        addr = cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                         cpo.currentPatientAddress2) ,
        city = cpo.currentPatientCity ,
        state = cpo.currentPatientState ,
        zip4 = Barcode.cassZip4,
        zip = COALESCE(Barcode.cassZip5, Barcode.cassZip, cpo.currentPatientZip),
        areaPhoneHome = SUBSTRING(cpo.currentPatientHomePhone, 1, 10) ,
        ssn = cpo.currentPatientSSN ,
        dob = CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
        lastModDate = GETDATE() ,
        lastModUser = 'buUPP'
--SELECT *
FROM    Person p
INNER JOIN CpoBarcodeView cpo ON healthSystemId = currentHealthSystemId
INNER JOIN Barcode ON cpo.patientBarcodeId=Barcode.barcodeId
       where p.healthSystemId = @HealthSystemId
        AND p.topClusterId = patientTopClusterId
        AND ISNULL(lastUpdateDate, '01/01/1901') <= CONVERT(SMALLDATETIME, COALESCE(cpo.currentArPostingDate,
                                                              cpo.currentDischargeDate,
                                                              '01/01/1901'))
        AND ISNULL(synchId, 0) < cpo.ID
        AND ( ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentPatientHomePhone,
                                                            1, 10), '')
              OR ISNULL(p.state, '') <> ISNULL(currentPatientState, '')
              OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentPatientDOB, 101),
                                           '')
              OR ISNULL(mname, '') <> ISNULL(currentPatientMiddleInitial, '')
              OR ISNULL(p.city, '') <> ISNULL(currentPatientCity, '')
              OR ISNULL(p.addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                                              cpo.currentPatientAddress2),
                                            '')
              OR ISNULL(fname, '') <> ISNULL(currentPatientFirstName, '')
              OR ISNULL(lname, '') <> ISNULL(currentPatientLastName, '')
              OR ISNULL(ssn, '') <> ISNULL(currentPatientSSN, '')
              OR ISNULL(p.zip, '') <> ISNULL(COALESCE(Barcode.cassZip5, Barcode.cassZip, cpo.currentPatientZip), '')
            )

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 4: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



END
#+END_SRC

stp_PFR_InsertGurLastModDate
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_InsertGurLastModDate]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_InsertGurLastModDate]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_InsertGurLastModDate] 'STARDATA'
sp_helptext [stp_PFR_InsertGurLastModDate]


Original Code

INSERT  INTO Guarantor
        ( dbOp ,
          guarantorId ,
          personId ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                personId ,
                guarantorTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIG' AS lastModUser
        FROM    CpoBarcodeView cpo ,
                Person p
        WHERE   NOT EXISTS ( SELECT *
                             FROM   Guarantor
                             WHERE  topClusterId = cpo.guarantorTopClusterId )
                AND cpo.currentHealthSystemId = '0014000000FAiSb'
                AND p.healthSystemId = cpo.currentHealthSystemId
                AND p.topClusterId = cpo.guarantorTopClusterId
        GROUP BY cpo.guarantorTopClusterId ,
                cpo.currentHealthSystemId ,
                p.personId

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T				OPS-12347	Originally ALTERd
11/17/2014 Sean Porter			SA-9115		Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(100)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        Declare @procName Varchar(100)
		set @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @ErrorMessage = 'Start SP Step 5 For Health System: '
            + @HealthSystemId

        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage


--        IF NOT EXISTS ( SELECT  *
 --                       FROM    Guarantor
--                                JOIN dbo.CpoBarcodeView cpo ON cpo.currentHealthSystemId = healthSystemId
--                        WHERE   topClusterId = cpo.guarantorTopClusterId )
            INSERT  INTO Guarantor
                    ( dbOp ,
                      guarantorId ,
                      personId ,
                      topClusterId ,
                      healthSystemId ,
                      lastModDate ,
                      lastModUser
                    )
                    SELECT  'I' ,
                            NEWID() ,
                            personId ,
                            guarantorTopClusterId ,
                            currentHealthSystemId ,
                            GETDATE() AS lastModDate ,
                            'buIG' AS lastModUser
                    FROM    CpoBarcodeView cpo
                            JOIN Person p ON p.healthSystemId = cpo.currentHealthSystemId
                                             AND p.topClusterId = cpo.guarantorTopClusterId
                    WHERE  p.healthSystemId = @HealthSystemId
							AND NOT EXISTS ( SELECT *
                                         FROM   Guarantor
                                         WHERE healthSystemId=@HealthSystemId AND topClusterId = cpo.guarantorTopClusterId )
                    GROUP BY cpo.guarantorTopClusterId ,
                            cpo.currentHealthSystemId ,
                            p.personId


        SET @total = @@ROWCOUNT
        SET @date = GETDATE()
        SET @ErrorMessage = 'End SP Step 5: ' + CAST(@total AS VARCHAR(50))
            + ' Records From the SP for HealthSystem ' + @HealthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage

    END
#+END_SRC

stp_PFR_HouseHoldStats
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_InsertGurLastModDate]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_InsertGurLastModDate]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_InsertGurLastModDate] 'STARDATA'
sp_helptext [stp_PFR_InsertGurLastModDate]


Original Code

INSERT  INTO Guarantor
        ( dbOp ,
          guarantorId ,
          personId ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                personId ,
                guarantorTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIG' AS lastModUser
        FROM    CpoBarcodeView cpo ,
                Person p
        WHERE   NOT EXISTS ( SELECT *
                             FROM   Guarantor
                             WHERE  topClusterId = cpo.guarantorTopClusterId )
                AND cpo.currentHealthSystemId = '0014000000FAiSb'
                AND p.healthSystemId = cpo.currentHealthSystemId
                AND p.topClusterId = cpo.guarantorTopClusterId
        GROUP BY cpo.guarantorTopClusterId ,
                cpo.currentHealthSystemId ,
                p.personId

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T				OPS-12347	Originally ALTERd
11/17/2014 Sean Porter			SA-9115		Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(100)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        Declare @procName Varchar(100)
		set @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @ErrorMessage = 'Start SP Step 5 For Health System: '
            + @HealthSystemId

        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage


--        IF NOT EXISTS ( SELECT  *
 --                       FROM    Guarantor
--                                JOIN dbo.CpoBarcodeView cpo ON cpo.currentHealthSystemId = healthSystemId
--                        WHERE   topClusterId = cpo.guarantorTopClusterId )
            INSERT  INTO Guarantor
                    ( dbOp ,
                      guarantorId ,
                      personId ,
                      topClusterId ,
                      healthSystemId ,
                      lastModDate ,
                      lastModUser
                    )
                    SELECT  'I' ,
                            NEWID() ,
                            personId ,
                            guarantorTopClusterId ,
                            currentHealthSystemId ,
                            GETDATE() AS lastModDate ,
                            'buIG' AS lastModUser
                    FROM    CpoBarcodeView cpo
                            JOIN Person p ON p.healthSystemId = cpo.currentHealthSystemId
                                             AND p.topClusterId = cpo.guarantorTopClusterId
                    WHERE  p.healthSystemId = @HealthSystemId
							AND NOT EXISTS ( SELECT *
                                         FROM   Guarantor
                                         WHERE healthSystemId=@HealthSystemId AND topClusterId = cpo.guarantorTopClusterId )
                    GROUP BY cpo.guarantorTopClusterId ,
                            cpo.currentHealthSystemId ,
                            p.personId


        SET @total = @@ROWCOUNT
        SET @date = GETDATE()
        SET @ErrorMessage = 'End SP Step 5: ' + CAST(@total AS VARCHAR(50))
            + ' Records From the SP for HealthSystem ' + @HealthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage

    END
#+END_SRC

stp_PFR_UpdateCurrentMRN
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdateCurrentMRN]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdateCurrentMRN]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXECUTE [dbo].[stp_PFR_UpdateCurrentMRN] 'STARDATA'
sp_helptext [stp_PFR_UpdateCurrentMRN]

INSERT  INTO Patient
        ( dbOp ,
          patientId ,
          personId ,
          mrn ,
          topClusterId ,
          healthSystemId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                personId ,
                currentMrn ,
                patientTopClusterId ,
                currentHealthSystemId ,
                GETDATE() AS lastModDate ,
                'buIP' AS lastModUser
        FROM    CpoBarcodeView cpo ,
                Person p
        WHERE   NOT EXISTS ( SELECT *
                             FROM   Patient
                             WHERE  topClusterId = cpo.patientTopClusterId
                                    AND healthSystemId = cpo.currentHealthSystemId
                                    AND ISNULL(mrn, '') = ISNULL(cpo.currentMrn,
                                                              '') )
                AND currentHealthSystemId = '0014000000FAiSb'
                AND p.healthSystemId = cpo.currentHealthSystemId
                AND p.topClusterId = cpo.patientTopClusterId
        GROUP BY patientTopClusterId ,
                currentHealthSystemId ,
                currentMrn ,
                personId


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(100)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        Declare @procName Varchar(100)
		set @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @ErrorMessage = 'Start SP Step 7 For Health System: '
            + @HealthSystemId

        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL,@procName, NULL,
            @ErrorMessage



        INSERT  INTO Patient
                ( dbOp ,
                  patientId ,
                  personId ,
                  mrn ,
                  topClusterId ,
                  healthSystemId ,
                  lastModDate ,
                  lastModUser
                )
				SELECT  'I' ,
                        NEWID() ,
                        personId ,
                        currentMrn ,
                        patientTopClusterId ,
                        currentHealthSystemId ,
                        GETDATE() AS lastModDate ,
                        'buIP' AS lastModUser
                FROM    Person p
                        JOIN CpoBarcodeView cpo ON p.healthSystemId = cpo.currentHealthSystemId
                WHERE   p.healthSystemId = @HealthSystemId
						and  NOT EXISTS ( SELECT *
                                     FROM   Patient
                                     WHERE healthSystemId = @HealthSystemId and healthSystemId = cpo.currentHealthSystemId AND topClusterId = cpo.patientTopClusterId
                                            AND ISNULL(mrn, '') = ISNULL(cpo.currentMrn,'') )
                        AND p.topClusterId = cpo.patientTopClusterId
                GROUP BY patientTopClusterId ,
                        currentHealthSystemId ,
                        currentMrn ,
                        personId



        SET @total = @@ROWCOUNT
        SET @date = GETDATE()
        SET @ErrorMessage = 'End SP Step 7: ' + CAST(@total AS VARCHAR(50))
            + ' Records From the SP for HealthSystem ' + @HealthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage



    END
#+END_SRC

stp_PFR_DeletePreLoadVisit
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_DeletePreLoadVisit]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_DeletePreLoadVisit]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_DeletePreLoadVisit] '0014000000FAiSb'

OriginalCode:
SELECT * FROM PreLoadVisit
--delete from PreLoadVisit
where healthSystemId = '0014000000FAiSb'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
        DECLARE @name VARCHAR(50)
        DECLARE @date DATETIME
        DECLARE @ErrorMessage VARCHAR(100)
        DECLARE @total INT
        DECLARE @db VARCHAR(100)
        Declare @procName Varchar(100)
		set @procName = OBJECT_NAME(@@PROCID)
        SET @db = DB_NAME()
        SET @name = SUSER_NAME()
        SET @date = GETDATE()
        SET @ErrorMessage = 'Start SP Step 8 For Health System: '
            + @HealthSystemId

        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage


        DELETE  FROM PreLoadVisit
        WHERE   healthSystemId = @HealthSystemId

        SET @total = @@ROWCOUNT
        SET @date = GETDATE()
        SET @ErrorMessage = 'End SP Step 8: ' + CAST(@total AS VARCHAR(50))
            + ' Records From the SP for HealthSystem ' + @HealthSystemId
        EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
            'INFO', NULL, @procName, NULL,
            @ErrorMessage


    END
#+END_SRC

stp_PFR_PopulatePreLoadVisit
Guarantor, CpoBarcodeView -> PreLoadVisit
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_PopulatePreLoadVisit]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_PopulatePreLoadVisit]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_PopulatePreLoadVisit] '0014000000FAiSb'

ORIGINAL CODE

INSERT  INTO PreLoadVisit
        ( visitId ,
          guarantorId ,
          patientId ,
          healthSystemId ,
          patientAccountNumber ,
          companyId
        )
        SELECT  NEWID() AS visitId ,
                guarantorId ,
                patientId ,
                currentHealthSystemId AS healthSystemId ,
                cpo.currentAccountNumber AS patientAccountNumber ,
                cpo.currentCompanyid AS companyId
        FROM    CpoBarcodeView cpo ,
                Patient p ,
                Guarantor g
        WHERE   currentHealthSystemId = '0014000000FAiSb'
                AND g.healthSystemId = cpo.currentHealthSystemId
                AND p.healthSystemId = cpo.currentHealthSystemId
                AND ISNULL(p.mrn, '') = ISNULL(cpo.currentMrn, '')
                AND p.topClusterId = cpo.patientTopClusterId
                AND g.topClusterId = cpo.guarantorTopClusterId


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd
10/02/2014 Steph W      SA-9050     Don't create Patient records for Agency feeds - change join to Patient to left join
11/17/2014 Sean Porter	SA-9115			Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 9 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

        INSERT  INTO PreLoadVisit
                ( visitId ,
                  guarantorId ,
                  patientId ,
                  healthSystemId ,
                  patientAccountNumber ,
                  companyId
                )
                SELECT  NEWID() AS visitId ,
                        guarantorId ,
                        patientId ,
                        currentHealthSystemId AS healthSystemId ,
                        cpo.currentAccountNumber AS patientAccountNumber ,
                        cpo.currentCompanyid AS companyId
                FROM    Guarantor g
                        JOIN CpoBarcodeView cpo ON g.healthSystemId = cpo.currentHealthSystemId
                                            AND g.topClusterId = cpo.guarantorTopClusterId
						LEFT JOIN Patient p ON p.healthSystemId = cpo.currentHealthSystemId
                                          AND ISNULL(p.mrn, '') = ISNULL(cpo.currentMrn,'')
                                          AND p.topClusterId = cpo.patientTopClusterId

                WHERE   g.healthSystemId = @HealthSystemId
SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 9: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


    END
#+END_SRC

stp_PFR_UpdateVisit
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdateVisit]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdateVisit]
Author:	Brooke Thibodeau
Date:	08/22/2012

---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_UpdateVisit] '0014000000FAiSb'


Original Code

UPDATE  v
SET     patientId = pv.patientId ,
        guarantorId = pv.guarantorId ,
        lastModDate = GETDATE() ,
        lastModUser = 'buUVPV'
select *
FROM    PreLoadVisit pv ,
        Visit v
WHERE   v.companyId = pv.companyId
        AND v.patientAccountNumber = pv.patientAccountNumber
        AND v.healthSystemId = pv.healthSystemId
        AND v.healthSystemId = '0014000000FAiSb'
        AND ( ISNULL(v.patientId, '') <> ISNULL(pv.patientId, '')
              OR ISNULL(v.guarantorId, '') <> ISNULL(pv.guarantorId, '')
            )

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd
11/17/2014 Sean Porter	SA-9115			Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 10 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

        UPDATE  v
        SET     patientId = pv.patientId ,
                guarantorId = pv.guarantorId ,
                lastModDate = GETDATE() ,
                lastModUser = 'buUVPV'
--SELECT *
        FROM    Visit v
                JOIN PreLoadVisit pv ON v.healthSystemId = pv.healthSystemId
								AND v.patientAccountNumber = pv.patientAccountNumber
								AND v.companyId = pv.companyId
				WHERE v.healthSystemId = @HealthSystemId
                                AND ( ISNULL(v.patientId, '') <> ISNULL(pv.patientId,'')
                                      OR ISNULL(v.guarantorId, '') <> ISNULL(pv.guarantorId,'')
                                    )

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 10: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



END
#+END_SRC

stp_PFR_DeleteVisit
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_DeleteVisit]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_DeleteVisit]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:


EXECUTE [dbo].[stp_PFR_DeleteVisit] '0014000000FAiSb'

Original Code


--DELETE  pv
select *
FROM    PreLoadVisit pv ,
        Visit v
WHERE   v.companyId = pv.companyId
        AND v.patientAccountNumber = pv.patientAccountNumber
        AND v.healthSystemId = pv.healthSystemId
        AND v.healthSystemId = '0014000000FAiSb'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T				OPS-12347	Originally ALTERd
11/07/2014 Sean Porter			SA-9115		Updated better leverage partitions

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 11 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

        DELETE  pv
        --SELECT *
        FROM    PreLoadVisit pv
                JOIN Visit v ON v.healthSystemId = pv.healthSystemId
                            AND v.patientAccountNumber = pv.patientAccountNumber
							and v.companyId = pv.companyId
							WHERE pv.healthSystemId = @HealthSystemId

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 11: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

END
#+END_SRC

stp_PFR_PopulateVisit
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_PopulateVisit]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_PopulateVisit]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_PopulateVisit] '0014000000FAiSb'

OriginalCode:
INSERT  INTO Visit
        ( dbOp ,
          visitId ,
          guarantorId ,
          patientId ,
          healthSystemId ,
          patientAccountNumber ,
          companyId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                guarantorId ,
                patientId ,
                healthSystemId ,
                patientAccountNumber ,
                companyId ,
                GETDATE() AS lastModDate ,
                'buIVPV' AS lastModUser
        FROM    PreLoadVisit
        WHERE   healthSystemId = '0014000000FAiSb'


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;


DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 12 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage





INSERT  INTO Visit
        ( dbOp ,
          visitId ,
          guarantorId ,
          patientId ,
          healthSystemId ,
          patientAccountNumber ,
          companyId ,
          lastModDate ,
          lastModUser
        )
        SELECT  'I' ,
                NEWID() ,
                guarantorId ,
                patientId ,
                healthSystemId ,
                patientAccountNumber ,
                companyId ,
                GETDATE() AS lastModDate ,
                'buIVPV' AS lastModUser
        FROM    PreLoadVisit
        WHERE   healthSystemId = @HealthSystemId

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 12: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

END
#+END_SRC

stp_PFR_DeleteAndPopulateVisitCpoQueue
#+BEGIN_SRC sql
USE [cow]
GO

/****** Object:  StoredProcedure [dbo].[stp_PFR_DeleteAndPopulateVisitCpoQueue]    Script Date: 1/21/2016 12:47:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[stp_PFR_DeleteAndPopulateVisitCpoQueue]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_DeleteAndPopulateVisitCpoQueue]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it
directly affects the same table.

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_DeleteAndPopulateVisitCpoQueue] '0014000000FAiSb'

OriginalCode:

DELETE  FROM VisitCpoQueue
--select * FROM VisitCpoQueue
WHERE   healthSystemId = '0014000000FAiSb';

INSERT  INTO VisitCpoQueue
        ( patientAccountNumber ,
          companyId ,
          healthSystemId ,
          dateBegin ,
          patientType ,
          financialClass ,
          badDebtTransferAmount ,
          badDebtAgencyCode ,
          accountStatus ,
          admitDate ,
          dischargeDate ,
          accountBalance ,
          initialPatientResponsibility ,
          totalCharges ,
          totalAdjustments ,
          totalPayments ,
          clientFinancialClass ,
          outstandingPatientBalance ,
          lastModDate ,
          lastModUser ,
          lastPaymentDate ,
          patientPayments ,
          adminHold ,
          accountHoldStatus ,
          insurancePayments ,
          balanceVisible ,
          arPostingDate
        )
        SELECT  patientAccountNumber = cpo.currentAccountNumber ,
                companyId = cpo.currentCompanyid ,
                healthSystemId = cpo.currentHealthSystemId ,
                dateBegin = CONVERT(SMALLDATETIME, COALESCE(cpo.currentDateBegin,
                                                            cpo.currentSelfPayDate,
                                                            cpo.currentArPostingDate,
                                                            cpo.currentDischargeDate)) ,
                patientType = cow.dbo.extractValueAfterSlash(currentPatientType) ,
                financialClass = cow.dbo.extractValueAfterSlash(currentInsurance1FinancialClass) ,
                badDebtTransferAmount = currentBadDebtAmount ,
                badDebtAgencyCode = currentAgencyCode ,
                accountStatus = currentAccountStatus ,
                admitDate = CONVERT(SMALLDATETIME, currentAdmitDate) ,
                dischargeDate = CONVERT(SMALLDATETIME, currentDischargeDate) ,
                accountBalance = currentAccountBalance ,
                initialPatientResponsibility = currentInitialPatientResponsibility ,
                totalCharges = currentTotalCharges ,
                totalAdjustments = currentTotalAdjustments ,
                totalPayments = currentTotalPayments ,
                clientFinancialClass = cow.dbo.extractValueAfterSlash(currentCurrentFinancialClass) ,
                outstandingPatientBalance = currentOutstandingPatientBalance ,
                lastModDate = GETDATE() ,
                lastModUser = 'buVQ' ,
                lastPaymentDate = CONVERT(SMALLDATETIME, currentLastPaymentDate) ,
                patientPayments = currentPatientPayments ,
                adminHold = currentAdminHold ,
                accountHoldStatus = currentAccountHoldStatus ,
                insurancePayments = currentInsurancePayments ,
                balanceVisible = currentBalanceVisible ,
                arPostingDate = currentArPostingDate
        FROM    Visit v ,
                searchAmericaDW.dbo.currentPatientOutcomes cpo
        WHERE   v.patientAccountNumber = cpo.currentAccountNumber
                AND v.companyId = cpo.currentCompanyid
                AND v.healthSystemId = cpo.currentHealthSystemId
                AND cpo.currentHealthSystemId = '0014000000FAiSb'
                AND ( ISNULL(balanceVisible, '') <> ISNULL(currentBalanceVisible,
                                                           '')
                      OR ISNULL(lastPaymentDate, '1900-01-01 00:00:00') <> CONVERT(SMALLDATETIME, ISNULL(currentLastPaymentDate,
                                                              '1900-01-01 00:00:00'))
                      OR ISNULL(clientFinancialClass, '') <> ISNULL(cow.dbo.extractValueAfterSlash(currentCurrentFinancialClass),
                                                              '')
                      OR ISNULL(accountHoldStatus, '') <> ISNULL(currentAccountHoldStatus,
                                                              '')
                      OR ISNULL(adminHold, 0) <> ISNULL(currentAdminHold, 0)
                      OR ISNULL(patientType, '') <> ISNULL(cow.dbo.extractValueAfterSlash(currentPatientType),
                                                           '')
                      OR ISNULL(accountStatus, '') <> ISNULL(currentAccountStatus,
                                                             '')
                      OR ISNULL(patientPayments, 0) <> ISNULL(currentPatientPayments,
                                                              0)
                      OR ISNULL(patientResponsibility, 0) <> ISNULL(currentOutstandingPatientBalance,
                                                              0)
                      OR ISNULL(totalPayments, 0) <> ISNULL(currentTotalPayments,
                                                            0)
                      OR ISNULL(badDebtTransferAmount, 0) <> ISNULL(currentBadDebtAmount,
                                                              0)
                      OR ISNULL(badDebtAgencyCode, '') <> ISNULL(currentAgencyCode,
                                                              '')
                    )


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347		Originally ALTERd
02/04/2013 Brooke T		BIR-2297		Changed logic TO INCLUDE DateBegin CHECK AS WHEN accounts
05/23/2013 Sean Porter	SA-8473			Add fileType mapping
08/01/2013 Sean Porter	SA-8173			Removed some mappings AND DIFFERENTIAL checks
09/23/2013 Sean Porter	SA-8590,8530	Added SOME new fields TO INCLUDE IN OBD
10/30/2013 Sean Porter  SA-8619         Add new payment plan flag
11/17/2014 Sean Porter	SA-9115			Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
Declare @procName Varchar(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 13 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

--STEP13
        DELETE  FROM VisitCpoQueue
        --SELECT * FROM VisitCpoQueue
        WHERE   healthSystemId = @HealthSystemId;

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End Step Completed for Step 13: ' + CAST(@total AS VARCHAR(50)) + ' Deleted From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


--STEP14

SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 14 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


        INSERT  INTO VisitCpoQueue
                ( patientAccountNumber ,
                  companyId ,
                  healthSystemId ,
                  dateBegin ,
                  patientType ,
                  financialClass ,
                  badDebtTransferAmount ,
                  badDebtAgencyCode ,
                  accountStatus ,
                  admitDate ,
                  dischargeDate ,
                  accountBalance ,
                  initialPatientResponsibility ,
                  totalCharges ,
                  totalAdjustments ,
                  totalPayments ,
                  clientFinancialClass ,
                  outstandingPatientBalance ,
                  lastModDate ,
                  lastModUser ,
                  lastPaymentDate ,
                  patientPayments ,
                  adminHold ,
                  accountHoldStatus ,
                  insurancePayments ,
                  balanceVisible ,
                  arPostingDate ,
                  visitNumber,
				  fileType,
				  billingType,
				  hospitalId,
				  serviceLocation,
				  hasPaymentPlan,
				  guarantorCode,
				  qpoLevel
                )
                SELECT  patientAccountNumber = cpo.currentAccountNumber ,
                        companyId = cpo.currentCompanyid ,
                        healthSystemId = cpo.currentHealthSystemId ,
                        dateBegin = CONVERT(SMALLDATETIME, COALESCE(cpo.currentDateBegin,
                                                              cpo.currentSelfPayDate,
                                                              cpo.currentArPostingDate,
                                                              cpo.currentDischargeDate)) ,
                        patientType = cow.dbo.extractValueAfterSlash(currentPatientType) ,
                        financialClass = cow.dbo.extractValueAfterSlash(currentInsurance1FinancialClass) ,
                        badDebtTransferAmount = currentBadDebtAmount ,
                        badDebtAgencyCode = currentAgencyCode ,
                        accountStatus = currentAccountStatus ,
                        admitDate = CONVERT(SMALLDATETIME, currentAdmitDate) ,
                        dischargeDate = CONVERT(SMALLDATETIME, currentDischargeDate) ,
                        accountBalance = currentAccountBalance ,
                        initialPatientResponsibility = currentInitialPatientResponsibility ,
                        totalCharges = currentTotalCharges ,
                        totalAdjustments = currentTotalAdjustments ,
                        totalPayments = currentTotalPayments ,
                        clientFinancialClass = cow.dbo.extractValueAfterSlash(currentCurrentFinancialClass) ,
                        outstandingPatientBalance = currentOutstandingPatientBalance ,
                        lastModDate = GETDATE() ,
                        lastModUser = 'buVQ' ,
                        lastPaymentDate = CONVERT(SMALLDATETIME, currentLastPaymentDate) ,
                        patientPayments = currentPatientPayments ,
                        adminHold = currentAdminHold ,
                        accountHoldStatus = currentAccountHoldStatus ,
                        insurancePayments = currentInsurancePayments ,
                        balanceVisible = currentBalanceVisible ,
                        arPostingDate = currentArPostingDate ,
                        visitNumber = currentVisitNumber ,
						fileType = currentFileType,
						billingType = currentBillingType,
						hospitalId = currentHospitalId,
						serviceLocation = sl.label,
						hasPaymentPlan = currentPaymentPlan,
						guarantorCode = cpo.currentGuarantorCode,
						qpoLevel = cpo.qpoLevel
                FROM    Visit v
                        JOIN dbo.CpoPfrStaging cpo ON v.healthSystemId = cpo.currentHealthSystemId
															  AND v.healthSystemId = @HealthSystemId
															  AND v.patientAccountNumber = cpo.currentAccountNumber
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND ( ISNULL(balanceVisible,'') <> ISNULL(currentBalanceVisible, '')
                                                              OR ISNULL(lastPaymentDate,'1900-01-01 00:00:00') <> CONVERT(SMALLDATETIME, ISNULL(currentLastPaymentDate,'1900-01-01 00:00:00'))
															  OR ISNULL(clientFinancialClass,'') <> ISNULL(cow.dbo.extractValueAfterSlash(currentCurrentFinancialClass),'')
                                                              OR ISNULL(accountHoldStatus,'') <> ISNULL(currentAccountHoldStatus,'')
                                                              OR ISNULL(adminHold,0) <> ISNULL(currentAdminHold,0)
                                                              OR ISNULL(patientType,'') <> ISNULL(cow.dbo.extractValueAfterSlash(currentPatientType), '')
                                                              OR ISNULL(accountStatus,'') <> ISNULL(currentAccountStatus,'')
                                                              OR ISNULL(accountBalance, 0) <> ISNULL(currentAccountBalance, 0)
                                                              OR ISNULL(patientPayments, 0) <> ISNULL(currentPatientPayments,  0)
                                                              OR ISNULL(outstandingPatientBalance, 0) <> ISNULL(currentOutstandingPatientBalance,0)
                                                              OR ISNULL(totalPayments, 0) <> ISNULL(currentTotalPayments,0)
                                                              OR ISNULL(badDebtTransferAmount,0) <> ISNULL(currentBadDebtAmount, 0)
                                                              OR ISNULL(badDebtAgencyCode,'') <> ISNULL(currentAgencyCode, '')
															  OR ISNULL(v.dateBegin,'1900-01-01 00:00:00') <> CONVERT(SMALLDATETIME,ISNULL(COALESCE(cpo.currentDateBegin,cpo.currentSelfPayDate,cpo.currentArPostingDate,cpo.currentDischargeDate),'1900-01-01 00:00:00'))
															  OR ISNULL(fileType, '') <> ISNULL(currentFileType, '')
															  OR ISNULL(billingType, '') <> ISNULL(currentBillingType, '')
															  OR ISNULL(hospitalId, '') <> ISNULL(currentHospitalId, '')
                                                              OR ISNULL(hasPaymentPlan, 0) <> ISNULL(currentPaymentPlan, 0)
															  OR ISNULL(guarantorCode, 0) <> ISNULL(currentGuarantorCode, 0)
                                                              )
						LEFT OUTER JOIN searchAmericaDW.dbo.ServiceLocation sl ON sl.healthSystemId = cpo.currentHealthSystemId AND sl.hospitalId = cpo.currentHospitalId
																	AND cpo.currentFileType = sl.fileType AND cpo.currentBillingType = sl.billingType

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End Step 14: ' + CAST(@total AS VARCHAR(50)) + ' Inserted For the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

END


GO
#+END_SRC

stp_PFR_UpdateVisitFinancials
#+BEGIN_SRC sql

CREATE  PROCEDURE [dbo].[stp_PFR_UpdateVisitFinancials]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdateVisitFinancials]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it
directly affects the same table.

---------------------------------------------------------------------------------------------------
Example:

EXEC [dbo].[stp_PFR_UpdateVisitFinancials] '0014000000FAiSb'

OriginalCode:

UPDATE  Visit
SET     dbOp = ISNULL(v.dbOp, 'U') ,
        dateBegin = cpo.dateBegin ,
        patientType = cpo.patientType ,
        financialClass = cpo.financialClass ,
        badDebtTransferAmount = cpo.badDebtTransferAmount ,
        badDebtAgencyCode = cpo.badDebtAgencyCode ,
        accountStatus = cpo.accountStatus ,
        admitDate = cpo.admitDate ,
        dischargeDate = cpo.dischargeDate ,
        accountBalance = cpo.accountBalance ,
        initialPatientResponsibility = cpo.initialPatientResponsibility ,
        totalCharges = cpo.totalCharges ,
        totalAdjustments = cpo.totalAdjustments ,
        totalPayments = cpo.totalPayments ,
        clientFinancialClass = cpo.clientFinancialClass ,
        patientResponsibility = cpo.patientResponsibility ,
        outstandingPatientBalance = cpo.outstandingPatientBalance ,
        lastModDate = cpo.lastModDate ,
        lastModUser = 'buUVQ' ,
        lastPaymentDate = cpo.lastPaymentDate ,
        patientPayments = cpo.patientPayments ,
        adminHold = cpo.adminHold ,
        accountHoldStatus = cpo.accountHoldStatus ,
        insurancePayments = cpo.insurancePayments ,
        balanceVisible = cpo.balanceVisible ,
        arPostingDate = cpo.arPostingDate
select *
FROM    Visit v ,
        VisitCpoQueue cpo
WHERE   v.patientAccountNumber = cpo.patientAccountNumber
        AND v.companyId = cpo.companyId
        AND v.healthSystemId = cpo.healthSystemId
        AND cpo.healthSystemId = '0014000000FAiSb'


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T			OPS-12347		Originally ALTERd
05/23/2013 Sean Porter		SA-8473			Add fileType mapping
08/01/2013 Sean Porter		SA-8182			Remove unused mappings
09/23/2013 Sean Porter		SA-8590,8530	Added SOME new fields TO INCLUDE IN OBD
10/30/2013 Sean Porter      SA-8619         Add new payment plan flag
11/17/2014 Sean Porter		SA-9115			Changed clause TO better leverage partition

***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 15 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

        UPDATE  Visit
        SET     dbOp = ISNULL(v.dbOp, 'U') ,
                dateBegin = cpo.dateBegin ,
                patientType = cpo.patientType ,
                financialClass = cpo.financialClass ,
                badDebtTransferAmount = cpo.badDebtTransferAmount ,
                badDebtAgencyCode = cpo.badDebtAgencyCode ,
                accountStatus = cpo.accountStatus ,
                admitDate = cpo.admitDate ,
                dischargeDate = cpo.dischargeDate ,
                accountBalance = cpo.accountBalance ,
                initialPatientResponsibility = cpo.initialPatientResponsibility ,
                totalCharges = cpo.totalCharges ,
                totalAdjustments = cpo.totalAdjustments ,
                totalPayments = cpo.totalPayments ,
                clientFinancialClass = cpo.clientFinancialClass ,
                outstandingPatientBalance = cpo.outstandingPatientBalance ,
                lastModDate = cpo.lastModDate ,
                lastModUser = 'buUVQ' ,
                lastPaymentDate = cpo.lastPaymentDate ,
                patientPayments = cpo.patientPayments ,
                adminHold = cpo.adminHold ,
                accountHoldStatus = cpo.accountHoldStatus ,
                insurancePayments = cpo.insurancePayments ,
                balanceVisible = cpo.balanceVisible ,
                arPostingDate = cpo.arPostingDate ,
                visitNumber = cpo.visitNumber,
				fileType = cpo.fileType,
				billingType = cpo.billingType,
				hospitalId = cpo.hospitalId,
				serviceLocation = cpo.serviceLocation,
				hasPaymentPlan = cpo.hasPaymentPlan

--SELECT *
        FROM    Visit v
                JOIN VisitCpoQueue cpo ON v.healthSystemId = cpo.healthSystemId
                                          AND v.companyId = cpo.companyId
                                          AND v.patientAccountNumber = cpo.patientAccountNumber
                                          WHERE v.healthSystemId = @HealthSystemId

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 15: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

    END
#+END_SRC

stp_PFR_InsertPersonVisitLogQ
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_InsertPersonVisitLogQ]
    @HealthSystemId VARCHAR(100)
AS /* *************************************************************************************************** Name: [dbo].[stp_PFR_InsertPersonVisitLogQ] Author: Brooke Thibodeau Date: 08/22/2012 ---------------------------------------------------------------



------------------------------------ Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it  directly affects the same table.  -------------------------------------------------------------------------------



-------------------- Example:  EXECUTE [dbo].[stp_PFR_InsertPersonVisitLogQ] '0014000000FAiSb'
Declare @HealthSystemId Varchar(50)
Set @HealthSystemId = '0014000000FAiSb'

--INSERT  INTO PersonVisitLogQ
--        ( personVisitLogId ,
--          visitId ,
--          personType ,
--          healthSystemId ,
--          lname ,
--          mname ,
--          fname ,
--          addr ,
--          city ,
--          state ,
--          zip ,
--          ssn ,
--          areaPhoneHome ,
--          deceased ,
--          dob ,
--          employerName ,
--          lastUpdateCompanyId ,
--          lastModDate ,
--          lastModUser
--        )
        SELECT  NEWID() ,
                v.visitId ,
                'G' ,
                cpo.currentHealthSystemId ,
                cpo.currentGuarantorLastName ,
                cpo.currentGuarantorMiddleInitial ,
                cpo.currentGuarantorFirstName ,
                cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                          cpo.currentGuarantorAddress2) ,
                cpo.currentGuarantorCity ,
                cpo.currentGuarantorState ,
                cpo.currentGuarantorZip ,
                cpo.currentGuarantorSSN ,
                cpo.currentGuarantorHomePhone ,
                cpo.currentDeceased ,
                CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
                cpo.currentGuarantorEmployer ,
                cpo.currentCompanyid ,
                GETDATE() ,
                'LoadPfrSource'
        FROM    Visit v ,
                searchAmericaDW.dbo.currentPatientOutcomes cpo ,
                PersonVisitLog p
        WHERE   v.patientAccountNumber = cpo.currentAccountNumber
                AND v.companyId = cpo.currentCompanyid
                AND p.personVisitLogId = v.guarantorPersonVisitLogId
                AND v.healthSystemId = cpo.currentHealthSystemId
                AND cpo.currentHealthSystemId = @HealthSystemId
                AND ( ISNULL(ssn, '') <> ISNULL(currentGuarantorSSN, '')
                      OR ISNULL(city, '') <> ISNULL(currentGuarantorCity, '')
                      OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                              cpo.currentGuarantorAddress2),
                                                    '')
                      OR ISNULL(fname, '') <> ISNULL(currentGuarantorFirstName,
                                                     '')
                      OR ISNULL(mname, '') <> ISNULL(currentGuarantorMiddleInitial,
                                                     '')
                      OR ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentGuarantorHomePhone,
                                                              1, 10), '')
                      OR ISNULL(zip, '') <> ISNULL(currentGuarantorZip, '')
                      OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentGuarantorDOB, 101),
                 '')
                      OR ISNULL(state, '') <> ISNULL(currentGuarantorState, '')
                      OR ISNULL(lname, '') <> ISNULL(currentGuarantorLastName,
                                                     '')
                    )
--****************************************************************************************************************
--INSERT  INTO PersonVisitLogQ
--        ( personVisitLogId ,
--          visitId ,
--          personType ,
--          healthSystemId ,
--          lname ,
--          mname ,
--          fname ,
--          addr ,
--          city ,
--          state ,
--          zip ,
--          ssn ,
--          areaPhoneHome ,
--          deceased ,
--          dob ,
--          employerName ,
--          lastUpdateCompanyId ,
--          lastModDate ,
--          lastModUser
--        )
        SELECT  NEWID() ,
                v.visitId ,
                'P' ,
                cpo.currentHealthSystemId ,
                cpo.currentPatientLastName ,
                cpo.currentPatientMiddleInitial ,
                cpo.currentPatientFirstName ,
                cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                          cpo.currentPatientAddress2) ,
                cpo.currentPatientCity ,
                cpo.currentPatientState ,
                cpo.currentPatientZip ,
                cpo.currentPatientSSN ,
                cpo.currentPatientHomePhone ,
                cpo.currentDeceased ,
                CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
                cpo.currentPatientEmployer ,
                cpo.currentCompanyid ,
                GETDATE() ,
                'LoadPfrSource'
        FROM    Visit v ,
                searchAmericaDW.dbo.currentPatientOutcomes cpo ,
                PersonVisitLog p
        WHERE   p.personVisitLogId = v.patientPersonVisitLogId
                AND v.patientAccountNumber = cpo.currentAccountNumber
                AND v.companyId = cpo.currentCompanyid
                AND v.healthSystemId = cpo.currentHealthSystemId
                AND cpo.currentHealthSystemId = 'STARDATA'
                AND ( ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentPatientHomePhone,
                                                              1, 10), '')
                      OR ISNULL(state, '') <> ISNULL(currentPatientState, '')
                      OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentPatientDOB, 101),
                                                   '')
                      OR ISNULL(mname, '') <> ISNULL(currentPatientMiddleInitial,
                                                     '')
                      OR ISNULL(city, '') <> ISNULL(currentPatientCity, '')
                      OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                                              cpo.currentPatientAddress2),
                                                    '')
                      OR ISNULL(fname, '') <> ISNULL(currentPatientFirstName,
                                                     '')
                      OR ISNULL(lname, '') <> ISNULL(currentPatientLastName,
                                                     '')
                      OR ISNULL(ssn, '') <> ISNULL(currentPatientSSN, '')
         OR ISNULL(zip, '') <> ISNULL(currentPatientZip, '')
                    )

--****************************************************************************************************************
--INSERT  INTO PersonVisitLogQ
--        ( personVisitLogId ,
--          visitId ,
--          personType ,
--          healthSystemId ,
--          lname ,
--          mname ,
--          fname ,
--          addr ,
--          city ,
--          state ,
--          zip ,
--          ssn ,
--          areaPhoneHome ,
--          deceased ,
--          dob ,
--          employerName ,
--          lastUpdateCompanyId ,
--          lastModDate ,
--          lastModUser
--        )
        SELECT  NEWID() ,
                v.visitId ,
                'G' ,
                cpo.currentHealthSystemId ,
                cpo.currentGuarantorLastName ,
                cpo.currentGuarantorMiddleInitial ,
                cpo.currentGuarantorFirstName ,
                cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                          cpo.currentGuarantorAddress2) ,
                cpo.currentGuarantorCity ,
                cpo.currentGuarantorState ,
                cpo.currentGuarantorZip ,
                cpo.currentGuarantorSSN ,
                cpo.currentGuarantorHomePhone ,
                cpo.currentDeceased ,
                CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
                cpo.currentGuarantorEmployer ,
                cpo.currentCompanyid ,
                GETDATE() ,
                'LoadPfrSource'
        FROM    Visit v ,
                searchAmericaDW.dbo.currentPatientOutcomes cpo
        WHERE   v.patientAccountNumber = cpo.currentAccountNumber
                AND v.companyId = cpo.currentCompanyid
                AND v.healthSystemId = cpo.currentHealthSystemId
                AND cpo.currentHealthSystemId = @HealthSystemId
                AND v.guarantorPersonVisitLogId IS NULL
                AND v.guarantorId IS NOT NULL

--****************************************************************************************************************

--INSERT  INTO PersonVisitLogQ
--        ( personVisitLogId ,
--          visitId ,
--          personType ,
--          healthSystemId ,
--          lname ,
--          mname ,
--          fname ,
--          addr ,
--          city ,
--          state ,
--          zip ,
--          ssn ,
--          areaPhoneHome ,
--          deceased ,
--          dob ,
--          employerName ,
--          lastUpdateCompanyId ,
--          lastModDate ,
--          lastModUser
--        )
        SELECT  NEWID() ,
                v.visitId ,
                'P' ,
                cpo.currentHealthSystemId ,
                cpo.currentPatientLastName ,
                cpo.currentPatientMiddleInitial ,
                cpo.currentPatientFirstName ,
                cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                          cpo.currentPatientAddress2) ,
                cpo.currentPatientCity ,
                cpo.currentPatientState ,
                cpo.currentPatientZip ,
                cpo.currentPatientSSN ,
                cpo.currentPatientHomePhone ,
                cpo.currentDeceased ,
                CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
                cpo.currentPatientEmployer ,
                cpo.currentCompanyid ,
                GETDATE() ,
                'LoadPfrSource'
        FROM    Visit v ,
                searchAmericaDW.dbo.currentPatientOutcomes cpo
        WHERE   v.patientAccountNumber = cpo.currentAccountNumber
                AND v.companyId = cpo.currentCompanyid
                AND v.healthSystemId = cpo.currentHealthSystemId
         AND cpo.currentHealthSystemId = 'STARDATA'
                AND v.patientPersonVisitLogId IS NULL
                AND v.patientId IS NOT NULL
  *************************************************************************************************** Revision History: Date  Author    Ref   Description ---------------------------------------------------------------------------------------------------



08/22/2012 Brooke T  OPS-12347 Originally ALTERd   *************************************************************************************************** */
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
SET NOCOUNT ON;
-- SET TO READ UNCOMITTED to prevent blocking issue.
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;


--Step 16....

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 16 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



        INSERT  INTO PersonVisitLogQ
                ( personVisitLogId ,
                  visitId ,
                  personType ,
                  healthSystemId ,
                  lname ,
                  mname ,
                  fname ,
                  addr ,
                  city ,
                  state ,
                  zip ,
                  ssn ,
                  areaPhoneHome ,
                  deceased ,
                  dob ,
                  employerName ,
                  lastUpdateCompanyId ,
                  lastModDate ,
                  lastModUser
                )
                SELECT  NEWID() ,
                        v.visitId ,
                        'G' ,
                        cpo.currentHealthSystemId ,
                        cpo.currentGuarantorLastName ,
                        cpo.currentGuarantorMiddleInitial ,
                        cpo.currentGuarantorFirstName ,
                        cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                  cpo.currentGuarantorAddress2) ,
                        cpo.currentGuarantorCity ,
                        cpo.currentGuarantorState ,
                        cpo.currentGuarantorZip ,
                        cpo.currentGuarantorSSN ,
                        cpo.currentGuarantorHomePhone ,
                        cpo.currentDeceased ,
                        CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
                        cpo.currentGuarantorEmployer ,
                        cpo.currentCompanyid ,
                        GETDATE() ,
                        'LoadPfrSource'
                FROM    Visit v
                        JOIN PersonVisitLog p ON p.personVisitLogId = v.guarantorPersonVisitLogId
                   JOIN dbo.CpoPfrStaging cpo ON v.healthSystemId = cpo.currentHealthSystemId
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND v.patientAccountNumber = cpo.currentAccountNumber
                WHERE  v.healthSystemId = @HealthSystemId
					AND     ( ISNULL(ssn, '') <> ISNULL(currentGuarantorSSN, '')
                          OR ISNULL(city, '') <> ISNULL(currentGuarantorCity,
                                                        '')
                          OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                              cpo.currentGuarantorAddress2),
                                                        '')
                          OR ISNULL(fname, '') <> ISNULL(currentGuarantorFirstName,
                                                         '')
                          OR ISNULL(mname, '') <> ISNULL(currentGuarantorMiddleInitial,
      '')
                          OR ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentGuarantorHomePhone,
                                                              1, 10), '')
                          OR ISNULL(zip, '') <> ISNULL(currentGuarantorZip, '')
                          OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentGuarantorDOB, 101),
                                                       '')
                          OR ISNULL(state, '') <> ISNULL(currentGuarantorState,
                                                         '')
                          OR ISNULL(lname, '') <> ISNULL(currentGuarantorLastName,
                                                         '')
                        )




SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 16: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


--****************************************************************************************************************

SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 17 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

        INSERT  INTO PersonVisitLogQ
                ( personVisitLogId ,
                  visitId ,
                  personType ,
                  healthSystemId ,
                  lname ,
                  mname ,
                  fname ,
                  addr ,
                  city ,
                  state ,
                  zip ,
                  ssn ,
                  areaPhoneHome ,
                  deceased ,
                  dob ,
                  employerName ,
                  lastUpdateCompanyId ,
                  lastModDate ,
                  lastModUser
                )
                SELECT  NEWID() ,
                        v.visitId ,
                        'P' ,
                        cpo.currentHealthSystemId ,
                        cpo.currentPatientLastName ,
                        cpo.currentPatientMiddleInitial ,
                        cpo.currentPatientFirstName ,
                        cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                                  cpo.currentPatientAddress2) ,
                        cpo.currentPatientCity ,
                        cpo.currentPatientState ,
                        cpo.currentPatientZip ,
                        cpo.currentPatientSSN ,
                        cpo.currentPatientHomePhone ,
                        cpo.currentDeceased ,
                        CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
                        cpo.currentPatientEmployer ,
                        cpo.currentCompanyid ,
                        GETDATE() ,
                        'LoadPfrSource'
                FROM    Visit v
                        JOIN PersonVisitLog p ON p.personVisitLogId = v.patientPersonVisitLogId
                        JOIN dbo.CpoPfrStaging cpo ON v.healthSystemId = cpo.currentHealthSystemId
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND v.patientAccountNumber = cpo.currentAccountNumber
                WHERE  v.healthSystemId = @HealthSystemId
				AND  ( ISNULL(areaPhoneHome, '') <> ISNULL(SUBSTRING(currentPatientHomePhone, 1, 10), '')
				          OR ISNULL(state, '') <> ISNULL(currentPatientState, '')
                          OR ISNULL(dob, '') <> ISNULL(CONVERT(VARCHAR, currentPatientDOB, 101), '')
                          OR ISNULL(mname, '') <> ISNULL(currentPatientMiddleInitial, '')
                          OR ISNULL(city, '') <> ISNULL(currentPatientCity, '')
                          OR ISNULL(addr, '') <> ISNULL(cow.dbo.fn_combineAddress(cpo.currentPatientAddress1, cpo.currentPatientAddress2), '')
						  OR ISNULL(fname, '') <> ISNULL(currentPatientFirstName, '')
                          OR ISNULL(lname, '') <> ISNULL(currentPatientLastName, '')
                          OR ISNULL(ssn, '') <> ISNULL(currentPatientSSN, '')
                          OR ISNULL(zip, '') <> ISNULL(currentPatientZip, '')
                        )
SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 17: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

--****************************************************************************************************************



SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 18 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


        INSERT  INTO PersonVisitLogQ
                ( personVisitLogId ,
                  visitId ,
                  personType ,
                  healthSystemId ,
                  lname ,
                  mname ,
                  fname ,
                  addr ,
                  city ,
                  state ,
                  zip ,
                  ssn ,
                  areaPhoneHome ,
                  deceased ,
                  dob ,
                  employerName ,
                  lastUpdateCompanyId ,
                  lastModDate ,
                  lastModUser
                )
                SELECT  NEWID() ,
                        v.visitId ,
                        'G' ,
                        cpo.currentHealthSystemId ,
                        cpo.currentGuarantorLastName ,
                        cpo.currentGuarantorMiddleInitial ,
                        cpo.currentGuarantorFirstName ,
                        cow.dbo.fn_combineAddress(cpo.currentGuarantorAddress1,
                                                  cpo.currentGuarantorAddress2) ,
                        cpo.currentGuarantorCity ,
                        cpo.currentGuarantorState ,
                        cpo.currentGuarantorZip ,
                        cpo.currentGuarantorSSN ,
                        cpo.currentGuarantorHomePhone ,
                        cpo.currentDeceased ,
                        CONVERT(VARCHAR, cpo.currentGuarantorDOB, 101) ,
                        cpo.currentGuarantorEmployer ,
                        cpo.currentCompanyid ,
                        GETDATE() ,
                        'LoadPfrSource'
                FROM    Visit v
                        JOIN dbo.CpoPfrStaging cpo ON v.healthSystemId = cpo.currentHealthSystemId
															AND v.patientAccountNumber = cpo.currentAccountNumber
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND v.guarantorPersonVisitLogId IS NULL
                                                              AND v.guarantorId IS NOT NULL
						WHERE v.healthSystemId = @HealthSystemId

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 18: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


--****************************************************************************************************************

SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 19 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


        INSERT  INTO PersonVisitLogQ
                ( personVisitLogId ,
                  visitId ,
                  personType ,
                  healthSystemId ,
                  lname ,
                  mname ,
                  fname ,
                  addr ,
                  city ,
                  state ,
                  zip ,
                  ssn ,
                  areaPhoneHome ,
                  deceased ,
                  dob ,
                  employerName ,
                  lastUpdateCompanyId ,
                  lastModDate ,
                  lastModUser
                )
                SELECT  NEWID() ,
                        v.visitId ,
                        'P' ,
                        cpo.currentHealthSystemId ,
                        cpo.currentPatientLastName ,
                        cpo.currentPatientMiddleInitial ,
                        cpo.currentPatientFirstName ,
                        cow.dbo.fn_combineAddress(cpo.currentPatientAddress1,
                                                  cpo.currentPatientAddress2) ,
                        cpo.currentPatientCity ,
                        cpo.currentPatientState ,
                        cpo.currentPatientZip ,
                        cpo.currentPatientSSN ,
                        cpo.currentPatientHomePhone ,
                        cpo.currentDeceased ,
                        CONVERT(VARCHAR, cpo.currentPatientDOB, 101) ,
                        cpo.currentPatientEmployer ,
                        cpo.currentCompanyid ,
                        GETDATE() ,
                        'LoadPfrSource'
                FROM    Visit v
               JOIN dbo.CpoPfrStaging cpo ON v.healthSystemId = cpo.currentHealthSystemId
                                                              AND v.patientAccountNumber = cpo.currentAccountNumber
                                                              AND v.companyId = cpo.currentCompanyid
                                                              AND v.patientPersonVisitLogId IS NULL
                                                              AND v.patientId IS NOT NULL
															  WHERE v.healthSystemId = @HealthSystemId


SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 19: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

--****************************************************************************************************************

SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 19.1 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

INSERT INTO cow.dbo.PersonVisitLogQ
        ( personVisitLogId ,
          visitId ,
          personType ,
          healthSystemId ,
          lname ,
          mname ,
          fname ,
          addr ,
          city ,
          state ,
          zip ,
          ssn ,
          area ,
          phone ,
          areaPhoneBusiness ,
          areaPhoneHome ,
          citizenship ,
          countyCode ,
          deathDate ,
          deceased ,
          dob ,
          gender ,
          employerName ,
          employmentStatus ,
          employmentStopDate ,
          hireEffectiveDate ,
          lastUpdateDate ,
          lastUpdateCompanyId ,
          maritalStatus ,
          spouseName ,
          customField1 ,
          customField2 ,
          xml ,
          active ,
          modId ,
          lastModDate ,
          lastModUser ,
          synchId ,
          zip4 ,
          epin ,
          vxml
        )
SELECT cow.personVisitLogId ,
          cow.visitId ,
          cow.personType ,
          cow.healthSystemId ,
          cow.lname ,
          cow.mname ,
          cow.fname ,
          cow.addr ,
          cow.city ,
          cow.state ,
          cow.zip ,
          cow.ssn ,
          cow.area ,
          cow.phone ,
          cow.areaPhoneBusiness ,
          cow.areaPhoneHome ,
          cow.citizenship ,
          cow.countyCode ,
          cow.deathDate ,
          cow.deceased ,
          cow.dob ,
          cow.gender ,
          cow.employerName ,
          cow.employmentStatus ,            cow.employmentStopDate ,
          cow.hireEffectiveDate ,
          cow.lastUpdateDate ,
          cow.lastUpdateCompanyId ,
          cow.maritalStatus ,
          cow.spouseName ,
          cow.customField1 ,
          cow.customField2 ,
          cow.xml ,
          cow.active ,
          cow.modId ,
          GETDATE(),
          'migrateme15',
          cow.synchId ,
          cow.zip4 ,
          cow.epin ,
          cow.vxml
FROM cow.dbo.PersonVisitLog cow
WHERE cow.personVisitLogId IN (
	SELECT v.guarantorPersonVisitLogId
	FROM searchamericaDW.dbo.Visit v
	WHERE v.healthSystemId=@HealthSystemId
	AND v.guarantorPersonVisitLogId IS NOT NULL
	AND v.guarantorPersonVisitLogId NOT in (
		SELECT personVisitLogId FROM searchAmericaDW.dbo.PersonVisitLog WHERE healthSystemId=@HealthSystemId)
	GROUP BY v.guarantorPersonVisitLogId)


SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 19.1: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage
END
#+END_SRC

stp_PFR_InsertPersonVisitLog
#+BEGIN_SRC sql
CREATE PROCEDURE [dbo].[stp_PFR_InsertPersonVisitLog]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name: [dbo].[stp_PFR_InsertPersonVisitLog]
Author: Brooke Thibodeau
Date: 08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it
directly affects the same table.

---------------------------------------------------------------------------------------------------
Example:  EXECUTE [dbo].[stp_PFR_InsertPersonVisitLog] '0014000000FAiSb'

INSERT  INTO PersonVisitLog
        SELECT  *
        FROM    PersonVisitLogQ
        WHERE   healthSystemId = '0014000000FAiSb'

***************************************************************************************************
Revision History:
Date  Author    Ref   Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T  OPS-12347 Originally ALTERd
01/21/2013 Steph W   IC-2743 Populate the PVLQ table with missing data from Sybase

***************************************************************************************************
*/

    BEGIN
 -- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
 -- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 20 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

INSERT  INTO PersonVisitLog
		SELECT q.*
        FROM    PersonVisitLogQ q LEFT OUTER JOIN PersonVisitLog pvl ON q.personVisitLogId=pvl.personVisitLogId
        WHERE   q.healthSystemId = @HealthSystemId AND pvl.personVisitLogId IS NULL

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 20: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage
END
#+END_SRC

stp_PFR_UpdateVisitForPers
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdateVisitForPers]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdateVisitForPers]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it
directly affects the same table.

---------------------------------------------------------------------------------------------------
Example: EXECUTE [dbo].[stp_PFR_UpdateVisitForPers] '0014000000FAiSb'

UPDATE  Visit
SET     patientPersonVisitLogId = q.personVisitLogId
select *
FROM    Visit v ,
        PersonVisitLogQ q
WHERE   q.personType = 'P'
        AND q.healthSystemId = '0014000000FAiSb'
        AND v.visitId = q.visitId


***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 21 For Health System: ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage


        UPDATE  Visit
        SET     patientPersonVisitLogId = q.personVisitLogId
--        SELECT *
        FROM    Visit v
                JOIN PersonVisitLogQ q ON v.visitId = q.visitId
        WHERE   v.healthSystemId = @HealthSystemId and q.personType = 'P'



SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 21: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

END
#+END_SRC

stp_PFR_UpdateVisitForGur
#+BEGIN_SRC sql

CREATE PROCEDURE [dbo].[stp_PFR_UpdateVisitForGur]
    @HealthSystemId VARCHAR(100)
AS /*
***************************************************************************************************
Name:	[dbo].[stp_PFR_UpdateVisitForGur]
Author:	Brooke Thibodeau
Date:	08/22/2012
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc Populates the Person Record from CPO, combined two steps into one proc as it
directly affects the same table.

---------------------------------------------------------------------------------------------------
Example:

Execute [dbo].[stp_PFR_UpdateVisitForGur] '0014000000FAiSb'

UPDATE  Visit
SET     guarantorPersonVisitLogId = q.personVisitLogId
select *
FROM    Visit v ,
        PersonVisitLogQ q
WHERE   q.personType = 'G'
        AND q.healthSystemId = 'STARDATA'
        AND v.visitId = q.visitId

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
08/22/2012 Brooke T		OPS-12347	Originally ALTERd


***************************************************************************************************
*/

    BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
        SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.
        SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @name Varchar(50)
DECLARE @date DATETIME
DECLARE @ErrorMessage VARCHAR(100)
DECLARE @total INT
DECLARE @db VARCHAR(100)
DECLARE @procName VARCHAR(100)
set @procName = OBJECT_NAME(@@PROCID)
SET @db = DB_NAME()
SET @name = SUSER_NAME()
SET @date = GETDATE()
SET @ErrorMessage = 'Start SP Step 22 For Health System: ' + @HealthSystemId

EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage



        UPDATE  Visit
        SET     guarantorPersonVisitLogId = q.personVisitLogId
        FROM    Visit v
                JOIN PersonVisitLogQ q ON v.visitId = q.visitId
        WHERE   v.healthSystemId = @HealthSystemId
		and q.personType = 'G'

SET @total = @@ROWCOUNT
SET @date = GETDATE()
SET @ErrorMessage = 'End SP Step 22: ' + CAST(@total AS VARCHAR(50)) + ' Records From the SP for HealthSystem ' + @HealthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name , 0, NULL, NULL, 'INFO', NULL,@procName, NULL, @ErrorMessage

END
#+END_SRC

stp_WorkItemToPfrScoreTransfer
#+BEGIN_SRC sql



CREATE PROCEDURE [dbo].[stp_WorkItemToPfrScoreTransfer]
	@healthSystemId VARCHAR(64)
AS
/*
***************************************************************************************************
Name:	dbo.stp_WorkItemToPfrScoreTransfer
Author:	Sean Porter
Date:	07/25/2013
---------------------------------------------------------------------------------------------------
Synopsis: This stored proc matches work item demographics to PFR person data and updates the correesponding Guarantor scores.

---------------------------------------------------------------------------------------------------
Example:

EXEC dbo.stp_WorkItemToPfrScoreTransfer 'junit'
EXEC dbo.stp_WorkItemToPfrScoreTransfer 'STARDATA'

***************************************************************************************************
Revision History:
Date		Author				Ref			Description
---------------------------------------------------------------------------------------------------
07/25/2013	Sean Porter		SA-8353			Originally created
08/01/2014	Steph Wentland		SA-8883		Updated to include fplpercentage
***************************************************************************************************
*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
	SET NOCOUNT ON;
	-- SET TO READ UNCOMITTED to prevent blocking issue.

    DECLARE @name VARCHAR(50)
    DECLARE @date DATETIME
    DECLARE @ErrorMessage VARCHAR(500)
    DECLARE @total INT
    DECLARE @db VARCHAR(100)
    DECLARE @procName VARCHAR(100)
    DECLARE @snapshotDate DATETIME
    SET @procName = OBJECT_NAME(@@PROCID)
    SET @db = DB_NAME()
    SET @name = SUSER_NAME()
    SET @date = GETDATE()
	SET @ErrorMessage = 'Start SP Step 23 For Health System: ' + @healthSystemId

    EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL,
        'INFO', NULL, @procName, NULL, @ErrorMessage

DECLARE @counter INT
SET @counter = (SELECT ISNULL(scoreTransferCounter,0) FROM dbo.PfrRequest WHERE healthSystemId = @healthSystemId AND jobName = 'PatientOutcomesToPfrConverter')
PRINT @counter
IF(@counter) <= 0 RETURN

DECLARE @lastModUser VARCHAR(16)
SET @lastModUser = 'wiScoreTran'

-- Get as many unique persons as possible from work item.  This will give us the most possible scores to use (we want to use them all).  Ideally 'ct' is really low.  Only get last 90 days of work items.
SELECT fname, lname, ssn, dob, zip,
	MAX(workitemid) AS 'workItemId', MAX(searchDate) AS 'creditScoreDate', COUNT(*) AS 'ct'
INTO #wiDemogs
FROM searchAmericaDW.dbo.workitem WITH (NOLOCK)
WHERE companyworktypeid IN (SELECT companyworktypeid
							FROM searchAmericaDW.dbo.CompanyHealthSystem chs WITH (NOLOCK)
							JOIN searchAmericaDW.dbo.companyworktype cwt WITH (NOLOCK)
							ON chs.companyid = cwt.companyid WHERE healthSystemId = @healthSystemId)
AND fname IS NOT NULL AND lname IS NOT NULL AND ssn IS NOT NULL AND (dob IS NOT NULL OR zip IS NOT NULL)
AND searchDate > DATEADD(dd, -90, GETDATE()) AND creditscore <> 0 AND creditscore IS NOT NULL
GROUP BY fname, lname, ssn, dob, zip
ORDER BY 'ct' DESC

-- add the score and fplPercentage
SELECT tmp.workItemId AS 'workItemId', creditscore AS 'creditScore' , tmp.creditScoreDate , wi.fplpercentage AS 'fplPercentage', tmp.fname ,tmp.lname ,tmp.ssn ,tmp.dob ,tmp.zip
INTO #wiDemogsAndScore FROM searchAmericaDW.dbo.workitem wi JOIN #wiDemogs tmp  on wi.workitemid = tmp.workItemId

SET @ErrorMessage = 'Got ' + CAST(@@ROWCOUNT AS VARCHAR(50)) + ' workitem scores for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

-- find the person ids for all the work items
SELECT personId, wi.workItemId, wi.creditScore, wi.creditScoreDate,wi.fplPercentage,
	CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END AS fname, p.lname, p.ssn, p.dob,
	ISNULL(CASE WHEN LEN(p.zip) > 5 THEN substring(p.zip, 1, 5) ELSE p.zip  END, '') AS zip
INTO #PersonWiIdsZipDob
FROM #wiDemogsAndScore wi JOIN cow.dbo.Person p  WITH (NOLOCK)
ON p.lname = wi.lname
AND  CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END
like CASE WHEN CHARINDEX(' ', wi.fname) > 3 THEN substring(wi.fname, 1, CHARINDEX(' ', wi.fname)-1) + '%' ELSE wi.fname + '%'  END
and p.ssn = wi.ssn
where healthSystemId=@healthSystemId
AND p.fname IS NOT NULL AND p.lname IS NOT NULL AND p.ssn IS NOT NULL -- AND p.dob IS NOT NULL AND p.zip IS NOT NULL  --  allowing one or other to be null matching will fail on both null scenarios
AND p.ssn NOT IN ('100000000', '000000001', '999990999', '999990099', '999990009', '000000000','111111111','222222222', '333333333','444444444','555555555','666666666','777777777','888888888','999999999')
and (
		CASE WHEN LEN(p.zip) > 5 THEN substring(p.zip, 1, 5) ELSE p.zip  END = CASE WHEN LEN(wi.zip) > 5 THEN substring(wi.zip, 1, 5) ELSE wi.zip  END
		AND
		(
		ISDATE(p.dob) = 1 AND ISDATE(wi.dob) = 1
		AND REPLACE(p.dob,'/','') NOT IN ('01011890','02021902','01011901','01011950','01012001','01011900','01011980','01011970','01011902','01011985','01011960','18900101','19020202','19010101','19500101','20010101,19000101','19800101','19700101','19020101','19850101','19600101')
		AND (REPLACE(p.dob,'/','') = REPLACE(wi.dob,'/','') OR CONVERT(DATETIME, p.dob) = CONVERT(DATETIME, wi.dob))
		)
	)

SET @ErrorMessage = 'Strictly matched ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' persons for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

-- try to get all the linked records using only dob
SELECT personId, wi.workItemId, wi.creditScore, wi.creditScoreDate, wi.fplPercentage,
	CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END AS fname, p.lname, p.ssn, p.dob,
	ISNULL(CASE WHEN LEN(p.zip) > 5 THEN substring(p.zip, 1, 5) ELSE p.zip  END, '') AS zip
INTO #PersonWiIdsDob
FROM #wiDemogsAndScore wi JOIN cow.dbo.Person p  WITH (NOLOCK)
ON p.lname = wi.lname
AND  CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END
like CASE WHEN CHARINDEX(' ', wi.fname) > 3 THEN substring(wi.fname, 1, CHARINDEX(' ', wi.fname)-1) + '%' ELSE wi.fname + '%'  END
and p.ssn = wi.ssn
where healthSystemId=@healthSystemId
AND p.fname IS NOT NULL AND p.lname IS NOT NULL AND p.ssn IS NOT NULL -- AND p.dob IS NOT NULL AND p.zip IS NOT NULL  --  allowing one or other to be null matching will fail on both null scenarios
AND p.ssn NOT IN ('100000000', '000000001', '999990999', '999990099', '999990009', '000000000','111111111','222222222', '333333333','444444444','555555555','666666666','777777777','888888888','999999999')
AND ISDATE(p.dob) = 1 AND ISDATE(wi.dob) = 1
AND REPLACE(p.dob,'/','') NOT IN ('01011890','02021902','01011901','01011950','01012001','01011900','01011980','01011970','01011902','01011985','01011960','18900101','19020202','19010101','19500101','20010101,19000101','19800101','19700101','19020101','19850101','19600101')
AND (REPLACE(p.dob,'/','') = REPLACE(wi.dob,'/','') OR CONVERT(DATETIME, p.dob) = CONVERT(DATETIME, wi.dob))

-- matches more
SET @ErrorMessage = 'Loosely matched (dob) ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' persons for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

-- try matching just on zip
SELECT personId, wi.workItemId, wi.creditScore, wi.creditScoreDate, wi.fplPercentage,
	CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END AS fname, p.lname, p.ssn, p.dob,
	ISNULL(CASE WHEN LEN(p.zip) > 5 THEN substring(p.zip, 1, 5) ELSE p.zip  END, '') AS zip
INTO #PersonWiIdsZip
FROM #wiDemogsAndScore wi JOIN cow.dbo.Person p  WITH (NOLOCK)
ON p.lname = wi.lname
AND  CASE WHEN CHARINDEX(' ', p.fname) > 3 THEN substring(p.fname, 1, CHARINDEX(' ', p.fname)-1) + '%' ELSE p.fname + '%'  END
like CASE WHEN CHARINDEX(' ', wi.fname) > 3 THEN substring(wi.fname, 1, CHARINDEX(' ', wi.fname)-1) + '%' ELSE wi.fname + '%'  END
and p.ssn = wi.ssn
where healthSystemId=@healthSystemId
AND p.fname IS NOT NULL AND p.lname IS NOT NULL AND p.ssn IS NOT NULL -- AND p.dob IS NOT NULL AND p.zip IS NOT NULL  --  allowing one or other to be null matching will fail on both null scenarios
AND p.ssn NOT IN ('100000000', '000000001', '999990999', '999990099', '999990009', '000000000','111111111','222222222', '333333333','444444444','555555555','666666666','777777777','888888888','999999999')
and CASE WHEN LEN(p.zip) > 5 THEN substring(p.zip, 1, 5) ELSE p.zip  END = CASE WHEN LEN(wi.zip) > 5 THEN substring(wi.zip, 1, 5) ELSE wi.zip  END

SET @ErrorMessage = 'Loosely matched (zip) ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' persons for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

-- load the guarantor ids into tmp
SELECT guarantorId, tmp.creditScore, tmp.creditScoreDate, tmp.fplPercentage, tmp.workItemId INTO #GupdateIdsDZ  FROM cow.dbo.Guarantor g JOIN #PersonWiIdsZipDob tmp ON g.personId = tmp.personId  -- drop table #GupdateIdsDZ
SELECT guarantorId, tmp.creditScore, tmp.creditScoreDate, tmp.fplPercentage, tmp.workItemId INTO #GupdateIdsD FROM cow.dbo.Guarantor g JOIN #PersonWiIdsDob tmp ON g.personId = tmp.personId
		WHERE guarantorId NOT IN ( SELECT guarantorId FROM #GupdateIdsDZ )  -- drop table #GupdateIdsD
SELECT guarantorId, tmp.creditScore, tmp.creditScoreDate, tmp.fplPercentage, tmp.workItemId INTO #GupdateIdsZ FROM cow.dbo.Guarantor g JOIN #PersonWiIdsZip tmp ON g.personId = tmp.personId  -- drop table #GupdateIdsZ
		WHERE guarantorId NOT IN ( SELECT guarantorId FROM #GupdateIdsDZ ) AND guarantorId NOT IN ( SELECT guarantorId FROM #GupdateIdsD )

-- now carefully update the Guarantor via tmp tables
UPDATE cow.dbo.Guarantor SET creditScore = tmp.creditScore, creditScoreDate = tmp.creditScoreDate , lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsDZ tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.creditScore IS NULL AND healthSystemId = @healthSystemId

-- update fplPercentage
UPDATE cow.dbo.Guarantor SET fplPercentage = tmp.fplPercentage, lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsDZ tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.fplPercentage IS NULL AND healthSystemId = @healthSystemId

INSERT INTO GuarantorScoreSource ( guarantorId, workItemId, score, scoreDate, lastModDate, lastModUser, healthSystemId )
( SELECT guarantorId, workItemId, creditScore, creditScoreDate, lastModDate = GETDATE(), lastModUser = @lastModUser, @healthSystemId FROM #GupdateIdsDZ )

SET @ErrorMessage = 'Updated guarantors with exact flsdz ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

UPDATE cow.dbo.Guarantor SET creditScore = tmp.creditScore, creditScoreDate = tmp.creditScoreDate, lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsD tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.creditScore IS NULL AND healthSystemId = @healthSystemId

UPDATE cow.dbo.Guarantor SET fplPercentage = tmp.fplPercentage, lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsD tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.fplPercentage IS NULL AND healthSystemId = @healthSystemId

INSERT INTO GuarantorScoreSource ( guarantorId, workItemId, score, scoreDate, lastModDate, lastModUser, healthSystemId )
( SELECT guarantorId, workItemId, creditScore, creditScoreDate, lastModDate = GETDATE(), lastModUser = @lastModUser, @healthSystemId FROM #GupdateIdsD )

SET @ErrorMessage = 'Updated guarantors with partial flsd ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

UPDATE cow.dbo.Guarantor SET creditScore = tmp.creditScore, creditScoreDate = tmp.creditScoreDate , lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsZ tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.creditScore IS NULL AND healthSystemId = @healthSystemId

UPDATE cow.dbo.Guarantor SET fplPercentage = tmp.fplPercentage, lastModDate = GETDATE(), lastModUser = @lastModUser
FROM #GupdateIdsZ tmp JOIN cow.dbo.Guarantor g ON tmp.guarantorId = g.guarantorId WHERE g.fplPercentage IS NULL AND healthSystemId = @healthSystemId

INSERT INTO GuarantorScoreSource ( guarantorId, workItemId, score, scoreDate, lastModDate, lastModUser, healthSystemId )
( SELECT guarantorId, workItemId, creditScore, creditScoreDate, lastModDate = GETDATE(), lastModUser = @lastModUser, @healthSystemId FROM #GupdateIdsZ )

SET @ErrorMessage = 'Updated guarantors with partial flsz ' +  CAST(@@ROWCOUNT AS VARCHAR(50)) + ' for: ' + @healthSystemId
EXEC ETLAdmin.dbo.uspLogDBError 0, @date, @db, @name, 0, NULL, NULL, 'INFO', NULL, @procName, NULL, @ErrorMessage

UPDATE dbo.PfrRequest SET scoreTransferCounter = scoreTransferCounter -1 WHERE healthSystemId = @healthSystemId AND jobName = 'PatientOutcomesToPfrConverter'

SET @ErrorMessage = 'End SP Step 23 for HealthSystem: ' + @healthSystemId

END
#+END_SRC

Validates Person, Visit and Guarantor records
#+BEGIN_SRC sql
        String invalidMsg = "Pfr Source invalid: Please contact Engineering and include"
            + " the error message from the failed search and a screenshot. ";
        // check cross health system linkages
        boolean foundIssue1 = validate(
            " SELECT count(*) as count FROM Visit v with (nolock) JOIN Guarantor g with (nolock) ON v.guarantorId = g.guarantorId WHERE v.healthSystemId <> g.healthSystemId ",
            invalidMsg);
        boolean foundIssue2 = validate(
            " SELECT count(*) as count FROM Person v with (nolock) JOIN Guarantor g with (nolock) ON v.personId = g.personId WHERE v.healthSystemId <> g.healthSystemId ",
            invalidMsg);
        boolean foundIssue3 = validate(
            " SELECT count(*) as count FROM Visit v with (nolock) JOIN Patient g with (nolock) ON v.patientId = g.patientId WHERE v.healthSystemId <> g.healthSystemId ",
            invalidMsg);
        boolean foundIssue4 = validate(
            " SELECT count(*) as count FROM Person v with (nolock) JOIN Patient g with (nolock) ON v.personId = g.personId WHERE v.healthSystemId <> g.healthSystemId ",
            invalidMsg);
        // check dup accounts
        boolean foundIssue5 = validate(
            " SELECT patientAccountNumber, companyId, healthSystemId, count(*) as count FROM dbo.Visit with (nolock) GROUP BY patientAccountNumber, companyId, healthSystemId Having Count(*) > 1 ",
            invalidMsg);
        boolean foundIssue5_5 = validate(
            " select healthSystemId,topClusterId,count(*) as count from Guarantor with (nolock) group by  healthSystemId,topClusterId having count(*)>1",
            invalidMsg);
        boolean foundIssue5_6 = validate(
            " select healthSystemId,topClusterId,mrn,count(*) as count from Patient with (nolock) group by  healthSystemId,topClusterId,mrn having count(*)>1",
            invalidMsg);
        boolean foundIssue5_7 = validate(
            " select healthSystemId,topClusterId,count(*) as count from Person with (nolock) group by  healthSystemId,topClusterId having count(*)>1",
            invalidMsg);

        // Checking for cross health system links
        boolean foundIssue6 = validate(
            " select count(*) as count from CpoBarcodeView cpo with (nolock), TopCluster tc  with (nolock) where tc.topClusterId = cpo.guarantorTopClusterId and tc.healthSystemId <> cpo.currentHealthSystemId ",
            invalidMsg);
        boolean foundIssue7 = validate(
            " select count(*) as count from CpoBarcodeView cpo with (nolock), TopCluster tc  with (nolock) where tc.topClusterId = cpo.patientTopClusterId and tc.healthSystemId <> cpo.currentHealthSystemId ",
            invalidMsg);
        boolean foundIssue8 = validate(
            " select count(*) as count from SsnCluster ssnc with (nolock),  TopCluster tc  with (nolock) where ssnc.ssnClusterId = tc.ssnClusterId and tc.healthSystemId <> ssnc.healthSystemId ",
            invalidMsg);
        boolean foundIssue9 = validate(
            " select count(*) as count from AddrCluster ssnc with (nolock),  TopCluster tc  with (nolock) where ssnc.addrClusterId = tc.addrClusterId and tc.healthSystemId <> ssnc.healthSystemId ",
            invalidMsg);
        // make sure no cross health system links
        boolean foundIssue10 = validate(
            " select count(*) as count from Person p with (nolock),TopCluster b with (nolock) where p.topClusterId=b.topClusterId and p.healthSystemId<>b.healthSystemId  ",
            invalidMsg);
        boolean foundIssue11 = validate(
            " select count(*) as count from Patient p with (nolock),TopCluster b with (nolock) where p.topClusterId=b.topClusterId and p.healthSystemId<>b.healthSystemId ",
            invalidMsg);
        boolean foundIssue12 = validate(
            " select count(*) as count from Guarantor p with (nolock),TopCluster b with (nolock) where p.topClusterId=b.topClusterId and p.healthSystemId<>b.healthSystemId ",
            invalidMsg);
        // detect records missing top cluster id
        boolean foundIssue13 = validate(
            " select count(*) as count from Person with (nolock) where topClusterId is null ", invalidMsg);
        boolean foundIssue14 = validate(
            " select count(*) as count from Patient with (nolock) where topClusterId is null ", invalidMsg);
        boolean foundIssue15 = validate(
            " select count(*) as count from Guarantor with (nolock) where topClusterId is null ", invalidMsg);
        // Checks for orphaned top cluster ids
        boolean foundIssue16 = validate(
            " select count(*) as count from Person p where p.topClusterId is not null and p.topClusterId not in (select topClusterId from TopCluster) ",
            invalidMsg);
        boolean foundIssue17 = validate(
            " select count(*) as count from Guarantor p where p.topClusterId is not null and p.topClusterId not in (select topClusterId from TopCluster) ",
            invalidMsg);
        boolean foundIssue18 = validate(
            " select count(*) as count from Patient p where p.topClusterId is not null and p.topClusterId not in (select topClusterId from TopCluster) ",
            invalidMsg);
        //check for illegal ssn clusters
        boolean foundIssue19 = validate(
            " select count(*) as count from SsnCluster ssnc with (nolock), TopCluster tc  with (nolock) where ssnc.ssnClusterId = tc.ssnClusterId and ssnc.dobInt IS NULL ",
            invalidMsg);
        //check for any missing Visit information, everything in the extact should now be in Visit
        boolean foundIssue20 = validate(
            " SELECT count(*) as count FROM dbo.CpoPfrStaging cpo WITH ( NOLOCK ) "
                + " FULL JOIN dbo.Visit v WITH ( NOLOCK ) ON cpo.currentHealthSystemId = v.healthSystemId AND cpo.currentCompanyid = v.companyId AND cpo.currentAccountNumber = v.patientAccountNumber "
                + " JOIN dbo.PfrRequest req WITH (NOLOCK) ON req.healthSystemId = cpo.currentHealthSystemId "
                + " WHERE req.healthSystemId = ? and ( ISNULL(v.outstandingPatientBalance,0) <> ISNULL(cpo.currentOutstandingPatientBalance, 0) "
                + " OR ISNULL(v.accountStatus,'') <> ISNULL(cpo.currentAccountStatus,'') "
                + " OR ISNULL(v.balanceVisible, 0) <> ISNULL(cpo.currentBalanceVisible, 0) "
                + " OR v.visitId IS null) ",
            invalidMsg + " Some accounts were not updated.", healthSystemId);

        if(foundIssue1 || foundIssue2 || foundIssue3 || foundIssue4 || foundIssue5 || foundIssue5_5
            || foundIssue5_6 || foundIssue5_7 || foundIssue6 || foundIssue7 || foundIssue8 || foundIssue9
            || foundIssue10 || foundIssue11 || foundIssue12 || foundIssue13 || foundIssue14 || foundIssue15
            || foundIssue16 || foundIssue17 || foundIssue18 || foundIssue19 || foundIssue20) {
            throw new IllegalStateException(
                "A data integrity issue was detected. Please see the batch monitor for more details.");
        }
#+END_SRC
