(ns techno.drums
  (:use [overtone.core]
        [overtone.inst.drum]
        [techno.samples]
        [techno.recorder]
        )
  (:require [techno.sequencer :as sequencer])
  )

(def instruments [dance-kick noise-snare bing])


(def beat-sequence
  {
   1 [open-hat [:decay 0.5]]
   2 [kick []]
   3 [closed-hat []]
   4 [dance-kick []]
   }
  )


(def cymbals (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples\\Assorted Hits\\Cymbals"))
(def hi-hats (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples\\Assorted Hits\\Hi Hats"))
(def kicks (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples\\Assorted Hits\\Kicks"))
(def snares (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples\\Assorted Hits\\Snares"))
(def drum-kits (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples\\Drum Kits" true))


(defn make-beat [length]
  (let [beats (range 1 (inc length))
        choose-fn (fn [beat]
                    (vector (cond (= (mod beat 4) 0)
                               (choose (vals hi-hats))
                               (= (mod beat 2) 0)
                               (choose (vals snares))
                               true
                               (choose (vals kicks))
                               )
                         []
                         ))]
    (zipmap beats
            (map choose-fn beats))
    )
  )



                                        ;Patterns


                                        ;Playing functions
;; (def beat (atom (make-beat 20)))

;;(swap! beat (fn [_] (make-beat 30)))
;; (swap! beat (fn [_] (gen-pattern 10 (vals (drum-kits :Kit3-Acoustic)))))

;(def beat2 (atom (gen-pattern 10 (vals (drum-kits :Kit15-Electro)))))

;(def t2 (sequencer/start-sequencer beat2 5))
(ctl t2 :clock-speed 2)
(kill t2)

;; (def t (sequencer/start-sequencer beat 10))
;; (ctl t :clock-speed 2)
;; (def sync (sequencer/syncopate t 2 1 20))
;; (kill sequencer/syncopation-synth)
;; (kill t)
;; (remove-watch beat :sequencer)
;; (sequencer/pp-pattern @beat)
;; (println (keys drum-samples))




(defn gen-pattern [size instruments]
  (let [pattern {}]
    (reduce
     (fn [pattern beat]
       (let [instrument (choose instruments)
             scale (scale (choose [:Bb4 :C#5]) (choose [:major :minor]))
             ]
         (assoc pattern
                beat
                (vector
                 instrument
                 []
                 (if (= instrument dance-kick)
                   [:decay (- 2 (rand 1.5))
                    ;:freq (midicps (choose scale))
                    ]
                   [])
                 )
                )))
     {}
     (range 1 (inc size))
     )
    )
  )
