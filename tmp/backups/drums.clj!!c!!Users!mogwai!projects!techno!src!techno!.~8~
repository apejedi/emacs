(ns techno.drums
  (:use [overtone.core]
        [overtone.inst.drum]
        [techno.samples]
        )
  (:require [techno.sequencer :as sequencer])
  )

(def instruments [dance-kick noise-snare bing])


(def beat-sequence
  {
   1 [open-hat [:decay 0.5]]
   2 [kick []]
   3 [closed-hat []]
   4 [dance-kick []]
   }
  )


(def drum-samples (create-sample-map "D:\\musicradar-drum-samples\\musicradar-drum-samples"))



                                        ;Patterns


                                        ;Playing functions
(def beat (atom (gen-pattern 10 instruments)))

(swap! beat (fn [_] (gen-pattern 10 instruments)))

(swap! beat (fn [_] (gen-pattern 4 (vals drum-samples))))

(def t (sequencer/sequencer beat 10))
(ctl t :clock-speed 5)
(def sync (sequencer/syncopate t 2 1 20))
(kill sequencer/syncopation-synth)
(kill t)
(sequencer/pp-pattern @beat)
(println (keys drum-samples))





(defn gen-pattern [size instruments]
  (let [pattern {}]
    (reduce
     (fn [pattern beat]
       (let [instrument (choose instruments)
             scale (scale (choose [:Bb4 :C#5]) (choose [:major :minor]))
             ]
         (assoc pattern
                beat
                (vector
                 instrument
                 []
                 (if (= instrument dance-kick)
                   [:decay (- 2 (rand 1.5))
                    ;:freq (midicps (choose scale))
                    ]
                   [])
                 )
                )))
     {}
     (range 1 (inc size))
     )
    )
  )
